{
  "version": 3,
  "sources": ["../../../../../../node_modules/radix3/dist/index.mjs"],
  "sourcesContent": ["const NODE_TYPES = {\n  NORMAL: 0,\n  WILDCARD: 1,\n  PLACEHOLDER: 2\n};\n\nfunction createRouter(options = {}) {\n  const ctx = {\n    options,\n    rootNode: createRadixNode(),\n    staticRoutesMap: {}\n  };\n  const normalizeTrailingSlash = (p) => options.strictTrailingSlash ? p : p.replace(/\\/$/, \"\") || \"/\";\n  if (options.routes) {\n    for (const path in options.routes) {\n      insert(ctx, normalizeTrailingSlash(path), options.routes[path]);\n    }\n  }\n  return {\n    ctx,\n    // @ts-ignore\n    lookup: (path) => lookup(ctx, normalizeTrailingSlash(path)),\n    insert: (path, data) => insert(ctx, normalizeTrailingSlash(path), data),\n    remove: (path) => remove(ctx, normalizeTrailingSlash(path))\n  };\n}\nfunction lookup(ctx, path) {\n  const staticPathNode = ctx.staticRoutesMap[path];\n  if (staticPathNode) {\n    return staticPathNode.data;\n  }\n  const sections = path.split(\"/\");\n  const params = {};\n  let paramsFound = false;\n  let wildcardNode = null;\n  let node = ctx.rootNode;\n  let wildCardParam = null;\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i];\n    if (node.wildcardChildNode !== null) {\n      wildcardNode = node.wildcardChildNode;\n      wildCardParam = sections.slice(i).join(\"/\");\n    }\n    const nextNode = node.children.get(section);\n    if (nextNode !== void 0) {\n      node = nextNode;\n    } else {\n      node = node.placeholderChildNode;\n      if (node !== null) {\n        params[node.paramName] = section;\n        paramsFound = true;\n      } else {\n        break;\n      }\n    }\n  }\n  if ((node === null || node.data === null) && wildcardNode !== null) {\n    node = wildcardNode;\n    params[node.paramName || \"_\"] = wildCardParam;\n    paramsFound = true;\n  }\n  if (!node) {\n    return null;\n  }\n  if (paramsFound) {\n    return {\n      ...node.data,\n      params: paramsFound ? params : void 0\n    };\n  }\n  return node.data;\n}\nfunction insert(ctx, path, data) {\n  let isStaticRoute = true;\n  const sections = path.split(\"/\");\n  let node = ctx.rootNode;\n  let _unnamedPlaceholderCtr = 0;\n  for (const section of sections) {\n    let childNode;\n    if (childNode = node.children.get(section)) {\n      node = childNode;\n    } else {\n      const type = getNodeType(section);\n      childNode = createRadixNode({ type, parent: node });\n      node.children.set(section, childNode);\n      if (type === NODE_TYPES.PLACEHOLDER) {\n        childNode.paramName = section === \"*\" ? `_${_unnamedPlaceholderCtr++}` : section.slice(1);\n        node.placeholderChildNode = childNode;\n        isStaticRoute = false;\n      } else if (type === NODE_TYPES.WILDCARD) {\n        node.wildcardChildNode = childNode;\n        childNode.paramName = section.slice(\n          3\n          /* \"**:\" */\n        ) || \"_\";\n        isStaticRoute = false;\n      }\n      node = childNode;\n    }\n  }\n  node.data = data;\n  if (isStaticRoute === true) {\n    ctx.staticRoutesMap[path] = node;\n  }\n  return node;\n}\nfunction remove(ctx, path) {\n  let success = false;\n  const sections = path.split(\"/\");\n  let node = ctx.rootNode;\n  for (const section of sections) {\n    node = node.children.get(section);\n    if (!node) {\n      return success;\n    }\n  }\n  if (node.data) {\n    const lastSection = sections[sections.length - 1];\n    node.data = null;\n    if (Object.keys(node.children).length === 0) {\n      const parentNode = node.parent;\n      parentNode.children.delete(lastSection);\n      parentNode.wildcardChildNode = null;\n      parentNode.placeholderChildNode = null;\n    }\n    success = true;\n  }\n  return success;\n}\nfunction createRadixNode(options = {}) {\n  return {\n    type: options.type || NODE_TYPES.NORMAL,\n    parent: options.parent || null,\n    children: /* @__PURE__ */ new Map(),\n    data: options.data || null,\n    paramName: options.paramName || null,\n    wildcardChildNode: null,\n    placeholderChildNode: null\n  };\n}\nfunction getNodeType(str) {\n  if (str.startsWith(\"**\")) {\n    return NODE_TYPES.WILDCARD;\n  }\n  if (str[0] === \":\" || str === \"*\") {\n    return NODE_TYPES.PLACEHOLDER;\n  }\n  return NODE_TYPES.NORMAL;\n}\n\nfunction toRouteMatcher(router) {\n  const table = _routerNodeToTable(\"\", router.ctx.rootNode);\n  return _createMatcher(table);\n}\nfunction _createMatcher(table) {\n  return {\n    ctx: { table },\n    matchAll: (path) => _matchRoutes(path, table)\n  };\n}\nfunction _createRouteTable() {\n  return {\n    static: /* @__PURE__ */ new Map(),\n    wildcard: /* @__PURE__ */ new Map(),\n    dynamic: /* @__PURE__ */ new Map()\n  };\n}\nfunction _exportMatcherFromTable(table) {\n  const obj = /* @__PURE__ */ Object.create(null);\n  for (const property in table) {\n    obj[property] = property === \"dynamic\" ? Object.fromEntries(\n      [...table[property].entries()].map(([key, value]) => [\n        key,\n        _exportMatcherFromTable(value)\n      ])\n    ) : Object.fromEntries(table[property].entries());\n  }\n  return obj;\n}\nfunction exportMatcher(matcher) {\n  return _exportMatcherFromTable(matcher.ctx.table);\n}\nfunction _createTableFromExport(matcherExport) {\n  const table = {};\n  for (const property in matcherExport) {\n    table[property] = property === \"dynamic\" ? new Map(\n      Object.entries(matcherExport[property]).map(([key, value]) => [\n        key,\n        _createTableFromExport(value)\n      ])\n    ) : new Map(Object.entries(matcherExport[property]));\n  }\n  return table;\n}\nfunction createMatcherFromExport(matcherExport) {\n  return _createMatcher(_createTableFromExport(matcherExport));\n}\nfunction _matchRoutes(path, table) {\n  const matches = [];\n  for (const [key, value] of _sortRoutesMap(table.wildcard)) {\n    if (path.startsWith(key)) {\n      matches.push(value);\n    }\n  }\n  for (const [key, value] of _sortRoutesMap(table.dynamic)) {\n    if (path.startsWith(key + \"/\")) {\n      const subPath = \"/\" + path.slice(key.length).split(\"/\").splice(2).join(\"/\");\n      matches.push(..._matchRoutes(subPath, value));\n    }\n  }\n  const staticMatch = table.static.get(path);\n  if (staticMatch) {\n    matches.push(staticMatch);\n  }\n  return matches.filter(Boolean);\n}\nfunction _sortRoutesMap(m) {\n  return [...m.entries()].sort((a, b) => a[0].length - b[0].length);\n}\nfunction _routerNodeToTable(initialPath, initialNode) {\n  const table = _createRouteTable();\n  function _addNode(path, node) {\n    if (path) {\n      if (node.type === NODE_TYPES.NORMAL && !(path.includes(\"*\") || path.includes(\":\"))) {\n        table.static.set(path, node.data);\n      } else if (node.type === NODE_TYPES.WILDCARD) {\n        table.wildcard.set(path.replace(\"/**\", \"\"), node.data);\n      } else if (node.type === NODE_TYPES.PLACEHOLDER) {\n        const subTable = _routerNodeToTable(\"\", node);\n        if (node.data) {\n          subTable.static.set(\"/\", node.data);\n        }\n        table.dynamic.set(path.replace(/\\/\\*|\\/:\\w+/, \"\"), subTable);\n        return;\n      }\n    }\n    for (const [childPath, child] of node.children.entries()) {\n      _addNode(`${path}/${childPath}`.replace(\"//\", \"/\"), child);\n    }\n  }\n  _addNode(initialPath, initialNode);\n  return table;\n}\n\nexport { NODE_TYPES, createMatcherFromExport, createRouter, exportMatcher, toRouteMatcher };\n"],
  "mappings": "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",
  "names": []
}
