{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/graphql/utilities/separateOperations.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Kind } from \"../language/kinds.mjs\";\nimport { visit } from \"../language/visitor.mjs\";\n/**\n * separateOperations accepts a single AST document which may contain many\n * operations and fragments and returns a collection of AST documents each of\n * which contains a single operation as well the fragment definitions it\n * refers to.\n */\n\nexport function separateOperations(documentAST) {\n  var operations = [];\n  var depGraph = Object.create(null); // Populate metadata and build a dependency graph.\n\n  for (var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++) {\n    var definitionNode = _documentAST$definiti2[_i2];\n\n    switch (definitionNode.kind) {\n      case Kind.OPERATION_DEFINITION:\n        operations.push(definitionNode);\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        depGraph[definitionNode.name.value] = collectDependencies(definitionNode.selectionSet);\n        break;\n    }\n  } // For each operation, produce a new synthesized AST which includes only what\n  // is necessary for completing that operation.\n\n\n  var separatedDocumentASTs = Object.create(null);\n\n  var _loop = function _loop(_i4) {\n    var operation = operations[_i4];\n    var dependencies = new Set();\n\n    for (var _i6 = 0, _collectDependencies2 = collectDependencies(operation.selectionSet); _i6 < _collectDependencies2.length; _i6++) {\n      var fragmentName = _collectDependencies2[_i6];\n      collectTransitiveDependencies(dependencies, depGraph, fragmentName);\n    } // Provides the empty string for anonymous operations.\n\n\n    var operationName = operation.name ? operation.name.value : ''; // The list of definition nodes to be included for this operation, sorted\n    // to retain the same order as the original document.\n\n    separatedDocumentASTs[operationName] = {\n      kind: Kind.DOCUMENT,\n      definitions: documentAST.definitions.filter(function (node) {\n        return node === operation || node.kind === Kind.FRAGMENT_DEFINITION && dependencies.has(node.name.value);\n      })\n    };\n  };\n\n  for (var _i4 = 0; _i4 < operations.length; _i4++) {\n    _loop(_i4);\n  }\n\n  return separatedDocumentASTs;\n}\n\n// From a dependency graph, collects a list of transitive dependencies by\n// recursing through a dependency graph.\nfunction collectTransitiveDependencies(collected, depGraph, fromName) {\n  if (!collected.has(fromName)) {\n    collected.add(fromName);\n    var immediateDeps = depGraph[fromName];\n\n    if (immediateDeps !== undefined) {\n      for (var _i8 = 0; _i8 < immediateDeps.length; _i8++) {\n        var toName = immediateDeps[_i8];\n        collectTransitiveDependencies(collected, depGraph, toName);\n      }\n    }\n  }\n}\n\nfunction collectDependencies(selectionSet) {\n  var dependencies = [];\n  visit(selectionSet, {\n    FragmentSpread: function FragmentSpread(node) {\n      dependencies.push(node.name.value);\n    }\n  });\n  return dependencies;\n}\n",
      "start": 1746507067897,
      "end": 1746507067911,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746507067911,
      "end": 1746507067911,
      "order": "normal"
    }
  ]
}
