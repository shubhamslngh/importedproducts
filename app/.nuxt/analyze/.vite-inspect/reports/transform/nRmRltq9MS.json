{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@nuxtjs/apollo/node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isEnumType } from '../../type/definition.mjs';\n\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\nexport function UniqueEnumValueNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness,\n  };\n\n  function checkValueUniqueness(node) {\n    var _node$values;\n\n    const typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const valueNodes =\n      (_node$values = node.values) !== null && _node$values !== void 0\n        ? _node$values\n        : [];\n    const valueNames = knownValueNames[typeName];\n\n    for (const valueDef of valueNodes) {\n      const valueName = valueDef.name.value;\n      const existingType = existingTypeMap[typeName];\n\n      if (isEnumType(existingType) && existingType.getValue(valueName)) {\n        context.reportError(\n          new GraphQLError(\n            `Enum value \"${typeName}.${valueName}\" already exists in the schema. It cannot also be defined in this type extension.`,\n            {\n              nodes: valueDef.name,\n            },\n          ),\n        );\n      } else if (valueNames[valueName]) {\n        context.reportError(\n          new GraphQLError(\n            `Enum value \"${typeName}.${valueName}\" can only be defined once.`,\n            {\n              nodes: [valueNames[valueName], valueDef.name],\n            },\n          ),\n        );\n      } else {\n        valueNames[valueName] = valueDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n",
      "start": 1710863481304,
      "end": 1710863481316,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710863481316,
      "end": 1710863481316,
      "order": "normal"
    }
  ]
}
