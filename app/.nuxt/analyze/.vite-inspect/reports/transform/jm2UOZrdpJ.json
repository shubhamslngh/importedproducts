{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@nuxtjs/apollo/node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isNonNullType } from '../../type/definition.mjs';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Variables in allowed position\n *\n * Variable usages must be compatible with the arguments they are passed to.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Usages-are-Allowed\n */\nexport function VariablesInAllowedPositionRule(context) {\n  let varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        varDefMap = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node, type, defaultValue } of usages) {\n          const varName = node.name.value;\n          const varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            const schema = context.getSchema();\n            const varType = typeFromAST(schema, varDef.type);\n\n            if (\n              varType &&\n              !allowedVariableUsage(\n                schema,\n                varType,\n                varDef.defaultValue,\n                type,\n                defaultValue,\n              )\n            ) {\n              const varTypeStr = inspect(varType);\n              const typeStr = inspect(type);\n              context.reportError(\n                new GraphQLError(\n                  `Variable \"$${varName}\" of type \"${varTypeStr}\" used in position expecting type \"${typeStr}\".`,\n                  {\n                    nodes: [varDef, node],\n                  },\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    },\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(\n  schema,\n  varType,\n  varDefaultValue,\n  locationType,\n  locationDefaultValue,\n) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    const hasNonNullVariableDefaultValue =\n      varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\n    const hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    const nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}\n",
      "start": 1716330189462,
      "end": 1716330189472,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1716330189472,
      "end": 1716330189472,
      "order": "normal"
    }
  ]
}
