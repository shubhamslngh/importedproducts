{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@nuxtjs/apollo/node_modules/graphql/graphql.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { devAssert } from './jsutils/devAssert.mjs';\nimport { isPromise } from './jsutils/isPromise.mjs';\nimport { parse } from './language/parser.mjs';\nimport { validateSchema } from './type/validate.mjs';\nimport { validate } from './validation/validate.mjs';\nimport { execute } from './execution/execute.mjs';\n/**\n * This is the primary entry point function for fulfilling GraphQL operations\n * by parsing, validating, and executing a GraphQL document along side a\n * GraphQL schema.\n *\n * More sophisticated GraphQL servers, such as those which persist queries,\n * may wish to separate the validation and execution phases to a static time\n * tooling step, and a server runtime step.\n *\n * Accepts either an object with named arguments, or individual arguments:\n *\n * schema:\n *    The GraphQL type system to use when validating and executing a query.\n * source:\n *    A GraphQL language formatted string representing the requested operation.\n * rootValue:\n *    The value provided as the first argument to resolver functions on the top\n *    level type (e.g. the query object type).\n * contextValue:\n *    The context value is provided as an argument to resolver functions after\n *    field arguments. It is used to pass shared information useful at any point\n *    during executing this query, for example the currently logged in user and\n *    connections to databases or other services.\n * variableValues:\n *    A mapping of variable name to runtime value to use for all variables\n *    defined in the requestString.\n * operationName:\n *    The name of the operation to use if requestString contains multiple\n *    possible operations. Can be omitted if requestString contains only\n *    one operation.\n * fieldResolver:\n *    A resolver function to use when one is not provided by the schema.\n *    If not provided, the default field resolver is used (which looks for a\n *    value or method on the source value with the field's name).\n * typeResolver:\n *    A type resolver function to use when none is provided by the schema.\n *    If not provided, the default type resolver is used (which looks for a\n *    `__typename` field or alternatively calls the `isTypeOf` method).\n */\n\nexport function graphql(args) {\n  // Always return a Promise for a consistent API.\n  return new Promise((resolve) => resolve(graphqlImpl(args)));\n}\n/**\n * The graphqlSync function also fulfills GraphQL operations by parsing,\n * validating, and executing a GraphQL document along side a GraphQL schema.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nexport function graphqlSync(args) {\n  const result = graphqlImpl(args); // Assert that the execution was synchronous.\n\n  if (isPromise(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n\nfunction graphqlImpl(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 ||\n    devAssert(\n      false,\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\n    );\n  const {\n    schema,\n    source,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    typeResolver,\n  } = args; // Validate Schema\n\n  const schemaValidationErrors = validateSchema(schema);\n\n  if (schemaValidationErrors.length > 0) {\n    return {\n      errors: schemaValidationErrors,\n    };\n  } // Parse\n\n  let document;\n\n  try {\n    document = parse(source);\n  } catch (syntaxError) {\n    return {\n      errors: [syntaxError],\n    };\n  } // Validate\n\n  const validationErrors = validate(schema, document);\n\n  if (validationErrors.length > 0) {\n    return {\n      errors: validationErrors,\n    };\n  } // Execute\n\n  return execute({\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    typeResolver,\n  });\n}\n",
      "start": 1716304639855,
      "end": 1716304639866,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1716304639866,
      "end": 1716304639866,
      "order": "normal"
    }
  ]
}
