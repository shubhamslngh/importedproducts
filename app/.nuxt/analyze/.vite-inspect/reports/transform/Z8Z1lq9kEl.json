{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@nuxtjs/apollo/node_modules/graphql/utilities/printSchema.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isPrintableAsBlockString } from '../language/blockString.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.mjs';\nimport {\n  DEFAULT_DEPRECATION_REASON,\n  isSpecifiedDirective,\n} from '../type/directives.mjs';\nimport { isIntrospectionType } from '../type/introspection.mjs';\nimport { isSpecifiedScalarType } from '../type/scalars.mjs';\nimport { astFromValue } from './astFromValue.mjs';\nexport function printSchema(schema) {\n  return printFilteredSchema(\n    schema,\n    (n) => !isSpecifiedDirective(n),\n    isDefinedType,\n  );\n}\nexport function printIntrospectionSchema(schema) {\n  return printFilteredSchema(schema, isSpecifiedDirective, isIntrospectionType);\n}\n\nfunction isDefinedType(type) {\n  return !isSpecifiedScalarType(type) && !isIntrospectionType(type);\n}\n\nfunction printFilteredSchema(schema, directiveFilter, typeFilter) {\n  const directives = schema.getDirectives().filter(directiveFilter);\n  const types = Object.values(schema.getTypeMap()).filter(typeFilter);\n  return [\n    printSchemaDefinition(schema),\n    ...directives.map((directive) => printDirective(directive)),\n    ...types.map((type) => printType(type)),\n  ]\n    .filter(Boolean)\n    .join('\\n\\n');\n}\n\nfunction printSchemaDefinition(schema) {\n  if (schema.description == null && isSchemaOfCommonNames(schema)) {\n    return;\n  }\n\n  const operationTypes = [];\n  const queryType = schema.getQueryType();\n\n  if (queryType) {\n    operationTypes.push(`  query: ${queryType.name}`);\n  }\n\n  const mutationType = schema.getMutationType();\n\n  if (mutationType) {\n    operationTypes.push(`  mutation: ${mutationType.name}`);\n  }\n\n  const subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType) {\n    operationTypes.push(`  subscription: ${subscriptionType.name}`);\n  }\n\n  return printDescription(schema) + `schema {\\n${operationTypes.join('\\n')}\\n}`;\n}\n/**\n * GraphQL schema define root types for each type of operation. These types are\n * the same as any other type and can be named in any manner, however there is\n * a common naming convention:\n *\n * ```graphql\n *   schema {\n *     query: Query\n *     mutation: Mutation\n *     subscription: Subscription\n *   }\n * ```\n *\n * When using this naming convention, the schema description can be omitted.\n */\n\nfunction isSchemaOfCommonNames(schema) {\n  const queryType = schema.getQueryType();\n\n  if (queryType && queryType.name !== 'Query') {\n    return false;\n  }\n\n  const mutationType = schema.getMutationType();\n\n  if (mutationType && mutationType.name !== 'Mutation') {\n    return false;\n  }\n\n  const subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && subscriptionType.name !== 'Subscription') {\n    return false;\n  }\n\n  return true;\n}\n\nexport function printType(type) {\n  if (isScalarType(type)) {\n    return printScalar(type);\n  }\n\n  if (isObjectType(type)) {\n    return printObject(type);\n  }\n\n  if (isInterfaceType(type)) {\n    return printInterface(type);\n  }\n\n  if (isUnionType(type)) {\n    return printUnion(type);\n  }\n\n  if (isEnumType(type)) {\n    return printEnum(type);\n  }\n\n  if (isInputObjectType(type)) {\n    return printInputObject(type);\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction printScalar(type) {\n  return (\n    printDescription(type) + `scalar ${type.name}` + printSpecifiedByURL(type)\n  );\n}\n\nfunction printImplementedInterfaces(type) {\n  const interfaces = type.getInterfaces();\n  return interfaces.length\n    ? ' implements ' + interfaces.map((i) => i.name).join(' & ')\n    : '';\n}\n\nfunction printObject(type) {\n  return (\n    printDescription(type) +\n    `type ${type.name}` +\n    printImplementedInterfaces(type) +\n    printFields(type)\n  );\n}\n\nfunction printInterface(type) {\n  return (\n    printDescription(type) +\n    `interface ${type.name}` +\n    printImplementedInterfaces(type) +\n    printFields(type)\n  );\n}\n\nfunction printUnion(type) {\n  const types = type.getTypes();\n  const possibleTypes = types.length ? ' = ' + types.join(' | ') : '';\n  return printDescription(type) + 'union ' + type.name + possibleTypes;\n}\n\nfunction printEnum(type) {\n  const values = type\n    .getValues()\n    .map(\n      (value, i) =>\n        printDescription(value, '  ', !i) +\n        '  ' +\n        value.name +\n        printDeprecated(value.deprecationReason),\n    );\n  return printDescription(type) + `enum ${type.name}` + printBlock(values);\n}\n\nfunction printInputObject(type) {\n  const fields = Object.values(type.getFields()).map(\n    (f, i) => printDescription(f, '  ', !i) + '  ' + printInputValue(f),\n  );\n  return printDescription(type) + `input ${type.name}` + printBlock(fields);\n}\n\nfunction printFields(type) {\n  const fields = Object.values(type.getFields()).map(\n    (f, i) =>\n      printDescription(f, '  ', !i) +\n      '  ' +\n      f.name +\n      printArgs(f.args, '  ') +\n      ': ' +\n      String(f.type) +\n      printDeprecated(f.deprecationReason),\n  );\n  return printBlock(fields);\n}\n\nfunction printBlock(items) {\n  return items.length !== 0 ? ' {\\n' + items.join('\\n') + '\\n}' : '';\n}\n\nfunction printArgs(args, indentation = '') {\n  if (args.length === 0) {\n    return '';\n  } // If every arg does not have a description, print them on one line.\n\n  if (args.every((arg) => !arg.description)) {\n    return '(' + args.map(printInputValue).join(', ') + ')';\n  }\n\n  return (\n    '(\\n' +\n    args\n      .map(\n        (arg, i) =>\n          printDescription(arg, '  ' + indentation, !i) +\n          '  ' +\n          indentation +\n          printInputValue(arg),\n      )\n      .join('\\n') +\n    '\\n' +\n    indentation +\n    ')'\n  );\n}\n\nfunction printInputValue(arg) {\n  const defaultAST = astFromValue(arg.defaultValue, arg.type);\n  let argDecl = arg.name + ': ' + String(arg.type);\n\n  if (defaultAST) {\n    argDecl += ` = ${print(defaultAST)}`;\n  }\n\n  return argDecl + printDeprecated(arg.deprecationReason);\n}\n\nfunction printDirective(directive) {\n  return (\n    printDescription(directive) +\n    'directive @' +\n    directive.name +\n    printArgs(directive.args) +\n    (directive.isRepeatable ? ' repeatable' : '') +\n    ' on ' +\n    directive.locations.join(' | ')\n  );\n}\n\nfunction printDeprecated(reason) {\n  if (reason == null) {\n    return '';\n  }\n\n  if (reason !== DEFAULT_DEPRECATION_REASON) {\n    const astValue = print({\n      kind: Kind.STRING,\n      value: reason,\n    });\n    return ` @deprecated(reason: ${astValue})`;\n  }\n\n  return ' @deprecated';\n}\n\nfunction printSpecifiedByURL(scalar) {\n  if (scalar.specifiedByURL == null) {\n    return '';\n  }\n\n  const astValue = print({\n    kind: Kind.STRING,\n    value: scalar.specifiedByURL,\n  });\n  return ` @specifiedBy(url: ${astValue})`;\n}\n\nfunction printDescription(def, indentation = '', firstInBlock = true) {\n  const { description } = def;\n\n  if (description == null) {\n    return '';\n  }\n\n  const blockString = print({\n    kind: Kind.STRING,\n    value: description,\n    block: isPrintableAsBlockString(description),\n  });\n  const prefix =\n    indentation && !firstInBlock ? '\\n' + indentation : indentation;\n  return prefix + blockString.replace(/\\n/g, '\\n' + indentation) + '\\n';\n}\n",
      "start": 1746507067755,
      "end": 1746507067771,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746507067771,
      "end": 1746507067771,
      "order": "normal"
    }
  ]
}
