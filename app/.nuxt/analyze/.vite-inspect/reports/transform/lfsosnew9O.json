{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/graphql/utilities/stripIgnoredCharacters.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Source, isSource } from \"../language/source.mjs\";\nimport { TokenKind } from \"../language/tokenKind.mjs\";\nimport { Lexer, isPunctuatorTokenKind } from \"../language/lexer.mjs\";\nimport { dedentBlockStringValue, getBlockStringIndentation } from \"../language/blockString.mjs\";\n/**\n * Strips characters that are not significant to the validity or execution\n * of a GraphQL document:\n *   - UnicodeBOM\n *   - WhiteSpace\n *   - LineTerminator\n *   - Comment\n *   - Comma\n *   - BlockString indentation\n *\n * Note: It is required to have a delimiter character between neighboring\n * non-punctuator tokens and this function always uses single space as delimiter.\n *\n * It is guaranteed that both input and output documents if parsed would result\n * in the exact same AST except for nodes location.\n *\n * Warning: It is guaranteed that this function will always produce stable results.\n * However, it's not guaranteed that it will stay the same between different\n * releases due to bugfixes or changes in the GraphQL specification.\n *\n * Query example:\n *\n * query SomeQuery($foo: String!, $bar: String) {\n *   someField(foo: $foo, bar: $bar) {\n *     a\n *     b {\n *       c\n *       d\n *     }\n *   }\n * }\n *\n * Becomes:\n *\n * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}\n *\n * SDL example:\n *\n * \"\"\"\n * Type description\n * \"\"\"\n * type Foo {\n *   \"\"\"\n *   Field description\n *   \"\"\"\n *   bar: String\n * }\n *\n * Becomes:\n *\n * \"\"\"Type description\"\"\" type Foo{\"\"\"Field description\"\"\" bar:String}\n */\n\nexport function stripIgnoredCharacters(source) {\n  var sourceObj = isSource(source) ? source : new Source(source);\n  var body = sourceObj.body;\n  var lexer = new Lexer(sourceObj);\n  var strippedBody = '';\n  var wasLastAddedTokenNonPunctuator = false;\n\n  while (lexer.advance().kind !== TokenKind.EOF) {\n    var currentToken = lexer.token;\n    var tokenKind = currentToken.kind;\n    /**\n     * Every two non-punctuator tokens should have space between them.\n     * Also prevent case of non-punctuator token following by spread resulting\n     * in invalid token (e.g. `1...` is invalid Float token).\n     */\n\n    var isNonPunctuator = !isPunctuatorTokenKind(currentToken.kind);\n\n    if (wasLastAddedTokenNonPunctuator) {\n      if (isNonPunctuator || currentToken.kind === TokenKind.SPREAD) {\n        strippedBody += ' ';\n      }\n    }\n\n    var tokenBody = body.slice(currentToken.start, currentToken.end);\n\n    if (tokenKind === TokenKind.BLOCK_STRING) {\n      strippedBody += dedentBlockString(tokenBody);\n    } else {\n      strippedBody += tokenBody;\n    }\n\n    wasLastAddedTokenNonPunctuator = isNonPunctuator;\n  }\n\n  return strippedBody;\n}\n\nfunction dedentBlockString(blockStr) {\n  // skip leading and trailing triple quotations\n  var rawStr = blockStr.slice(3, -3);\n  var body = dedentBlockStringValue(rawStr);\n\n  if (getBlockStringIndentation(body) > 0) {\n    body = '\\n' + body;\n  }\n\n  var lastChar = body[body.length - 1];\n  var hasTrailingQuote = lastChar === '\"' && body.slice(-4) !== '\\\\\"\"\"';\n\n  if (hasTrailingQuote || lastChar === '\\\\') {\n    body += '\\n';\n  }\n\n  return '\"\"\"' + body + '\"\"\"';\n}\n",
      "start": 1710864567343,
      "end": 1710864567355,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710864567355,
      "end": 1710864567355,
      "order": "normal"
    }
  ]
}
