{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@apollo/client/link/core/ApolloLink.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { newInvariantError, invariant } from \"../../utilities/globals/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { validateOperation, createOperation, transformOperation, } from \"../utils/index.js\";\nfunction passthrough(op, forward) {\n    return (forward ? forward(op) : Observable.of());\n}\nfunction toLink(handler) {\n    return typeof handler === \"function\" ? new ApolloLink(handler) : handler;\n}\nfunction isTerminating(link) {\n    return link.request.length <= 1;\n}\nvar ApolloLink = /** @class */ (function () {\n    function ApolloLink(request) {\n        if (request)\n            this.request = request;\n    }\n    ApolloLink.empty = function () {\n        return new ApolloLink(function () { return Observable.of(); });\n    };\n    ApolloLink.from = function (links) {\n        if (links.length === 0)\n            return ApolloLink.empty();\n        return links.map(toLink).reduce(function (x, y) { return x.concat(y); });\n    };\n    ApolloLink.split = function (test, left, right) {\n        var leftLink = toLink(left);\n        var rightLink = toLink(right || new ApolloLink(passthrough));\n        var ret;\n        if (isTerminating(leftLink) && isTerminating(rightLink)) {\n            ret = new ApolloLink(function (operation) {\n                return test(operation) ?\n                    leftLink.request(operation) || Observable.of()\n                    : rightLink.request(operation) || Observable.of();\n            });\n        }\n        else {\n            ret = new ApolloLink(function (operation, forward) {\n                return test(operation) ?\n                    leftLink.request(operation, forward) || Observable.of()\n                    : rightLink.request(operation, forward) || Observable.of();\n            });\n        }\n        return Object.assign(ret, { left: leftLink, right: rightLink });\n    };\n    ApolloLink.execute = function (link, operation) {\n        return (link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of());\n    };\n    ApolloLink.concat = function (first, second) {\n        var firstLink = toLink(first);\n        if (isTerminating(firstLink)) {\n            globalThis.__DEV__ !== false && invariant.warn(35, firstLink);\n            return firstLink;\n        }\n        var nextLink = toLink(second);\n        var ret;\n        if (isTerminating(nextLink)) {\n            ret = new ApolloLink(function (operation) {\n                return firstLink.request(operation, function (op) { return nextLink.request(op) || Observable.of(); }) || Observable.of();\n            });\n        }\n        else {\n            ret = new ApolloLink(function (operation, forward) {\n                return (firstLink.request(operation, function (op) {\n                    return nextLink.request(op, forward) || Observable.of();\n                }) || Observable.of());\n            });\n        }\n        return Object.assign(ret, { left: firstLink, right: nextLink });\n    };\n    ApolloLink.prototype.split = function (test, left, right) {\n        return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));\n    };\n    ApolloLink.prototype.concat = function (next) {\n        return ApolloLink.concat(this, next);\n    };\n    ApolloLink.prototype.request = function (operation, forward) {\n        throw newInvariantError(36);\n    };\n    ApolloLink.prototype.onError = function (error, observer) {\n        if (observer && observer.error) {\n            observer.error(error);\n            // Returning false indicates that observer.error does not need to be\n            // called again, since it was already called (on the previous line).\n            // Calling observer.error again would not cause any real problems,\n            // since only the first call matters, but custom onError functions\n            // might have other reasons for wanting to prevent the default\n            // behavior by returning false.\n            return false;\n        }\n        // Throw errors will be passed to observer.error.\n        throw error;\n    };\n    ApolloLink.prototype.setOnError = function (fn) {\n        this.onError = fn;\n        return this;\n    };\n    return ApolloLink;\n}());\nexport { ApolloLink };\n//# sourceMappingURL=ApolloLink.js.map",
      "start": 1710864566943,
      "end": 1710864567114,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710864567114,
      "end": 1710864567114,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710864567114,
      "end": 1710864567114,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1710864567114,
      "end": 1710864567114,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710864567114,
      "end": 1710864567114,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710864567114,
      "end": 1710864567114,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710864567114,
      "end": 1710864567114,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710864567114,
      "end": 1710864567114,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710864567114,
      "end": 1710864567114,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710864567114,
      "end": 1710864567114,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710864567114,
      "end": 1710864567114,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710864567114,
      "end": 1710864567114,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710864567114,
      "end": 1710864567114,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710864567114,
      "end": 1710864567114,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1710864567114,
      "end": 1710864567114,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710864567114,
      "end": 1710864567114,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710864567114,
      "end": 1710864567114,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710864567114,
      "end": 1710864567114,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { newInvariantError, invariant } from \"../../utilities/globals/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { validateOperation, createOperation, transformOperation } from \"../utils/index.js\";\nfunction passthrough(op, forward) {\n  return forward ? forward(op) : Observable.of();\n}\nfunction toLink(handler) {\n  return typeof handler === \"function\" ? new ApolloLink(handler) : handler;\n}\nfunction isTerminating(link) {\n  return link.request.length <= 1;\n}\nvar ApolloLink = (\n  /** @class */\n  function() {\n    function ApolloLink2(request) {\n      if (request)\n        this.request = request;\n    }\n    ApolloLink2.empty = function() {\n      return new ApolloLink2(function() {\n        return Observable.of();\n      });\n    };\n    ApolloLink2.from = function(links) {\n      if (links.length === 0)\n        return ApolloLink2.empty();\n      return links.map(toLink).reduce(function(x, y) {\n        return x.concat(y);\n      });\n    };\n    ApolloLink2.split = function(test, left, right) {\n      var leftLink = toLink(left);\n      var rightLink = toLink(right || new ApolloLink2(passthrough));\n      var ret;\n      if (isTerminating(leftLink) && isTerminating(rightLink)) {\n        ret = new ApolloLink2(function(operation) {\n          return test(operation) ? leftLink.request(operation) || Observable.of() : rightLink.request(operation) || Observable.of();\n        });\n      } else {\n        ret = new ApolloLink2(function(operation, forward) {\n          return test(operation) ? leftLink.request(operation, forward) || Observable.of() : rightLink.request(operation, forward) || Observable.of();\n        });\n      }\n      return Object.assign(ret, { left: leftLink, right: rightLink });\n    };\n    ApolloLink2.execute = function(link, operation) {\n      return link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of();\n    };\n    ApolloLink2.concat = function(first, second) {\n      var firstLink = toLink(first);\n      if (isTerminating(firstLink)) {\n        globalThis.__DEV__ !== false && invariant.warn(35, firstLink);\n        return firstLink;\n      }\n      var nextLink = toLink(second);\n      var ret;\n      if (isTerminating(nextLink)) {\n        ret = new ApolloLink2(function(operation) {\n          return firstLink.request(operation, function(op) {\n            return nextLink.request(op) || Observable.of();\n          }) || Observable.of();\n        });\n      } else {\n        ret = new ApolloLink2(function(operation, forward) {\n          return firstLink.request(operation, function(op) {\n            return nextLink.request(op, forward) || Observable.of();\n          }) || Observable.of();\n        });\n      }\n      return Object.assign(ret, { left: firstLink, right: nextLink });\n    };\n    ApolloLink2.prototype.split = function(test, left, right) {\n      return this.concat(ApolloLink2.split(test, left, right || new ApolloLink2(passthrough)));\n    };\n    ApolloLink2.prototype.concat = function(next) {\n      return ApolloLink2.concat(this, next);\n    };\n    ApolloLink2.prototype.request = function(operation, forward) {\n      throw newInvariantError(36);\n    };\n    ApolloLink2.prototype.onError = function(error, observer) {\n      if (observer && observer.error) {\n        observer.error(error);\n        return false;\n      }\n      throw error;\n    };\n    ApolloLink2.prototype.setOnError = function(fn) {\n      this.onError = fn;\n      return this;\n    };\n    return ApolloLink2;\n  }()\n);\nexport { ApolloLink };\n",
      "start": 1710864567114,
      "end": 1710864567541,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1710864567542,
      "end": 1710864567542,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710864567542,
      "end": 1710864567542,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710864567542,
      "end": 1710864567542,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710864567542,
      "end": 1710864567542,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710864567542,
      "end": 1710864567542,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710864567542,
      "end": 1710864567542,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710864567542,
      "end": 1710864567542,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710864567542,
      "end": 1710864567542,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710864567542,
      "end": 1710864567542,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710864567542,
      "end": 1710864567542,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710864567542,
      "end": 1710864567542,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710864567542,
      "end": 1710864567542,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710864567542,
      "end": 1710864567542,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710864567542,
      "end": 1710864567542,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710864567542,
      "end": 1710864567542,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710864567542,
      "end": 1710864567542,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710864567542,
      "end": 1710864567542,
      "order": "normal"
    }
  ]
}
