{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@nuxtjs/apollo/node_modules/graphql/utilities/buildASTSchema.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { parse } from '../language/parser.mjs';\nimport { specifiedDirectives } from '../type/directives.mjs';\nimport { GraphQLSchema } from '../type/schema.mjs';\nimport { assertValidSDL } from '../validation/validate.mjs';\nimport { extendSchemaImpl } from './extendSchema.mjs';\n\n/**\n * This takes the ast of a schema document produced by the parse function in\n * src/language/parser.js.\n *\n * If no schema definition is provided, then it will look for types named Query,\n * Mutation and Subscription.\n *\n * Given that AST it constructs a GraphQLSchema. The resulting schema\n * has no resolve methods, so execution will use default resolvers.\n */\nexport function buildASTSchema(documentAST, options) {\n  (documentAST != null && documentAST.kind === Kind.DOCUMENT) ||\n    devAssert(false, 'Must provide valid Document AST.');\n\n  if (\n    (options === null || options === void 0 ? void 0 : options.assumeValid) !==\n      true &&\n    (options === null || options === void 0\n      ? void 0\n      : options.assumeValidSDL) !== true\n  ) {\n    assertValidSDL(documentAST);\n  }\n\n  const emptySchemaConfig = {\n    description: undefined,\n    types: [],\n    directives: [],\n    extensions: Object.create(null),\n    extensionASTNodes: [],\n    assumeValid: false,\n  };\n  const config = extendSchemaImpl(emptySchemaConfig, documentAST, options);\n\n  if (config.astNode == null) {\n    for (const type of config.types) {\n      switch (type.name) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        case 'Query':\n          // @ts-expect-error validated in `validateSchema`\n          config.query = type;\n          break;\n\n        case 'Mutation':\n          // @ts-expect-error validated in `validateSchema`\n          config.mutation = type;\n          break;\n\n        case 'Subscription':\n          // @ts-expect-error validated in `validateSchema`\n          config.subscription = type;\n          break;\n      }\n    }\n  }\n\n  const directives = [\n    ...config.directives, // If specified directives were not explicitly declared, add them.\n    ...specifiedDirectives.filter((stdDirective) =>\n      config.directives.every(\n        (directive) => directive.name !== stdDirective.name,\n      ),\n    ),\n  ];\n  return new GraphQLSchema({ ...config, directives });\n}\n/**\n * A helper function to build a GraphQLSchema directly from a source\n * document.\n */\n\nexport function buildSchema(source, options) {\n  const document = parse(source, {\n    noLocation:\n      options === null || options === void 0 ? void 0 : options.noLocation,\n    allowLegacyFragmentVariables:\n      options === null || options === void 0\n        ? void 0\n        : options.allowLegacyFragmentVariables,\n  });\n  return buildASTSchema(document, {\n    assumeValidSDL:\n      options === null || options === void 0 ? void 0 : options.assumeValidSDL,\n    assumeValid:\n      options === null || options === void 0 ? void 0 : options.assumeValid,\n  });\n}\n",
      "start": 1713304784058,
      "end": 1713304784067,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1713304784067,
      "end": 1713304784067,
      "order": "normal"
    }
  ]
}
