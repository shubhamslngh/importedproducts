{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@nuxtjs/apollo/node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n * See https://spec.graphql.org/draft/#sec-Directives-Are-In-Valid-Locations\n */\nexport function KnownArgumentNamesRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...KnownArgumentNamesOnDirectivesRule(context),\n\n    Argument(argNode) {\n      const argDef = context.getArgument();\n      const fieldDef = context.getFieldDef();\n      const parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        const argName = argNode.name.value;\n        const knownArgsNames = fieldDef.args.map((arg) => arg.name);\n        const suggestions = suggestionList(argName, knownArgsNames);\n        context.reportError(\n          new GraphQLError(\n            `Unknown argument \"${argName}\" on field \"${parentType.name}.${fieldDef.name}\".` +\n              didYouMean(suggestions),\n            {\n              nodes: argNode,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n/**\n * @internal\n */\n\nexport function KnownArgumentNamesOnDirectivesRule(context) {\n  const directiveArgs = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    directiveArgs[directive.name] = directive.args.map((arg) => arg.name);\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argsNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      directiveArgs[def.name.value] = argsNodes.map((arg) => arg.name.value);\n    }\n  }\n\n  return {\n    Directive(directiveNode) {\n      const directiveName = directiveNode.name.value;\n      const knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        for (const argNode of directiveNode.arguments) {\n          const argName = argNode.name.value;\n\n          if (!knownArgs.includes(argName)) {\n            const suggestions = suggestionList(argName, knownArgs);\n            context.reportError(\n              new GraphQLError(\n                `Unknown argument \"${argName}\" on directive \"@${directiveName}\".` +\n                  didYouMean(suggestions),\n                {\n                  nodes: argNode,\n                },\n              ),\n            );\n          }\n        }\n      }\n\n      return false;\n    },\n  };\n}\n",
      "start": 1710863481286,
      "end": 1710863481299,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710863481299,
      "end": 1710863481299,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710863481299,
      "end": 1710863481300,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710863481300,
      "end": 1710863481300,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710863481300,
      "end": 1710863481300,
      "order": "normal"
    }
  ]
}
