{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@nuxtjs/apollo/node_modules/graphql/error/GraphQLError.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n\nfunction toNormalizedOptions(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedOptions(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n",
      "start": 1710864567368,
      "end": 1710864567391,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710864567391,
      "end": 1710864567391,
      "order": "normal"
    }
  ]
}
