{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@nuxtjs/apollo/node_modules/graphql/utilities/astFromValue.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\nimport { GraphQLID } from '../type/scalars.mjs';\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using suggested GraphQLInputType. For example:\n *\n *     astFromValue(\"value\", GraphQLString)\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Unknown       | Enum Value           |\n * | null          | NullValue            |\n *\n */\n\nexport function astFromValue(value, type) {\n  if (isNonNullType(type)) {\n    const astValue = astFromValue(value, type.ofType);\n\n    if (\n      (astValue === null || astValue === void 0 ? void 0 : astValue.kind) ===\n      Kind.NULL\n    ) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n  if (value === null) {\n    return {\n      kind: Kind.NULL,\n    };\n  } // undefined\n\n  if (value === undefined) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (isIterableObject(value)) {\n      const valuesNodes = [];\n\n      for (const item of value) {\n        const itemNode = astFromValue(item, itemType);\n\n        if (itemNode != null) {\n          valuesNodes.push(itemNode);\n        }\n      }\n\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes,\n      };\n    }\n\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(value)) {\n      return null;\n    }\n\n    const fieldNodes = [];\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldValue = astFromValue(value[field.name], field.type);\n\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: Kind.OBJECT_FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: field.name,\n          },\n          value: fieldValue,\n        });\n      }\n    }\n\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes,\n    };\n  }\n\n  if (isLeafType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    const serialized = type.serialize(value);\n\n    if (serialized == null) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: Kind.BOOLEAN,\n        value: serialized,\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n    if (typeof serialized === 'number' && Number.isFinite(serialized)) {\n      const stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum)\n        ? {\n            kind: Kind.INT,\n            value: stringNum,\n          }\n        : {\n            kind: Kind.FLOAT,\n            value: stringNum,\n          };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return {\n          kind: Kind.ENUM,\n          value: serialized,\n        };\n      } // ID types can use Int literals.\n\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: Kind.INT,\n          value: serialized,\n        };\n      }\n\n      return {\n        kind: Kind.STRING,\n        value: serialized,\n      };\n    }\n\n    throw new TypeError(`Cannot convert value to AST: ${inspect(serialized)}.`);\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nconst integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;\n",
      "start": 1716304640030,
      "end": 1716304640088,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716304640088,
      "end": 1716304640088,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716304640088,
      "end": 1716304640089,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716304640089,
      "end": 1716304640089,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1716304640089,
      "end": 1716304640089,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1716304640089,
      "end": 1716304640089,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1716304640089,
      "end": 1716304640089,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1716304640089,
      "end": 1716304640089,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1716304640089,
      "end": 1716304640089,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1716304640089,
      "end": 1716304640089,
      "order": "normal"
    }
  ]
}
