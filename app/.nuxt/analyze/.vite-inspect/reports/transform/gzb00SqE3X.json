{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/graphql/utilities/buildASTSchema.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import devAssert from \"../jsutils/devAssert.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { parse } from \"../language/parser.mjs\";\nimport { assertValidSDL } from \"../validation/validate.mjs\";\nimport { GraphQLSchema } from \"../type/schema.mjs\";\nimport { specifiedDirectives } from \"../type/directives.mjs\";\nimport { extendSchemaImpl } from \"./extendSchema.mjs\";\n\n/**\n * This takes the ast of a schema document produced by the parse function in\n * src/language/parser.js.\n *\n * If no schema definition is provided, then it will look for types named Query\n * and Mutation.\n *\n * Given that AST it constructs a GraphQLSchema. The resulting schema\n * has no resolve methods, so execution will use default resolvers.\n *\n * Accepts options as a second argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\nexport function buildASTSchema(documentAST, options) {\n  documentAST != null && documentAST.kind === Kind.DOCUMENT || devAssert(0, 'Must provide valid Document AST.');\n\n  if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {\n    assertValidSDL(documentAST);\n  }\n\n  var emptySchemaConfig = {\n    description: undefined,\n    types: [],\n    directives: [],\n    extensions: undefined,\n    extensionASTNodes: [],\n    assumeValid: false\n  };\n  var config = extendSchemaImpl(emptySchemaConfig, documentAST, options);\n\n  if (config.astNode == null) {\n    for (var _i2 = 0, _config$types2 = config.types; _i2 < _config$types2.length; _i2++) {\n      var type = _config$types2[_i2];\n\n      switch (type.name) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        case 'Query':\n          config.query = type;\n          break;\n\n        case 'Mutation':\n          config.mutation = type;\n          break;\n\n        case 'Subscription':\n          config.subscription = type;\n          break;\n      }\n    }\n  }\n\n  var directives = config.directives; // If specified directives were not explicitly declared, add them.\n\n  var _loop = function _loop(_i4) {\n    var stdDirective = specifiedDirectives[_i4];\n\n    if (directives.every(function (directive) {\n      return directive.name !== stdDirective.name;\n    })) {\n      directives.push(stdDirective);\n    }\n  };\n\n  for (var _i4 = 0; _i4 < specifiedDirectives.length; _i4++) {\n    _loop(_i4);\n  }\n\n  return new GraphQLSchema(config);\n}\n/**\n * A helper function to build a GraphQLSchema directly from a source\n * document.\n */\n\nexport function buildSchema(source, options) {\n  var document = parse(source, {\n    noLocation: options === null || options === void 0 ? void 0 : options.noLocation,\n    allowLegacySDLEmptyFields: options === null || options === void 0 ? void 0 : options.allowLegacySDLEmptyFields,\n    allowLegacySDLImplementsInterfaces: options === null || options === void 0 ? void 0 : options.allowLegacySDLImplementsInterfaces,\n    experimentalFragmentVariables: options === null || options === void 0 ? void 0 : options.experimentalFragmentVariables\n  });\n  return buildASTSchema(document, {\n    commentDescriptions: options === null || options === void 0 ? void 0 : options.commentDescriptions,\n    assumeValidSDL: options === null || options === void 0 ? void 0 : options.assumeValidSDL,\n    assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid\n  });\n}\n",
      "start": 1716330189409,
      "end": 1716330189418,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1716330189418,
      "end": 1716330189418,
      "order": "normal"
    }
  ]
}
