{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { specifiedDirectives } from \"../../type/directives.mjs\";\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n */\nexport function KnownArgumentNamesRule(context) {\n  return _objectSpread(_objectSpread({}, KnownArgumentNamesOnDirectivesRule(context)), {}, {\n    Argument: function Argument(argNode) {\n      var argDef = context.getArgument();\n      var fieldDef = context.getFieldDef();\n      var parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        var argName = argNode.name.value;\n        var knownArgsNames = fieldDef.args.map(function (arg) {\n          return arg.name;\n        });\n        var suggestions = suggestionList(argName, knownArgsNames);\n        context.reportError(new GraphQLError(\"Unknown argument \\\"\".concat(argName, \"\\\" on field \\\"\").concat(parentType.name, \".\").concat(fieldDef.name, \"\\\".\") + didYouMean(suggestions), argNode));\n      }\n    }\n  });\n}\n/**\n * @internal\n */\n\nexport function KnownArgumentNamesOnDirectivesRule(context) {\n  var directiveArgs = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {\n    var directive = definedDirectives[_i2];\n    directiveArgs[directive.name] = directive.args.map(function (arg) {\n      return arg.name;\n    });\n  }\n\n  var astDefinitions = context.getDocument().definitions;\n\n  for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {\n    var def = astDefinitions[_i4];\n\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      var argsNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];\n      directiveArgs[def.name.value] = argsNodes.map(function (arg) {\n        return arg.name.value;\n      });\n    }\n  }\n\n  return {\n    Directive: function Directive(directiveNode) {\n      var directiveName = directiveNode.name.value;\n      var knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        for (var _i6 = 0, _directiveNode$argume2 = directiveNode.arguments; _i6 < _directiveNode$argume2.length; _i6++) {\n          var argNode = _directiveNode$argume2[_i6];\n          var argName = argNode.name.value;\n\n          if (knownArgs.indexOf(argName) === -1) {\n            var suggestions = suggestionList(argName, knownArgs);\n            context.reportError(new GraphQLError(\"Unknown argument \\\"\".concat(argName, \"\\\" on directive \\\"@\").concat(directiveName, \"\\\".\") + didYouMean(suggestions), argNode));\n          }\n        }\n      }\n\n      return false;\n    }\n  };\n}\n",
      "start": 1716304640137,
      "end": 1716304640158,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1716304640158,
      "end": 1716304640158,
      "order": "normal"
    }
  ]
}
