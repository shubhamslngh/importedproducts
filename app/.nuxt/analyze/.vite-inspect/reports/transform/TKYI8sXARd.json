{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@nuxtjs/apollo/node_modules/graphql/utilities/lexicographicSortSchema.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport {\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLUnionType,\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.mjs';\nimport { GraphQLDirective } from '../type/directives.mjs';\nimport { isIntrospectionType } from '../type/introspection.mjs';\nimport { GraphQLSchema } from '../type/schema.mjs';\n/**\n * Sort GraphQLSchema.\n *\n * This function returns a sorted copy of the given GraphQLSchema.\n */\n\nexport function lexicographicSortSchema(schema) {\n  const schemaConfig = schema.toConfig();\n  const typeMap = keyValMap(\n    sortByName(schemaConfig.types),\n    (type) => type.name,\n    sortNamedType,\n  );\n  return new GraphQLSchema({\n    ...schemaConfig,\n    types: Object.values(typeMap),\n    directives: sortByName(schemaConfig.directives).map(sortDirective),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription),\n  });\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // @ts-expect-error\n      return new GraphQLList(replaceType(type.ofType));\n    } else if (isNonNullType(type)) {\n      // @ts-expect-error\n      return new GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME: TS Conversion\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    return typeMap[type.name];\n  }\n\n  function replaceMaybeType(maybeType) {\n    return maybeType && replaceNamedType(maybeType);\n  }\n\n  function sortDirective(directive) {\n    const config = directive.toConfig();\n    return new GraphQLDirective({\n      ...config,\n      locations: sortBy(config.locations, (x) => x),\n      args: sortArgs(config.args),\n    });\n  }\n\n  function sortArgs(args) {\n    return sortObjMap(args, (arg) => ({ ...arg, type: replaceType(arg.type) }));\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && sortArgs(field.args),\n    }));\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n    }));\n  }\n\n  function sortTypes(array) {\n    return sortByName(array).map(replaceNamedType);\n  }\n\n  function sortNamedType(type) {\n    if (isScalarType(type) || isIntrospectionType(type)) {\n      return type;\n    }\n\n    if (isObjectType(type)) {\n      const config = type.toConfig();\n      return new GraphQLObjectType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n\n    if (isInterfaceType(type)) {\n      const config = type.toConfig();\n      return new GraphQLInterfaceType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n\n    if (isUnionType(type)) {\n      const config = type.toConfig();\n      return new GraphQLUnionType({\n        ...config,\n        types: () => sortTypes(config.types),\n      });\n    }\n\n    if (isEnumType(type)) {\n      const config = type.toConfig();\n      return new GraphQLEnumType({\n        ...config,\n        values: sortObjMap(config.values, (value) => value),\n      });\n    }\n\n    if (isInputObjectType(type)) {\n      const config = type.toConfig();\n      return new GraphQLInputObjectType({\n        ...config,\n        fields: () => sortInputFields(config.fields),\n      });\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible types have been considered.\n\n    false || invariant(false, 'Unexpected type: ' + inspect(type));\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  const sortedMap = Object.create(null);\n\n  for (const key of Object.keys(map).sort(naturalCompare)) {\n    sortedMap[key] = sortValueFn(map[key]);\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, (obj) => obj.name);\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort((obj1, obj2) => {\n    const key1 = mapToKey(obj1);\n    const key2 = mapToKey(obj2);\n    return naturalCompare(key1, key2);\n  });\n}\n",
      "start": 1716330189472,
      "end": 1716330189480,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1716330189480,
      "end": 1716330189480,
      "order": "normal"
    }
  ]
}
