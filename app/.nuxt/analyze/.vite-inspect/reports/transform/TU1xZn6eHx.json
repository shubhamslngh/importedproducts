{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@nuxtjs/apollo/node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n} from '../../type/definition.mjs';\n\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\nexport function UniqueFieldDefinitionNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness,\n  };\n\n  function checkFieldUniqueness(node) {\n    var _node$fields;\n\n    const typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_node$fields = node.fields) !== null && _node$fields !== void 0\n        ? _node$fields\n        : [];\n    const fieldNames = knownFieldNames[typeName];\n\n    for (const fieldDef of fieldNodes) {\n      const fieldName = fieldDef.name.value;\n\n      if (hasField(existingTypeMap[typeName], fieldName)) {\n        context.reportError(\n          new GraphQLError(\n            `Field \"${typeName}.${fieldName}\" already exists in the schema. It cannot also be defined in this type extension.`,\n            {\n              nodes: fieldDef.name,\n            },\n          ),\n        );\n      } else if (fieldNames[fieldName]) {\n        context.reportError(\n          new GraphQLError(\n            `Field \"${typeName}.${fieldName}\" can only be defined once.`,\n            {\n              nodes: [fieldNames[fieldName], fieldDef.name],\n            },\n          ),\n        );\n      } else {\n        fieldNames[fieldName] = fieldDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName] != null;\n  }\n\n  return false;\n}\n",
      "start": 1716304640017,
      "end": 1716304640033,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    }
  ]
}
