{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@nuxtjs/apollo/node_modules/graphql/type/directives.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { DirectiveLocation } from '../language/directiveLocation.mjs';\nimport { assertName } from './assertName.mjs';\nimport {\n  argsToArgsConfig,\n  defineArguments,\n  GraphQLNonNull,\n} from './definition.mjs';\nimport { GraphQLBoolean, GraphQLString } from './scalars.mjs';\n/**\n * Test if the given value is a GraphQL directive.\n */\n\nexport function isDirective(directive) {\n  return instanceOf(directive, GraphQLDirective);\n}\nexport function assertDirective(directive) {\n  if (!isDirective(directive)) {\n    throw new Error(\n      `Expected ${inspect(directive)} to be a GraphQL directive.`,\n    );\n  }\n\n  return directive;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Directives are used by the GraphQL runtime as a way of modifying execution\n * behavior. Type system creators will usually not create these directly.\n */\nexport class GraphQLDirective {\n  constructor(config) {\n    var _config$isRepeatable, _config$args;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.locations = config.locations;\n    this.isRepeatable =\n      (_config$isRepeatable = config.isRepeatable) !== null &&\n      _config$isRepeatable !== void 0\n        ? _config$isRepeatable\n        : false;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    Array.isArray(config.locations) ||\n      devAssert(false, `@${config.name} locations must be an Array.`);\n    const args =\n      (_config$args = config.args) !== null && _config$args !== void 0\n        ? _config$args\n        : {};\n    (isObjectLike(args) && !Array.isArray(args)) ||\n      devAssert(\n        false,\n        `@${config.name} args must be an object with argument names as keys.`,\n      );\n    this.args = defineArguments(args);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLDirective';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      locations: this.locations,\n      args: argsToArgsConfig(this.args),\n      isRepeatable: this.isRepeatable,\n      extensions: this.extensions,\n      astNode: this.astNode,\n    };\n  }\n\n  toString() {\n    return '@' + this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Used to conditionally include fields or fragments.\n */\nexport const GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description:\n    'Directs the executor to include this field or fragment only when the `if` argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Included when true.',\n    },\n  },\n});\n/**\n * Used to conditionally skip (exclude) fields or fragments.\n */\n\nexport const GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description:\n    'Directs the executor to skip this field or fragment when the `if` argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Skipped when true.',\n    },\n  },\n});\n/**\n * Constant string used for default reason for a deprecation.\n */\n\nexport const DEFAULT_DEPRECATION_REASON = 'No longer supported';\n/**\n * Used to declare element of a GraphQL schema as deprecated.\n */\n\nexport const GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [\n    DirectiveLocation.FIELD_DEFINITION,\n    DirectiveLocation.ARGUMENT_DEFINITION,\n    DirectiveLocation.INPUT_FIELD_DEFINITION,\n    DirectiveLocation.ENUM_VALUE,\n  ],\n  args: {\n    reason: {\n      type: GraphQLString,\n      description:\n        'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON,\n    },\n  },\n});\n/**\n * Used to provide a URL for specifying the behavior of custom scalar definitions.\n */\n\nexport const GraphQLSpecifiedByDirective = new GraphQLDirective({\n  name: 'specifiedBy',\n  description: 'Exposes a URL that specifies the behavior of this scalar.',\n  locations: [DirectiveLocation.SCALAR],\n  args: {\n    url: {\n      type: new GraphQLNonNull(GraphQLString),\n      description: 'The URL that specifies the behavior of this scalar.',\n    },\n  },\n});\n/**\n * The full list of specified directives.\n */\n\nexport const specifiedDirectives = Object.freeze([\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n  GraphQLSpecifiedByDirective,\n]);\nexport function isSpecifiedDirective(directive) {\n  return specifiedDirectives.some(({ name }) => name === directive.name);\n}\n",
      "start": 1710864567354,
      "end": 1710864567370,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710864567370,
      "end": 1710864567370,
      "order": "normal"
    }
  ]
}
