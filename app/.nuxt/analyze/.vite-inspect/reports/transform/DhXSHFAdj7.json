{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/graphql/execution/values.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import find from \"../polyfills/find.mjs\";\nimport keyMap from \"../jsutils/keyMap.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport printPathArray from \"../jsutils/printPathArray.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { print } from \"../language/printer.mjs\";\nimport { isInputType, isNonNullType } from \"../type/definition.mjs\";\nimport { typeFromAST } from \"../utilities/typeFromAST.mjs\";\nimport { valueFromAST } from \"../utilities/valueFromAST.mjs\";\nimport { coerceInputValue } from \"../utilities/coerceInputValue.mjs\";\n\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n *\n * @internal\n */\nexport function getVariableValues(schema, varDefNodes, inputs, options) {\n  var errors = [];\n  var maxErrors = options === null || options === void 0 ? void 0 : options.maxErrors;\n\n  try {\n    var coerced = coerceVariableValues(schema, varDefNodes, inputs, function (error) {\n      if (maxErrors != null && errors.length >= maxErrors) {\n        throw new GraphQLError('Too many errors processing variables, error limit reached. Execution aborted.');\n      }\n\n      errors.push(error);\n    });\n\n    if (errors.length === 0) {\n      return {\n        coerced: coerced\n      };\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n\n  return {\n    errors: errors\n  };\n}\n\nfunction coerceVariableValues(schema, varDefNodes, inputs, onError) {\n  var coercedValues = {};\n\n  var _loop = function _loop(_i2) {\n    var varDefNode = varDefNodes[_i2];\n    var varName = varDefNode.variable.name.value;\n    var varType = typeFromAST(schema, varDefNode.type);\n\n    if (!isInputType(varType)) {\n      // Must use input types for variables. This should be caught during\n      // validation, however is checked again here for safety.\n      var varTypeStr = print(varDefNode.type);\n      onError(new GraphQLError(\"Variable \\\"$\".concat(varName, \"\\\" expected value of type \\\"\").concat(varTypeStr, \"\\\" which cannot be used as an input type.\"), varDefNode.type));\n      return \"continue\";\n    }\n\n    if (!hasOwnProperty(inputs, varName)) {\n      if (varDefNode.defaultValue) {\n        coercedValues[varName] = valueFromAST(varDefNode.defaultValue, varType);\n      } else if (isNonNullType(varType)) {\n        var _varTypeStr = inspect(varType);\n\n        onError(new GraphQLError(\"Variable \\\"$\".concat(varName, \"\\\" of required type \\\"\").concat(_varTypeStr, \"\\\" was not provided.\"), varDefNode));\n      }\n\n      return \"continue\";\n    }\n\n    var value = inputs[varName];\n\n    if (value === null && isNonNullType(varType)) {\n      var _varTypeStr2 = inspect(varType);\n\n      onError(new GraphQLError(\"Variable \\\"$\".concat(varName, \"\\\" of non-null type \\\"\").concat(_varTypeStr2, \"\\\" must not be null.\"), varDefNode));\n      return \"continue\";\n    }\n\n    coercedValues[varName] = coerceInputValue(value, varType, function (path, invalidValue, error) {\n      var prefix = \"Variable \\\"$\".concat(varName, \"\\\" got invalid value \") + inspect(invalidValue);\n\n      if (path.length > 0) {\n        prefix += \" at \\\"\".concat(varName).concat(printPathArray(path), \"\\\"\");\n      }\n\n      onError(new GraphQLError(prefix + '; ' + error.message, varDefNode, undefined, undefined, undefined, error.originalError));\n    });\n  };\n\n  for (var _i2 = 0; _i2 < varDefNodes.length; _i2++) {\n    var _ret = _loop(_i2);\n\n    if (_ret === \"continue\") continue;\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n *\n * @internal\n */\n\n\nexport function getArgumentValues(def, node, variableValues) {\n  var _node$arguments;\n\n  var coercedValues = {}; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n  var argumentNodes = (_node$arguments = node.arguments) !== null && _node$arguments !== void 0 ? _node$arguments : [];\n  var argNodeMap = keyMap(argumentNodes, function (arg) {\n    return arg.name.value;\n  });\n\n  for (var _i4 = 0, _def$args2 = def.args; _i4 < _def$args2.length; _i4++) {\n    var argDef = _def$args2[_i4];\n    var name = argDef.name;\n    var argType = argDef.type;\n    var argumentNode = argNodeMap[name];\n\n    if (!argumentNode) {\n      if (argDef.defaultValue !== undefined) {\n        coercedValues[name] = argDef.defaultValue;\n      } else if (isNonNullType(argType)) {\n        throw new GraphQLError(\"Argument \\\"\".concat(name, \"\\\" of required type \\\"\").concat(inspect(argType), \"\\\" \") + 'was not provided.', node);\n      }\n\n      continue;\n    }\n\n    var valueNode = argumentNode.value;\n    var isNull = valueNode.kind === Kind.NULL;\n\n    if (valueNode.kind === Kind.VARIABLE) {\n      var variableName = valueNode.name.value;\n\n      if (variableValues == null || !hasOwnProperty(variableValues, variableName)) {\n        if (argDef.defaultValue !== undefined) {\n          coercedValues[name] = argDef.defaultValue;\n        } else if (isNonNullType(argType)) {\n          throw new GraphQLError(\"Argument \\\"\".concat(name, \"\\\" of required type \\\"\").concat(inspect(argType), \"\\\" \") + \"was provided the variable \\\"$\".concat(variableName, \"\\\" which was not provided a runtime value.\"), valueNode);\n        }\n\n        continue;\n      }\n\n      isNull = variableValues[variableName] == null;\n    }\n\n    if (isNull && isNonNullType(argType)) {\n      throw new GraphQLError(\"Argument \\\"\".concat(name, \"\\\" of non-null type \\\"\").concat(inspect(argType), \"\\\" \") + 'must not be null.', valueNode);\n    }\n\n    var coercedValue = valueFromAST(valueNode, argType, variableValues);\n\n    if (coercedValue === undefined) {\n      // Note: ValuesOfCorrectTypeRule validation should catch this before\n      // execution. This is a runtime check to ensure execution does not\n      // continue with an invalid argument value.\n      throw new GraphQLError(\"Argument \\\"\".concat(name, \"\\\" has invalid value \").concat(print(valueNode), \".\"), valueNode);\n    }\n\n    coercedValues[name] = coercedValue;\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getDirectiveValues(directiveDef, node, variableValues) {\n  var directiveNode = node.directives && find(node.directives, function (directive) {\n    return directive.name.value === directiveDef.name;\n  });\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n",
      "start": 1712968594988,
      "end": 1712968595014,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712968595014,
      "end": 1712968595014,
      "order": "normal"
    }
  ]
}
