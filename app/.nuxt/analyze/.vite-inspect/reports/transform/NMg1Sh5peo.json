{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@nuxtjs/apollo/node_modules/graphql/execution/collectFields.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Kind } from '../language/kinds.mjs';\nimport { isAbstractType } from '../type/definition.mjs';\nimport {\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n} from '../type/directives.mjs';\nimport { typeFromAST } from '../utilities/typeFromAST.mjs';\nimport { getDirectiveValues } from './values.mjs';\n/**\n * Given a selectionSet, collects all of the fields and returns them.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field that\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * object type returned by that field.\n *\n * @internal\n */\n\nexport function collectFields(\n  schema,\n  fragments,\n  variableValues,\n  runtimeType,\n  selectionSet,\n) {\n  const fields = new Map();\n  collectFieldsImpl(\n    schema,\n    fragments,\n    variableValues,\n    runtimeType,\n    selectionSet,\n    fields,\n    new Set(),\n  );\n  return fields;\n}\n/**\n * Given an array of field nodes, collects all of the subfields of the passed\n * in fields, and returns them at the end.\n *\n * CollectSubFields requires the \"return type\" of an object. For a field that\n * returns an Interface or Union type, the \"return type\" will be the actual\n * object type returned by that field.\n *\n * @internal\n */\n\nexport function collectSubfields(\n  schema,\n  fragments,\n  variableValues,\n  returnType,\n  fieldNodes,\n) {\n  const subFieldNodes = new Map();\n  const visitedFragmentNames = new Set();\n\n  for (const node of fieldNodes) {\n    if (node.selectionSet) {\n      collectFieldsImpl(\n        schema,\n        fragments,\n        variableValues,\n        returnType,\n        node.selectionSet,\n        subFieldNodes,\n        visitedFragmentNames,\n      );\n    }\n  }\n\n  return subFieldNodes;\n}\n\nfunction collectFieldsImpl(\n  schema,\n  fragments,\n  variableValues,\n  runtimeType,\n  selectionSet,\n  fields,\n  visitedFragmentNames,\n) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case Kind.FIELD: {\n        if (!shouldIncludeNode(variableValues, selection)) {\n          continue;\n        }\n\n        const name = getFieldEntryKey(selection);\n        const fieldList = fields.get(name);\n\n        if (fieldList !== undefined) {\n          fieldList.push(selection);\n        } else {\n          fields.set(name, [selection]);\n        }\n\n        break;\n      }\n\n      case Kind.INLINE_FRAGMENT: {\n        if (\n          !shouldIncludeNode(variableValues, selection) ||\n          !doesFragmentConditionMatch(schema, selection, runtimeType)\n        ) {\n          continue;\n        }\n\n        collectFieldsImpl(\n          schema,\n          fragments,\n          variableValues,\n          runtimeType,\n          selection.selectionSet,\n          fields,\n          visitedFragmentNames,\n        );\n        break;\n      }\n\n      case Kind.FRAGMENT_SPREAD: {\n        const fragName = selection.name.value;\n\n        if (\n          visitedFragmentNames.has(fragName) ||\n          !shouldIncludeNode(variableValues, selection)\n        ) {\n          continue;\n        }\n\n        visitedFragmentNames.add(fragName);\n        const fragment = fragments[fragName];\n\n        if (\n          !fragment ||\n          !doesFragmentConditionMatch(schema, fragment, runtimeType)\n        ) {\n          continue;\n        }\n\n        collectFieldsImpl(\n          schema,\n          fragments,\n          variableValues,\n          runtimeType,\n          fragment.selectionSet,\n          fields,\n          visitedFragmentNames,\n        );\n        break;\n      }\n    }\n  }\n}\n/**\n * Determines if a field should be included based on the `@include` and `@skip`\n * directives, where `@skip` has higher precedence than `@include`.\n */\n\nfunction shouldIncludeNode(variableValues, node) {\n  const skip = getDirectiveValues(GraphQLSkipDirective, node, variableValues);\n\n  if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {\n    return false;\n  }\n\n  const include = getDirectiveValues(\n    GraphQLIncludeDirective,\n    node,\n    variableValues,\n  );\n\n  if (\n    (include === null || include === void 0 ? void 0 : include.if) === false\n  ) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\nfunction doesFragmentConditionMatch(schema, fragment, type) {\n  const typeConditionNode = fragment.typeCondition;\n\n  if (!typeConditionNode) {\n    return true;\n  }\n\n  const conditionalType = typeFromAST(schema, typeConditionNode);\n\n  if (conditionalType === type) {\n    return true;\n  }\n\n  if (isAbstractType(conditionalType)) {\n    return schema.isSubType(conditionalType, type);\n  }\n\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n",
      "start": 1710864567485,
      "end": 1710864567494,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710864567494,
      "end": 1710864567494,
      "order": "normal"
    }
  ]
}
