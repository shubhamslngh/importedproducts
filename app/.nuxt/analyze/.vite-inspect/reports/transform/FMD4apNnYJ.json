{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import arrayFrom from \"../../polyfills/arrayFrom.mjs\";\nimport didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport naturalCompare from \"../../jsutils/naturalCompare.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isObjectType, isInterfaceType, isAbstractType } from \"../../type/definition.mjs\";\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n */\nexport function FieldsOnCorrectTypeRule(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getParentType();\n\n      if (type) {\n        var fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          var schema = context.getSchema();\n          var fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          var suggestion = didYouMean('to use an inline fragment on', getSuggestedTypeNames(schema, type, fieldName)); // If there are no suggested types, then perhaps this was a typo?\n\n          if (suggestion === '') {\n            suggestion = didYouMean(getSuggestedFieldNames(type, fieldName));\n          } // Report an error, including helpful suggestions.\n\n\n          context.reportError(new GraphQLError(\"Cannot query field \\\"\".concat(fieldName, \"\\\" on type \\\"\").concat(type.name, \"\\\".\") + suggestion, node));\n        }\n      }\n    }\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest them,\n * sorted by how often the type is referenced.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (!isAbstractType(type)) {\n    // Must be an Object type, which does not have possible fields.\n    return [];\n  }\n\n  var suggestedTypes = new Set();\n  var usageCount = Object.create(null);\n\n  for (var _i2 = 0, _schema$getPossibleTy2 = schema.getPossibleTypes(type); _i2 < _schema$getPossibleTy2.length; _i2++) {\n    var possibleType = _schema$getPossibleTy2[_i2];\n\n    if (!possibleType.getFields()[fieldName]) {\n      continue;\n    } // This object type defines this field.\n\n\n    suggestedTypes.add(possibleType);\n    usageCount[possibleType.name] = 1;\n\n    for (var _i4 = 0, _possibleType$getInte2 = possibleType.getInterfaces(); _i4 < _possibleType$getInte2.length; _i4++) {\n      var _usageCount$possibleI;\n\n      var possibleInterface = _possibleType$getInte2[_i4];\n\n      if (!possibleInterface.getFields()[fieldName]) {\n        continue;\n      } // This interface type defines this field.\n\n\n      suggestedTypes.add(possibleInterface);\n      usageCount[possibleInterface.name] = ((_usageCount$possibleI = usageCount[possibleInterface.name]) !== null && _usageCount$possibleI !== void 0 ? _usageCount$possibleI : 0) + 1;\n    }\n  }\n\n  return arrayFrom(suggestedTypes).sort(function (typeA, typeB) {\n    // Suggest both interface and object types based on how common they are.\n    var usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];\n\n    if (usageCountDiff !== 0) {\n      return usageCountDiff;\n    } // Suggest super types first followed by subtypes\n\n\n    if (isInterfaceType(typeA) && schema.isSubType(typeA, typeB)) {\n      return -1;\n    }\n\n    if (isInterfaceType(typeB) && schema.isSubType(typeB, typeA)) {\n      return 1;\n    }\n\n    return naturalCompare(typeA.name, typeB.name);\n  }).map(function (x) {\n    return x.name;\n  });\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\n\nfunction getSuggestedFieldNames(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type)) {\n    var possibleFieldNames = Object.keys(type.getFields());\n    return suggestionList(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n\n  return [];\n}\n",
      "start": 1746507067840,
      "end": 1746507067862,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746507067862,
      "end": 1746507067862,
      "order": "normal"
    }
  ]
}
