{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@nuxtjs/apollo/node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isTypeDefinitionNode } from '../../language/predicates.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../../type/definition.mjs';\n\n/**\n * Possible type extension\n *\n * A type extension is only valid if the type is defined and has the same kind.\n */\nexport function PossibleTypeExtensionsRule(context) {\n  const schema = context.getSchema();\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = def;\n    }\n  }\n\n  return {\n    ScalarTypeExtension: checkExtension,\n    ObjectTypeExtension: checkExtension,\n    InterfaceTypeExtension: checkExtension,\n    UnionTypeExtension: checkExtension,\n    EnumTypeExtension: checkExtension,\n    InputObjectTypeExtension: checkExtension,\n  };\n\n  function checkExtension(node) {\n    const typeName = node.name.value;\n    const defNode = definedTypes[typeName];\n    const existingType =\n      schema === null || schema === void 0 ? void 0 : schema.getType(typeName);\n    let expectedKind;\n\n    if (defNode) {\n      expectedKind = defKindToExtKind[defNode.kind];\n    } else if (existingType) {\n      expectedKind = typeToExtKind(existingType);\n    }\n\n    if (expectedKind) {\n      if (expectedKind !== node.kind) {\n        const kindStr = extensionKindToTypeName(node.kind);\n        context.reportError(\n          new GraphQLError(`Cannot extend non-${kindStr} type \"${typeName}\".`, {\n            nodes: defNode ? [defNode, node] : node,\n          }),\n        );\n      }\n    } else {\n      const allTypeNames = Object.keys({\n        ...definedTypes,\n        ...(schema === null || schema === void 0\n          ? void 0\n          : schema.getTypeMap()),\n      });\n      const suggestedTypes = suggestionList(typeName, allTypeNames);\n      context.reportError(\n        new GraphQLError(\n          `Cannot extend type \"${typeName}\" because it is not defined.` +\n            didYouMean(suggestedTypes),\n          {\n            nodes: node.name,\n          },\n        ),\n      );\n    }\n  }\n}\nconst defKindToExtKind = {\n  [Kind.SCALAR_TYPE_DEFINITION]: Kind.SCALAR_TYPE_EXTENSION,\n  [Kind.OBJECT_TYPE_DEFINITION]: Kind.OBJECT_TYPE_EXTENSION,\n  [Kind.INTERFACE_TYPE_DEFINITION]: Kind.INTERFACE_TYPE_EXTENSION,\n  [Kind.UNION_TYPE_DEFINITION]: Kind.UNION_TYPE_EXTENSION,\n  [Kind.ENUM_TYPE_DEFINITION]: Kind.ENUM_TYPE_EXTENSION,\n  [Kind.INPUT_OBJECT_TYPE_DEFINITION]: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n};\n\nfunction typeToExtKind(type) {\n  if (isScalarType(type)) {\n    return Kind.SCALAR_TYPE_EXTENSION;\n  }\n\n  if (isObjectType(type)) {\n    return Kind.OBJECT_TYPE_EXTENSION;\n  }\n\n  if (isInterfaceType(type)) {\n    return Kind.INTERFACE_TYPE_EXTENSION;\n  }\n\n  if (isUnionType(type)) {\n    return Kind.UNION_TYPE_EXTENSION;\n  }\n\n  if (isEnumType(type)) {\n    return Kind.ENUM_TYPE_EXTENSION;\n  }\n\n  if (isInputObjectType(type)) {\n    return Kind.INPUT_OBJECT_TYPE_EXTENSION;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable. All possible types have been considered\n\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction extensionKindToTypeName(kind) {\n  switch (kind) {\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return 'scalar';\n\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return 'object';\n\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return 'interface';\n\n    case Kind.UNION_TYPE_EXTENSION:\n      return 'union';\n\n    case Kind.ENUM_TYPE_EXTENSION:\n      return 'enum';\n\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return 'input object';\n    // Not reachable. All possible types have been considered\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(kind));\n  }\n}\n",
      "start": 1710863481308,
      "end": 1710863481318,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710863481318,
      "end": 1710863481318,
      "order": "normal"
    }
  ]
}
