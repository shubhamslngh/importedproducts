{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@nuxtjs/apollo/node_modules/graphql/validation/ValidationContext.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Kind } from '../language/kinds.mjs';\nimport { visit } from '../language/visitor.mjs';\nimport { TypeInfo, visitWithTypeInfo } from '../utilities/TypeInfo.mjs';\n\n/**\n * An instance of this class is passed as the \"this\" context to all validators,\n * allowing access to commonly useful contextual information from within a\n * validation rule.\n */\nexport class ASTValidationContext {\n  constructor(ast, onError) {\n    this._ast = ast;\n    this._fragments = undefined;\n    this._fragmentSpreads = new Map();\n    this._recursivelyReferencedFragments = new Map();\n    this._onError = onError;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ASTValidationContext';\n  }\n\n  reportError(error) {\n    this._onError(error);\n  }\n\n  getDocument() {\n    return this._ast;\n  }\n\n  getFragment(name) {\n    let fragments;\n\n    if (this._fragments) {\n      fragments = this._fragments;\n    } else {\n      fragments = Object.create(null);\n\n      for (const defNode of this.getDocument().definitions) {\n        if (defNode.kind === Kind.FRAGMENT_DEFINITION) {\n          fragments[defNode.name.value] = defNode;\n        }\n      }\n\n      this._fragments = fragments;\n    }\n\n    return fragments[name];\n  }\n\n  getFragmentSpreads(node) {\n    let spreads = this._fragmentSpreads.get(node);\n\n    if (!spreads) {\n      spreads = [];\n      const setsToVisit = [node];\n      let set;\n\n      while ((set = setsToVisit.pop())) {\n        for (const selection of set.selections) {\n          if (selection.kind === Kind.FRAGMENT_SPREAD) {\n            spreads.push(selection);\n          } else if (selection.selectionSet) {\n            setsToVisit.push(selection.selectionSet);\n          }\n        }\n      }\n\n      this._fragmentSpreads.set(node, spreads);\n    }\n\n    return spreads;\n  }\n\n  getRecursivelyReferencedFragments(operation) {\n    let fragments = this._recursivelyReferencedFragments.get(operation);\n\n    if (!fragments) {\n      fragments = [];\n      const collectedNames = Object.create(null);\n      const nodesToVisit = [operation.selectionSet];\n      let node;\n\n      while ((node = nodesToVisit.pop())) {\n        for (const spread of this.getFragmentSpreads(node)) {\n          const fragName = spread.name.value;\n\n          if (collectedNames[fragName] !== true) {\n            collectedNames[fragName] = true;\n            const fragment = this.getFragment(fragName);\n\n            if (fragment) {\n              fragments.push(fragment);\n              nodesToVisit.push(fragment.selectionSet);\n            }\n          }\n        }\n      }\n\n      this._recursivelyReferencedFragments.set(operation, fragments);\n    }\n\n    return fragments;\n  }\n}\nexport class SDLValidationContext extends ASTValidationContext {\n  constructor(ast, schema, onError) {\n    super(ast, onError);\n    this._schema = schema;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'SDLValidationContext';\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n}\nexport class ValidationContext extends ASTValidationContext {\n  constructor(schema, ast, typeInfo, onError) {\n    super(ast, onError);\n    this._schema = schema;\n    this._typeInfo = typeInfo;\n    this._variableUsages = new Map();\n    this._recursiveVariableUsages = new Map();\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ValidationContext';\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n\n  getVariableUsages(node) {\n    let usages = this._variableUsages.get(node);\n\n    if (!usages) {\n      const newUsages = [];\n      const typeInfo = new TypeInfo(this._schema);\n      visit(\n        node,\n        visitWithTypeInfo(typeInfo, {\n          VariableDefinition: () => false,\n\n          Variable(variable) {\n            newUsages.push({\n              node: variable,\n              type: typeInfo.getInputType(),\n              defaultValue: typeInfo.getDefaultValue(),\n            });\n          },\n        }),\n      );\n      usages = newUsages;\n\n      this._variableUsages.set(node, usages);\n    }\n\n    return usages;\n  }\n\n  getRecursiveVariableUsages(operation) {\n    let usages = this._recursiveVariableUsages.get(operation);\n\n    if (!usages) {\n      usages = this.getVariableUsages(operation);\n\n      for (const frag of this.getRecursivelyReferencedFragments(operation)) {\n        usages = usages.concat(this.getVariableUsages(frag));\n      }\n\n      this._recursiveVariableUsages.set(operation, usages);\n    }\n\n    return usages;\n  }\n\n  getType() {\n    return this._typeInfo.getType();\n  }\n\n  getParentType() {\n    return this._typeInfo.getParentType();\n  }\n\n  getInputType() {\n    return this._typeInfo.getInputType();\n  }\n\n  getParentInputType() {\n    return this._typeInfo.getParentInputType();\n  }\n\n  getFieldDef() {\n    return this._typeInfo.getFieldDef();\n  }\n\n  getDirective() {\n    return this._typeInfo.getDirective();\n  }\n\n  getArgument() {\n    return this._typeInfo.getArgument();\n  }\n\n  getEnumValue() {\n    return this._typeInfo.getEnumValue();\n  }\n}\n",
      "start": 1713269986324,
      "end": 1713269986337,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1713269986337,
      "end": 1713269986337,
      "order": "normal"
    }
  ]
}
