{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { isTypeDefinitionNode, isTypeExtensionNode } from \"../../language/predicates.mjs\";\nimport { specifiedDirectives } from \"../../type/directives.mjs\";\n\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all non-repeatable directives at\n * a given location are uniquely named.\n */\nexport function UniqueDirectivesPerLocationRule(context) {\n  var uniqueDirectiveMap = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {\n    var directive = definedDirectives[_i2];\n    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;\n  }\n\n  var astDefinitions = context.getDocument().definitions;\n\n  for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {\n    var def = astDefinitions[_i4];\n\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      uniqueDirectiveMap[def.name.value] = !def.repeatable;\n    }\n  }\n\n  var schemaDirectives = Object.create(null);\n  var typeDirectivesMap = Object.create(null);\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter: function enter(node) {\n      if (node.directives == null) {\n        return;\n      }\n\n      var seenDirectives;\n\n      if (node.kind === Kind.SCHEMA_DEFINITION || node.kind === Kind.SCHEMA_EXTENSION) {\n        seenDirectives = schemaDirectives;\n      } else if (isTypeDefinitionNode(node) || isTypeExtensionNode(node)) {\n        var typeName = node.name.value;\n        seenDirectives = typeDirectivesMap[typeName];\n\n        if (seenDirectives === undefined) {\n          typeDirectivesMap[typeName] = seenDirectives = Object.create(null);\n        }\n      } else {\n        seenDirectives = Object.create(null);\n      }\n\n      for (var _i6 = 0, _node$directives2 = node.directives; _i6 < _node$directives2.length; _i6++) {\n        var _directive = _node$directives2[_i6];\n        var directiveName = _directive.name.value;\n\n        if (uniqueDirectiveMap[directiveName]) {\n          if (seenDirectives[directiveName]) {\n            context.reportError(new GraphQLError(\"The directive \\\"@\".concat(directiveName, \"\\\" can only be used once at this location.\"), [seenDirectives[directiveName], _directive]));\n          } else {\n            seenDirectives[directiveName] = _directive;\n          }\n        }\n      }\n    }\n  };\n}\n",
      "start": 1710864567314,
      "end": 1710864567339,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710864567339,
      "end": 1710864567339,
      "order": "normal"
    }
  ]
}
