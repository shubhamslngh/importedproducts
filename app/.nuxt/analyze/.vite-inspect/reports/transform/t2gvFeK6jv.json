{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/graphql-ws/lib/common.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n *\n * common\n *\n */\nimport { areGraphQLErrors, extendedTypeof, isObject } from './utils.mjs';\n/**\n * The WebSocket sub-protocol used for the [GraphQL over WebSocket Protocol](https://github.com/graphql/graphql-over-http/blob/main/rfcs/GraphQLOverWebSocket.md).\n *\n * @category Common\n */\nexport const GRAPHQL_TRANSPORT_WS_PROTOCOL = 'graphql-transport-ws';\n/**\n * The deprecated subprotocol used by [subscriptions-transport-ws](https://github.com/apollographql/subscriptions-transport-ws).\n *\n * @private\n */\nexport const DEPRECATED_GRAPHQL_WS_PROTOCOL = 'graphql-ws';\n/**\n * `graphql-ws` expected and standard close codes of the [GraphQL over WebSocket Protocol](https://github.com/graphql/graphql-over-http/blob/main/rfcs/GraphQLOverWebSocket.md).\n *\n * @category Common\n */\nexport var CloseCode;\n(function (CloseCode) {\n    CloseCode[CloseCode[\"InternalServerError\"] = 4500] = \"InternalServerError\";\n    CloseCode[CloseCode[\"InternalClientError\"] = 4005] = \"InternalClientError\";\n    CloseCode[CloseCode[\"BadRequest\"] = 4400] = \"BadRequest\";\n    CloseCode[CloseCode[\"BadResponse\"] = 4004] = \"BadResponse\";\n    /** Tried subscribing before connect ack */\n    CloseCode[CloseCode[\"Unauthorized\"] = 4401] = \"Unauthorized\";\n    CloseCode[CloseCode[\"Forbidden\"] = 4403] = \"Forbidden\";\n    CloseCode[CloseCode[\"SubprotocolNotAcceptable\"] = 4406] = \"SubprotocolNotAcceptable\";\n    CloseCode[CloseCode[\"ConnectionInitialisationTimeout\"] = 4408] = \"ConnectionInitialisationTimeout\";\n    CloseCode[CloseCode[\"ConnectionAcknowledgementTimeout\"] = 4504] = \"ConnectionAcknowledgementTimeout\";\n    /** Subscriber distinction is very important */\n    CloseCode[CloseCode[\"SubscriberAlreadyExists\"] = 4409] = \"SubscriberAlreadyExists\";\n    CloseCode[CloseCode[\"TooManyInitialisationRequests\"] = 4429] = \"TooManyInitialisationRequests\";\n})(CloseCode || (CloseCode = {}));\n/**\n * Types of messages allowed to be sent by the client/server over the WS protocol.\n *\n * @category Common\n */\nexport var MessageType;\n(function (MessageType) {\n    MessageType[\"ConnectionInit\"] = \"connection_init\";\n    MessageType[\"ConnectionAck\"] = \"connection_ack\";\n    MessageType[\"Ping\"] = \"ping\";\n    MessageType[\"Pong\"] = \"pong\";\n    MessageType[\"Subscribe\"] = \"subscribe\";\n    MessageType[\"Next\"] = \"next\";\n    MessageType[\"Error\"] = \"error\";\n    MessageType[\"Complete\"] = \"complete\";\n})(MessageType || (MessageType = {}));\n/**\n * Validates the message against the GraphQL over WebSocket Protocol.\n *\n * Invalid messages will throw descriptive errors.\n *\n * @category Common\n */\nexport function validateMessage(val) {\n    if (!isObject(val)) {\n        throw new Error(`Message is expected to be an object, but got ${extendedTypeof(val)}`);\n    }\n    if (!val.type) {\n        throw new Error(`Message is missing the 'type' property`);\n    }\n    if (typeof val.type !== 'string') {\n        throw new Error(`Message is expects the 'type' property to be a string, but got ${extendedTypeof(val.type)}`);\n    }\n    switch (val.type) {\n        case MessageType.ConnectionInit:\n        case MessageType.ConnectionAck:\n        case MessageType.Ping:\n        case MessageType.Pong: {\n            if (val.payload != null && !isObject(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object or nullish or missing, but got \"${val.payload}\"`);\n            }\n            break;\n        }\n        case MessageType.Subscribe: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            if (!isObject(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);\n            }\n            if (typeof val.payload.query !== 'string') {\n                throw new Error(`\"${val.type}\" message payload expects the 'query' property to be a string, but got ${extendedTypeof(val.payload.query)}`);\n            }\n            if (val.payload.variables != null && !isObject(val.payload.variables)) {\n                throw new Error(`\"${val.type}\" message payload expects the 'variables' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.variables)}`);\n            }\n            if (val.payload.operationName != null &&\n                extendedTypeof(val.payload.operationName) !== 'string') {\n                throw new Error(`\"${val.type}\" message payload expects the 'operationName' property to be a string or nullish or missing, but got ${extendedTypeof(val.payload.operationName)}`);\n            }\n            if (val.payload.extensions != null && !isObject(val.payload.extensions)) {\n                throw new Error(`\"${val.type}\" message payload expects the 'extensions' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.extensions)}`);\n            }\n            break;\n        }\n        case MessageType.Next: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            if (!isObject(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);\n            }\n            break;\n        }\n        case MessageType.Error: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            if (!areGraphQLErrors(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an array of GraphQL errors, but got ${JSON.stringify(val.payload)}`);\n            }\n            break;\n        }\n        case MessageType.Complete: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            break;\n        }\n        default:\n            throw new Error(`Invalid message 'type' property \"${val.type}\"`);\n    }\n    return val;\n}\n/**\n * Checks if the provided value is a valid GraphQL over WebSocket message.\n *\n * @deprecated Use `validateMessage` instead.\n *\n * @category Common\n */\nexport function isMessage(val) {\n    try {\n        validateMessage(val);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n/**\n * Parses the raw websocket message data to a valid message.\n *\n * @category Common\n */\nexport function parseMessage(data, reviver) {\n    return validateMessage(typeof data === 'string' ? JSON.parse(data, reviver) : data);\n}\n/**\n * Stringifies a valid message ready to be sent through the socket.\n *\n * @category Common\n */\nexport function stringifyMessage(msg, replacer) {\n    validateMessage(msg);\n    return JSON.stringify(msg, replacer);\n}\n",
      "start": 1710863480945,
      "end": 1710863481043,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710863481043,
      "end": 1710863481043,
      "order": "normal"
    }
  ]
}
