{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@apollo/client/utilities/common/canonicalStringify.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { AutoCleanedStrongCache, cacheSizes, } from \"../../utilities/caching/index.js\";\nimport { registerGlobalCache } from \"../caching/getMemoryInternals.js\";\n/**\n * Like JSON.stringify, but with object keys always sorted in the same order.\n *\n * To achieve performant sorting, this function uses a Map from JSON-serialized\n * arrays of keys (in any order) to sorted arrays of the same keys, with a\n * single sorted array reference shared by all permutations of the keys.\n *\n * As a drawback, this function will add a little bit more memory for every\n * object encountered that has different (more, less, a different order of) keys\n * than in the past.\n *\n * In a typical application, this extra memory usage should not play a\n * significant role, as `canonicalStringify` will be called for only a limited\n * number of object shapes, and the cache will not grow beyond a certain point.\n * But in some edge cases, this could be a problem, so we provide\n * canonicalStringify.reset() as a way of clearing the cache.\n * */\nexport var canonicalStringify = Object.assign(function canonicalStringify(value) {\n    return JSON.stringify(value, stableObjectReplacer);\n}, {\n    reset: function () {\n        // Clearing the sortingMap will reclaim all cached memory, without\n        // affecting the logical results of canonicalStringify, but potentially\n        // sacrificing performance until the cache is refilled.\n        sortingMap = new AutoCleanedStrongCache(cacheSizes.canonicalStringify || 1000 /* defaultCacheSizes.canonicalStringify */);\n    },\n});\nif (globalThis.__DEV__ !== false) {\n    registerGlobalCache(\"canonicalStringify\", function () { return sortingMap.size; });\n}\n// Values are JSON-serialized arrays of object keys (in any order), and values\n// are sorted arrays of the same keys.\nvar sortingMap;\ncanonicalStringify.reset();\n// The JSON.stringify function takes an optional second argument called a\n// replacer function. This function is called for each key-value pair in the\n// object being stringified, and its return value is used instead of the\n// original value. If the replacer function returns a new value, that value is\n// stringified as JSON instead of the original value of the property.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#the_replacer_parameter\nfunction stableObjectReplacer(key, value) {\n    if (value && typeof value === \"object\") {\n        var proto = Object.getPrototypeOf(value);\n        // We don't want to mess with objects that are not \"plain\" objects, which\n        // means their prototype is either Object.prototype or null. This check also\n        // prevents needlessly rearranging the indices of arrays.\n        if (proto === Object.prototype || proto === null) {\n            var keys = Object.keys(value);\n            // If keys is already sorted, let JSON.stringify serialize the original\n            // value instead of creating a new object with keys in the same order.\n            if (keys.every(everyKeyInOrder))\n                return value;\n            var unsortedKey = JSON.stringify(keys);\n            var sortedKeys = sortingMap.get(unsortedKey);\n            if (!sortedKeys) {\n                keys.sort();\n                var sortedKey = JSON.stringify(keys);\n                // Checking for sortedKey in the sortingMap allows us to share the same\n                // sorted array reference for all permutations of the same set of keys.\n                sortedKeys = sortingMap.get(sortedKey) || keys;\n                sortingMap.set(unsortedKey, sortedKeys);\n                sortingMap.set(sortedKey, sortedKeys);\n            }\n            var sortedObject_1 = Object.create(proto);\n            // Reassigning the keys in sorted order will cause JSON.stringify to\n            // serialize them in sorted order.\n            sortedKeys.forEach(function (key) {\n                sortedObject_1[key] = value[key];\n            });\n            return sortedObject_1;\n        }\n    }\n    return value;\n}\n// Since everything that happens in stableObjectReplacer benefits from being as\n// efficient as possible, we use a static function as the callback for\n// keys.every in order to test if the provided keys are already sorted without\n// allocating extra memory for a callback.\nfunction everyKeyInOrder(key, i, keys) {\n    return i === 0 || keys[i - 1] <= key;\n}\n//# sourceMappingURL=canonicalStringify.js.map",
      "start": 1710863480747,
      "end": 1710863480820,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710863480820,
      "end": 1710863480820,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710863480820,
      "end": 1710863480820,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1710863480820,
      "end": 1710863480820,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710863480820,
      "end": 1710863480820,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710863480820,
      "end": 1710863480820,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710863480820,
      "end": 1710863480820,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710863480820,
      "end": 1710863480820,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710863480820,
      "end": 1710863480820,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710863480820,
      "end": 1710863480820,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710863480820,
      "end": 1710863480820,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710863480820,
      "end": 1710863480820,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710863480820,
      "end": 1710863480820,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710863480820,
      "end": 1710863480820,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1710863480820,
      "end": 1710863480820,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710863480820,
      "end": 1710863480820,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710863480820,
      "end": 1710863480820,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710863480820,
      "end": 1710863480820,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { AutoCleanedStrongCache, cacheSizes } from \"../../utilities/caching/index.js\";\nimport { registerGlobalCache } from \"../caching/getMemoryInternals.js\";\nexport var canonicalStringify = Object.assign(function canonicalStringify2(value) {\n  return JSON.stringify(value, stableObjectReplacer);\n}, {\n  reset: function() {\n    sortingMap = new AutoCleanedStrongCache(\n      cacheSizes.canonicalStringify || 1e3\n      /* defaultCacheSizes.canonicalStringify */\n    );\n  }\n});\nif (globalThis.__DEV__ !== false) {\n  registerGlobalCache(\"canonicalStringify\", function() {\n    return sortingMap.size;\n  });\n}\nvar sortingMap;\ncanonicalStringify.reset();\nfunction stableObjectReplacer(key, value) {\n  if (value && typeof value === \"object\") {\n    var proto = Object.getPrototypeOf(value);\n    if (proto === Object.prototype || proto === null) {\n      var keys = Object.keys(value);\n      if (keys.every(everyKeyInOrder))\n        return value;\n      var unsortedKey = JSON.stringify(keys);\n      var sortedKeys = sortingMap.get(unsortedKey);\n      if (!sortedKeys) {\n        keys.sort();\n        var sortedKey = JSON.stringify(keys);\n        sortedKeys = sortingMap.get(sortedKey) || keys;\n        sortingMap.set(unsortedKey, sortedKeys);\n        sortingMap.set(sortedKey, sortedKeys);\n      }\n      var sortedObject_1 = Object.create(proto);\n      sortedKeys.forEach(function(key2) {\n        sortedObject_1[key2] = value[key2];\n      });\n      return sortedObject_1;\n    }\n  }\n  return value;\n}\nfunction everyKeyInOrder(key, i, keys) {\n  return i === 0 || keys[i - 1] <= key;\n}\n",
      "start": 1710863480820,
      "end": 1710863481224,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1710863481224,
      "end": 1710863481224,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710863481224,
      "end": 1710863481224,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710863481224,
      "end": 1710863481224,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710863481224,
      "end": 1710863481224,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710863481225,
      "end": 1710863481225,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710863481225,
      "end": 1710863481225,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710863481225,
      "end": 1710863481225,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710863481225,
      "end": 1710863481225,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710863481225,
      "end": 1710863481225,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710863481225,
      "end": 1710863481225,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710863481225,
      "end": 1710863481225,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710863481225,
      "end": 1710863481225,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710863481225,
      "end": 1710863481225,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710863481225,
      "end": 1710863481225,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710863481225,
      "end": 1710863481225,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710863481225,
      "end": 1710863481225,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710863481225,
      "end": 1710863481225,
      "order": "normal"
    }
  ]
}
