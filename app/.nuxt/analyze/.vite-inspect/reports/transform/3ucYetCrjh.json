{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@nuxtjs/apollo/node_modules/graphql/language/ast.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nexport class Location {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  constructor(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Location';\n  }\n\n  toJSON() {\n    return {\n      start: this.start,\n      end: this.end,\n    };\n  }\n}\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nexport class Token {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   *\n   * Note: is undefined for punctuation tokens, but typed as string for\n   * convenience in the parser.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  constructor(kind, start, end, line, column, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    this.value = value;\n    this.prev = null;\n    this.next = null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Token';\n  }\n\n  toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column,\n    };\n  }\n}\n/**\n * The list of all possible AST node types.\n */\n\n/**\n * @internal\n */\nexport const QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: [\n    'name',\n    'variableDefinitions',\n    'directives',\n    'selectionSet',\n  ],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: [\n    'name', // Note: fragment variable definitions are deprecated and will removed in v17.0.0\n    'variableDefinitions',\n    'typeCondition',\n    'directives',\n    'selectionSet',\n  ],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: [\n    'description',\n    'name',\n    'type',\n    'defaultValue',\n    'directives',\n  ],\n  InterfaceTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields'],\n};\nconst kindValues = new Set(Object.keys(QueryDocumentKeys));\n/**\n * @internal\n */\n\nexport function isNode(maybeNode) {\n  const maybeKind =\n    maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;\n  return typeof maybeKind === 'string' && kindValues.has(maybeKind);\n}\n/** Name */\n\nvar OperationTypeNode;\n\n(function (OperationTypeNode) {\n  OperationTypeNode['QUERY'] = 'query';\n  OperationTypeNode['MUTATION'] = 'mutation';\n  OperationTypeNode['SUBSCRIPTION'] = 'subscription';\n})(OperationTypeNode || (OperationTypeNode = {}));\n\nexport { OperationTypeNode };\n",
      "start": 1712968595084,
      "end": 1712968595109,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712968595109,
      "end": 1712968595109,
      "order": "normal"
    }
  ]
}
