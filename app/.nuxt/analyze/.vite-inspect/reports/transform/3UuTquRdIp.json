{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nexport function NoFragmentCyclesRule(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  var visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  var spreadPath = []; // Position in the spread path\n\n  var spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      detectCycleRecursive(node);\n      return false;\n    }\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    if (visitedFrags[fragment.name.value]) {\n      return;\n    }\n\n    var fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (var _i2 = 0; _i2 < spreadNodes.length; _i2++) {\n      var spreadNode = spreadNodes[_i2];\n      var spreadName = spreadNode.name.value;\n      var cycleIndex = spreadPathIndexByName[spreadName];\n      spreadPath.push(spreadNode);\n\n      if (cycleIndex === undefined) {\n        var spreadFragment = context.getFragment(spreadName);\n\n        if (spreadFragment) {\n          detectCycleRecursive(spreadFragment);\n        }\n      } else {\n        var cyclePath = spreadPath.slice(cycleIndex);\n        var viaPath = cyclePath.slice(0, -1).map(function (s) {\n          return '\"' + s.name.value + '\"';\n        }).join(', ');\n        context.reportError(new GraphQLError(\"Cannot spread fragment \\\"\".concat(spreadName, \"\\\" within itself\") + (viaPath !== '' ? \" via \".concat(viaPath, \".\") : '.'), cyclePath));\n      }\n\n      spreadPath.pop();\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}\n",
      "start": 1746507067853,
      "end": 1746507067881,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746507067881,
      "end": 1746507067881,
      "order": "normal"
    }
  ]
}
