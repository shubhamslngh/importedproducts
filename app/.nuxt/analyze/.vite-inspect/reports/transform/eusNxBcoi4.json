{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@nuxtjs/apollo/node_modules/graphql/validation/rules/KnownDirectivesRule.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { OperationTypeNode } from '../../language/ast.mjs';\nimport { DirectiveLocation } from '../../language/directiveLocation.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Defined\n */\nexport function KnownDirectivesRule(context) {\n  const locationsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    locationsMap[directive.name] = directive.locations;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      locationsMap[def.name.value] = def.locations.map((name) => name.value);\n    }\n  }\n\n  return {\n    Directive(node, _key, _parent, _path, ancestors) {\n      const name = node.name.value;\n      const locations = locationsMap[name];\n\n      if (!locations) {\n        context.reportError(\n          new GraphQLError(`Unknown directive \"@${name}\".`, {\n            nodes: node,\n          }),\n        );\n        return;\n      }\n\n      const candidateLocation = getDirectiveLocationForASTPath(ancestors);\n\n      if (candidateLocation && !locations.includes(candidateLocation)) {\n        context.reportError(\n          new GraphQLError(\n            `Directive \"@${name}\" may not be used on ${candidateLocation}.`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getDirectiveLocationForASTPath(ancestors) {\n  const appliedTo = ancestors[ancestors.length - 1];\n  'kind' in appliedTo || invariant(false);\n\n  switch (appliedTo.kind) {\n    case Kind.OPERATION_DEFINITION:\n      return getDirectiveLocationForOperation(appliedTo.operation);\n\n    case Kind.FIELD:\n      return DirectiveLocation.FIELD;\n\n    case Kind.FRAGMENT_SPREAD:\n      return DirectiveLocation.FRAGMENT_SPREAD;\n\n    case Kind.INLINE_FRAGMENT:\n      return DirectiveLocation.INLINE_FRAGMENT;\n\n    case Kind.FRAGMENT_DEFINITION:\n      return DirectiveLocation.FRAGMENT_DEFINITION;\n\n    case Kind.VARIABLE_DEFINITION:\n      return DirectiveLocation.VARIABLE_DEFINITION;\n\n    case Kind.SCHEMA_DEFINITION:\n    case Kind.SCHEMA_EXTENSION:\n      return DirectiveLocation.SCHEMA;\n\n    case Kind.SCALAR_TYPE_DEFINITION:\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return DirectiveLocation.SCALAR;\n\n    case Kind.OBJECT_TYPE_DEFINITION:\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.OBJECT;\n\n    case Kind.FIELD_DEFINITION:\n      return DirectiveLocation.FIELD_DEFINITION;\n\n    case Kind.INTERFACE_TYPE_DEFINITION:\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return DirectiveLocation.INTERFACE;\n\n    case Kind.UNION_TYPE_DEFINITION:\n    case Kind.UNION_TYPE_EXTENSION:\n      return DirectiveLocation.UNION;\n\n    case Kind.ENUM_TYPE_DEFINITION:\n    case Kind.ENUM_TYPE_EXTENSION:\n      return DirectiveLocation.ENUM;\n\n    case Kind.ENUM_VALUE_DEFINITION:\n      return DirectiveLocation.ENUM_VALUE;\n\n    case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.INPUT_OBJECT;\n\n    case Kind.INPUT_VALUE_DEFINITION: {\n      const parentNode = ancestors[ancestors.length - 3];\n      'kind' in parentNode || invariant(false);\n      return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION\n        ? DirectiveLocation.INPUT_FIELD_DEFINITION\n        : DirectiveLocation.ARGUMENT_DEFINITION;\n    }\n    // Not reachable, all possible types have been considered.\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(appliedTo.kind));\n  }\n}\n\nfunction getDirectiveLocationForOperation(operation) {\n  switch (operation) {\n    case OperationTypeNode.QUERY:\n      return DirectiveLocation.QUERY;\n\n    case OperationTypeNode.MUTATION:\n      return DirectiveLocation.MUTATION;\n\n    case OperationTypeNode.SUBSCRIPTION:\n      return DirectiveLocation.SUBSCRIPTION;\n  }\n}\n",
      "start": 1746507067703,
      "end": 1746507067736,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746507067736,
      "end": 1746507067737,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1746507067737,
      "end": 1746507067737,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746507067737,
      "end": 1746507067737,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1746507067737,
      "end": 1746507067737,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746507067737,
      "end": 1746507067737,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1746507067737,
      "end": 1746507067737,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1746507067737,
      "end": 1746507067737,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1746507067737,
      "end": 1746507067737,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746507067737,
      "end": 1746507067737,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746507067737,
      "end": 1746507067737,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1746507067737,
      "end": 1746507067737,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1746507067737,
      "end": 1746507067737,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1746507067737,
      "end": 1746507067737,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1746507067737,
      "end": 1746507067737,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1746507067737,
      "end": 1746507067737,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1746507067737,
      "end": 1746507067737,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1746507067737,
      "end": 1746507067737,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1746507067737,
      "end": 1746507067737,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746507067737,
      "end": 1746507067737,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746507067737,
      "end": 1746507067737,
      "order": "normal"
    }
  ]
}
