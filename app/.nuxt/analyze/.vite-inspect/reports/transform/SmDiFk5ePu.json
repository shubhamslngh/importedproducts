{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/graphql/utilities/lexicographicSortSchema.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport objectValues from \"../polyfills/objectValues.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport keyValMap from \"../jsutils/keyValMap.mjs\";\nimport naturalCompare from \"../jsutils/naturalCompare.mjs\";\nimport { GraphQLSchema } from \"../type/schema.mjs\";\nimport { GraphQLDirective } from \"../type/directives.mjs\";\nimport { isIntrospectionType } from \"../type/introspection.mjs\";\nimport { GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, isListType, isNonNullType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType } from \"../type/definition.mjs\";\n/**\n * Sort GraphQLSchema.\n *\n * This function returns a sorted copy of the given GraphQLSchema.\n */\n\nexport function lexicographicSortSchema(schema) {\n  var schemaConfig = schema.toConfig();\n  var typeMap = keyValMap(sortByName(schemaConfig.types), function (type) {\n    return type.name;\n  }, sortNamedType);\n  return new GraphQLSchema(_objectSpread(_objectSpread({}, schemaConfig), {}, {\n    types: objectValues(typeMap),\n    directives: sortByName(schemaConfig.directives).map(sortDirective),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription)\n  }));\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // $FlowFixMe[incompatible-return]\n      return new GraphQLList(replaceType(type.ofType));\n    } else if (isNonNullType(type)) {\n      // $FlowFixMe[incompatible-return]\n      return new GraphQLNonNull(replaceType(type.ofType));\n    }\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    return typeMap[type.name];\n  }\n\n  function replaceMaybeType(maybeType) {\n    return maybeType && replaceNamedType(maybeType);\n  }\n\n  function sortDirective(directive) {\n    var config = directive.toConfig();\n    return new GraphQLDirective(_objectSpread(_objectSpread({}, config), {}, {\n      locations: sortBy(config.locations, function (x) {\n        return x;\n      }),\n      args: sortArgs(config.args)\n    }));\n  }\n\n  function sortArgs(args) {\n    return sortObjMap(args, function (arg) {\n      return _objectSpread(_objectSpread({}, arg), {}, {\n        type: replaceType(arg.type)\n      });\n    });\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, function (field) {\n      return _objectSpread(_objectSpread({}, field), {}, {\n        type: replaceType(field.type),\n        args: sortArgs(field.args)\n      });\n    });\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, function (field) {\n      return _objectSpread(_objectSpread({}, field), {}, {\n        type: replaceType(field.type)\n      });\n    });\n  }\n\n  function sortTypes(arr) {\n    return sortByName(arr).map(replaceNamedType);\n  }\n\n  function sortNamedType(type) {\n    if (isScalarType(type) || isIntrospectionType(type)) {\n      return type;\n    }\n\n    if (isObjectType(type)) {\n      var config = type.toConfig();\n      return new GraphQLObjectType(_objectSpread(_objectSpread({}, config), {}, {\n        interfaces: function interfaces() {\n          return sortTypes(config.interfaces);\n        },\n        fields: function fields() {\n          return sortFields(config.fields);\n        }\n      }));\n    }\n\n    if (isInterfaceType(type)) {\n      var _config = type.toConfig();\n\n      return new GraphQLInterfaceType(_objectSpread(_objectSpread({}, _config), {}, {\n        interfaces: function interfaces() {\n          return sortTypes(_config.interfaces);\n        },\n        fields: function fields() {\n          return sortFields(_config.fields);\n        }\n      }));\n    }\n\n    if (isUnionType(type)) {\n      var _config2 = type.toConfig();\n\n      return new GraphQLUnionType(_objectSpread(_objectSpread({}, _config2), {}, {\n        types: function types() {\n          return sortTypes(_config2.types);\n        }\n      }));\n    }\n\n    if (isEnumType(type)) {\n      var _config3 = type.toConfig();\n\n      return new GraphQLEnumType(_objectSpread(_objectSpread({}, _config3), {}, {\n        values: sortObjMap(_config3.values)\n      }));\n    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n    if (isInputObjectType(type)) {\n      var _config4 = type.toConfig();\n\n      return new GraphQLInputObjectType(_objectSpread(_objectSpread({}, _config4), {}, {\n        fields: function fields() {\n          return sortInputFields(_config4.fields);\n        }\n      }));\n    } // istanbul ignore next (Not reachable. All possible types have been considered)\n\n\n    false || invariant(0, 'Unexpected type: ' + inspect(type));\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  var sortedMap = Object.create(null);\n  var sortedKeys = sortBy(Object.keys(map), function (x) {\n    return x;\n  });\n\n  for (var _i2 = 0; _i2 < sortedKeys.length; _i2++) {\n    var key = sortedKeys[_i2];\n    var value = map[key];\n    sortedMap[key] = sortValueFn ? sortValueFn(value) : value;\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, function (obj) {\n    return obj.name;\n  });\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort(function (obj1, obj2) {\n    var key1 = mapToKey(obj1);\n    var key2 = mapToKey(obj2);\n    return naturalCompare(key1, key2);\n  });\n}\n",
      "start": 1710864567340,
      "end": 1710864567350,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710864567350,
      "end": 1710864567350,
      "order": "normal"
    }
  ]
}
