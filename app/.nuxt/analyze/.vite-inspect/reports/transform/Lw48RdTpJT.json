{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@apollo/client/utilities/graphql/storeUtils.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { newInvariantError } from \"../globals/index.js\";\nimport { isNonNullObject } from \"../common/objects.js\";\nimport { getFragmentFromSelection } from \"./fragments.js\";\nimport { canonicalStringify } from \"../common/canonicalStringify.js\";\nexport function makeReference(id) {\n    return { __ref: String(id) };\n}\nexport function isReference(obj) {\n    return Boolean(obj && typeof obj === \"object\" && typeof obj.__ref === \"string\");\n}\nexport function isDocumentNode(value) {\n    return (isNonNullObject(value) &&\n        value.kind === \"Document\" &&\n        Array.isArray(value.definitions));\n}\nfunction isStringValue(value) {\n    return value.kind === \"StringValue\";\n}\nfunction isBooleanValue(value) {\n    return value.kind === \"BooleanValue\";\n}\nfunction isIntValue(value) {\n    return value.kind === \"IntValue\";\n}\nfunction isFloatValue(value) {\n    return value.kind === \"FloatValue\";\n}\nfunction isVariable(value) {\n    return value.kind === \"Variable\";\n}\nfunction isObjectValue(value) {\n    return value.kind === \"ObjectValue\";\n}\nfunction isListValue(value) {\n    return value.kind === \"ListValue\";\n}\nfunction isEnumValue(value) {\n    return value.kind === \"EnumValue\";\n}\nfunction isNullValue(value) {\n    return value.kind === \"NullValue\";\n}\nexport function valueToObjectRepresentation(argObj, name, value, variables) {\n    if (isIntValue(value) || isFloatValue(value)) {\n        argObj[name.value] = Number(value.value);\n    }\n    else if (isBooleanValue(value) || isStringValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isObjectValue(value)) {\n        var nestedArgObj_1 = {};\n        value.fields.map(function (obj) {\n            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n        });\n        argObj[name.value] = nestedArgObj_1;\n    }\n    else if (isVariable(value)) {\n        var variableValue = (variables || {})[value.name.value];\n        argObj[name.value] = variableValue;\n    }\n    else if (isListValue(value)) {\n        argObj[name.value] = value.values.map(function (listValue) {\n            var nestedArgArrayObj = {};\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n            return nestedArgArrayObj[name.value];\n        });\n    }\n    else if (isEnumValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isNullValue(value)) {\n        argObj[name.value] = null;\n    }\n    else {\n        throw newInvariantError(82, name.value, value.kind);\n    }\n}\nexport function storeKeyNameFromField(field, variables) {\n    var directivesObj = null;\n    if (field.directives) {\n        directivesObj = {};\n        field.directives.forEach(function (directive) {\n            directivesObj[directive.name.value] = {};\n            if (directive.arguments) {\n                directive.arguments.forEach(function (_a) {\n                    var name = _a.name, value = _a.value;\n                    return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n                });\n            }\n        });\n    }\n    var argObj = null;\n    if (field.arguments && field.arguments.length) {\n        argObj = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj, name, value, variables);\n        });\n    }\n    return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = [\n    \"connection\",\n    \"include\",\n    \"skip\",\n    \"client\",\n    \"rest\",\n    \"export\",\n    \"nonreactive\",\n];\n// Default stable JSON.stringify implementation used by getStoreKeyName. Can be\n// updated/replaced with something better by calling\n// getStoreKeyName.setStringify(newStringifyFunction).\nvar storeKeyNameStringify = canonicalStringify;\nexport var getStoreKeyName = Object.assign(function (fieldName, args, directives) {\n    if (args &&\n        directives &&\n        directives[\"connection\"] &&\n        directives[\"connection\"][\"key\"]) {\n        if (directives[\"connection\"][\"filter\"] &&\n            directives[\"connection\"][\"filter\"].length > 0) {\n            var filterKeys = directives[\"connection\"][\"filter\"] ?\n                directives[\"connection\"][\"filter\"]\n                : [];\n            filterKeys.sort();\n            var filteredArgs_1 = {};\n            filterKeys.forEach(function (key) {\n                filteredArgs_1[key] = args[key];\n            });\n            return \"\".concat(directives[\"connection\"][\"key\"], \"(\").concat(storeKeyNameStringify(filteredArgs_1), \")\");\n        }\n        else {\n            return directives[\"connection\"][\"key\"];\n        }\n    }\n    var completeFieldName = fieldName;\n    if (args) {\n        // We can't use `JSON.stringify` here since it's non-deterministic,\n        // and can lead to different store key names being created even though\n        // the `args` object used during creation has the same properties/values.\n        var stringifiedArgs = storeKeyNameStringify(args);\n        completeFieldName += \"(\".concat(stringifiedArgs, \")\");\n    }\n    if (directives) {\n        Object.keys(directives).forEach(function (key) {\n            if (KNOWN_DIRECTIVES.indexOf(key) !== -1)\n                return;\n            if (directives[key] && Object.keys(directives[key]).length) {\n                completeFieldName += \"@\".concat(key, \"(\").concat(storeKeyNameStringify(directives[key]), \")\");\n            }\n            else {\n                completeFieldName += \"@\".concat(key);\n            }\n        });\n    }\n    return completeFieldName;\n}, {\n    setStringify: function (s) {\n        var previous = storeKeyNameStringify;\n        storeKeyNameStringify = s;\n        return previous;\n    },\n});\nexport function argumentsObjectFromField(field, variables) {\n    if (field.arguments && field.arguments.length) {\n        var argObj_1 = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj_1, name, value, variables);\n        });\n        return argObj_1;\n    }\n    return null;\n}\nexport function resultKeyNameFromField(field) {\n    return field.alias ? field.alias.value : field.name.value;\n}\nexport function getTypenameFromResult(result, selectionSet, fragmentMap) {\n    var fragments;\n    for (var _i = 0, _a = selectionSet.selections; _i < _a.length; _i++) {\n        var selection = _a[_i];\n        if (isField(selection)) {\n            if (selection.name.value === \"__typename\") {\n                return result[resultKeyNameFromField(selection)];\n            }\n        }\n        else if (fragments) {\n            fragments.push(selection);\n        }\n        else {\n            fragments = [selection];\n        }\n    }\n    if (typeof result.__typename === \"string\") {\n        return result.__typename;\n    }\n    if (fragments) {\n        for (var _b = 0, fragments_1 = fragments; _b < fragments_1.length; _b++) {\n            var selection = fragments_1[_b];\n            var typename = getTypenameFromResult(result, getFragmentFromSelection(selection, fragmentMap).selectionSet, fragmentMap);\n            if (typeof typename === \"string\") {\n                return typename;\n            }\n        }\n    }\n}\nexport function isField(selection) {\n    return selection.kind === \"Field\";\n}\nexport function isInlineFragment(selection) {\n    return selection.kind === \"InlineFragment\";\n}\n//# sourceMappingURL=storeUtils.js.map",
      "start": 1710864566706,
      "end": 1710864566748,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710864566748,
      "end": 1710864566748,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710864566748,
      "end": 1710864566748,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1710864566748,
      "end": 1710864566748,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710864566748,
      "end": 1710864566748,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710864566748,
      "end": 1710864566748,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710864566748,
      "end": 1710864566748,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710864566748,
      "end": 1710864566748,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710864566748,
      "end": 1710864566748,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710864566748,
      "end": 1710864566748,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710864566748,
      "end": 1710864566748,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710864566748,
      "end": 1710864566748,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710864566748,
      "end": 1710864566748,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710864566748,
      "end": 1710864566748,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1710864566748,
      "end": 1710864566748,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710864566748,
      "end": 1710864566748,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710864566748,
      "end": 1710864566748,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710864566748,
      "end": 1710864566748,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1710864566748,
      "end": 1710864566748,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1710864566748,
      "end": 1710864566748,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710864566748,
      "end": 1710864566748,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710864566748,
      "end": 1710864566748,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710864566748,
      "end": 1710864566748,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710864566748,
      "end": 1710864566749,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710864566749,
      "end": 1710864566749,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710864566749,
      "end": 1710864566749,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710864566749,
      "end": 1710864566749,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710864566749,
      "end": 1710864566749,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710864566749,
      "end": 1710864566749,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710864566749,
      "end": 1710864566749,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710864566749,
      "end": 1710864566749,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710864566749,
      "end": 1710864566749,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710864566749,
      "end": 1710864566749,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710864566749,
      "end": 1710864566749,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710864566749,
      "end": 1710864566749,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710864566749,
      "end": 1710864566749,
      "order": "normal"
    }
  ]
}
