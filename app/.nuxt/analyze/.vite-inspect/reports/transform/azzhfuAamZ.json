{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@nuxtjs/apollo/node_modules/graphql/execution/values.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { inspect } from '../jsutils/inspect.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { isInputType, isNonNullType } from '../type/definition.mjs';\nimport { coerceInputValue } from '../utilities/coerceInputValue.mjs';\nimport { typeFromAST } from '../utilities/typeFromAST.mjs';\nimport { valueFromAST } from '../utilities/valueFromAST.mjs';\n\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nexport function getVariableValues(schema, varDefNodes, inputs, options) {\n  const errors = [];\n  const maxErrors =\n    options === null || options === void 0 ? void 0 : options.maxErrors;\n\n  try {\n    const coerced = coerceVariableValues(\n      schema,\n      varDefNodes,\n      inputs,\n      (error) => {\n        if (maxErrors != null && errors.length >= maxErrors) {\n          throw new GraphQLError(\n            'Too many errors processing variables, error limit reached. Execution aborted.',\n          );\n        }\n\n        errors.push(error);\n      },\n    );\n\n    if (errors.length === 0) {\n      return {\n        coerced,\n      };\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n\n  return {\n    errors,\n  };\n}\n\nfunction coerceVariableValues(schema, varDefNodes, inputs, onError) {\n  const coercedValues = {};\n\n  for (const varDefNode of varDefNodes) {\n    const varName = varDefNode.variable.name.value;\n    const varType = typeFromAST(schema, varDefNode.type);\n\n    if (!isInputType(varType)) {\n      // Must use input types for variables. This should be caught during\n      // validation, however is checked again here for safety.\n      const varTypeStr = print(varDefNode.type);\n      onError(\n        new GraphQLError(\n          `Variable \"$${varName}\" expected value of type \"${varTypeStr}\" which cannot be used as an input type.`,\n          {\n            nodes: varDefNode.type,\n          },\n        ),\n      );\n      continue;\n    }\n\n    if (!hasOwnProperty(inputs, varName)) {\n      if (varDefNode.defaultValue) {\n        coercedValues[varName] = valueFromAST(varDefNode.defaultValue, varType);\n      } else if (isNonNullType(varType)) {\n        const varTypeStr = inspect(varType);\n        onError(\n          new GraphQLError(\n            `Variable \"$${varName}\" of required type \"${varTypeStr}\" was not provided.`,\n            {\n              nodes: varDefNode,\n            },\n          ),\n        );\n      }\n\n      continue;\n    }\n\n    const value = inputs[varName];\n\n    if (value === null && isNonNullType(varType)) {\n      const varTypeStr = inspect(varType);\n      onError(\n        new GraphQLError(\n          `Variable \"$${varName}\" of non-null type \"${varTypeStr}\" must not be null.`,\n          {\n            nodes: varDefNode,\n          },\n        ),\n      );\n      continue;\n    }\n\n    coercedValues[varName] = coerceInputValue(\n      value,\n      varType,\n      (path, invalidValue, error) => {\n        let prefix =\n          `Variable \"$${varName}\" got invalid value ` + inspect(invalidValue);\n\n        if (path.length > 0) {\n          prefix += ` at \"${varName}${printPathArray(path)}\"`;\n        }\n\n        onError(\n          new GraphQLError(prefix + '; ' + error.message, {\n            nodes: varDefNode,\n            originalError: error,\n          }),\n        );\n      },\n    );\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getArgumentValues(def, node, variableValues) {\n  var _node$arguments;\n\n  const coercedValues = {}; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n\n  const argumentNodes =\n    (_node$arguments = node.arguments) !== null && _node$arguments !== void 0\n      ? _node$arguments\n      : [];\n  const argNodeMap = keyMap(argumentNodes, (arg) => arg.name.value);\n\n  for (const argDef of def.args) {\n    const name = argDef.name;\n    const argType = argDef.type;\n    const argumentNode = argNodeMap[name];\n\n    if (!argumentNode) {\n      if (argDef.defaultValue !== undefined) {\n        coercedValues[name] = argDef.defaultValue;\n      } else if (isNonNullType(argType)) {\n        throw new GraphQLError(\n          `Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n            'was not provided.',\n          {\n            nodes: node,\n          },\n        );\n      }\n\n      continue;\n    }\n\n    const valueNode = argumentNode.value;\n    let isNull = valueNode.kind === Kind.NULL;\n\n    if (valueNode.kind === Kind.VARIABLE) {\n      const variableName = valueNode.name.value;\n\n      if (\n        variableValues == null ||\n        !hasOwnProperty(variableValues, variableName)\n      ) {\n        if (argDef.defaultValue !== undefined) {\n          coercedValues[name] = argDef.defaultValue;\n        } else if (isNonNullType(argType)) {\n          throw new GraphQLError(\n            `Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n              `was provided the variable \"$${variableName}\" which was not provided a runtime value.`,\n            {\n              nodes: valueNode,\n            },\n          );\n        }\n\n        continue;\n      }\n\n      isNull = variableValues[variableName] == null;\n    }\n\n    if (isNull && isNonNullType(argType)) {\n      throw new GraphQLError(\n        `Argument \"${name}\" of non-null type \"${inspect(argType)}\" ` +\n          'must not be null.',\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const coercedValue = valueFromAST(valueNode, argType, variableValues);\n\n    if (coercedValue === undefined) {\n      // Note: ValuesOfCorrectTypeRule validation should catch this before\n      // execution. This is a runtime check to ensure execution does not\n      // continue with an invalid argument value.\n      throw new GraphQLError(\n        `Argument \"${name}\" has invalid value ${print(valueNode)}.`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    coercedValues[name] = coercedValue;\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getDirectiveValues(directiveDef, node, variableValues) {\n  var _node$directives;\n\n  const directiveNode =\n    (_node$directives = node.directives) === null || _node$directives === void 0\n      ? void 0\n      : _node$directives.find(\n          (directive) => directive.name.value === directiveDef.name,\n        );\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n",
      "start": 1713304784016,
      "end": 1713304784043,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1713304784043,
      "end": 1713304784043,
      "order": "normal"
    }
  ]
}
