{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@apollo/client/react/hooks/useMutation.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { __assign } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n/**\n *\n *\n * > Refer to the [Mutations](https://www.apollographql.com/docs/react/data/mutations/) section for a more in-depth overview of `useMutation`.\n *\n * @example\n * ```jsx\n * import { gql, useMutation } from '@apollo/client';\n *\n * const ADD_TODO = gql`\n *   mutation AddTodo($type: String!) {\n *     addTodo(type: $type) {\n *       id\n *       type\n *     }\n *   }\n * `;\n *\n * function AddTodo() {\n *   let input;\n *   const [addTodo, { data }] = useMutation(ADD_TODO);\n *\n *   return (\n *     <div>\n *       <form\n *         onSubmit={e => {\n *           e.preventDefault();\n *           addTodo({ variables: { type: input.value } });\n *           input.value = '';\n *         }}\n *       >\n *         <input\n *           ref={node => {\n *             input = node;\n *           }}\n *         />\n *         <button type=\"submit\">Add Todo</button>\n *       </form>\n *     </div>\n *   );\n * }\n * ```\n * @since 3.0.0\n * @param mutation - A GraphQL mutation document parsed into an AST by `gql`.\n * @param options - Options to control how the mutation is executed.\n * @returns A tuple in the form of `[mutate, result]`\n */\nexport function useMutation(mutation, options) {\n    var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n    verifyDocumentType(mutation, DocumentType.Mutation);\n    var _a = React.useState({\n        called: false,\n        loading: false,\n        client: client,\n    }), result = _a[0], setResult = _a[1];\n    var ref = React.useRef({\n        result: result,\n        mutationId: 0,\n        isMounted: true,\n        client: client,\n        mutation: mutation,\n        options: options,\n    });\n    // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n    // higher-order components.\n    {\n        Object.assign(ref.current, { client: client, options: options, mutation: mutation });\n    }\n    var execute = React.useCallback(function (executeOptions) {\n        if (executeOptions === void 0) { executeOptions = {}; }\n        var _a = ref.current, options = _a.options, mutation = _a.mutation;\n        var baseOptions = __assign(__assign({}, options), { mutation: mutation });\n        var client = executeOptions.client || ref.current.client;\n        if (!ref.current.result.loading &&\n            !baseOptions.ignoreResults &&\n            ref.current.isMounted) {\n            setResult((ref.current.result = {\n                loading: true,\n                error: void 0,\n                data: void 0,\n                called: true,\n                client: client,\n            }));\n        }\n        var mutationId = ++ref.current.mutationId;\n        var clientOptions = mergeOptions(baseOptions, executeOptions);\n        return client\n            .mutate(clientOptions)\n            .then(function (response) {\n            var _a, _b;\n            var data = response.data, errors = response.errors;\n            var error = errors && errors.length > 0 ?\n                new ApolloError({ graphQLErrors: errors })\n                : void 0;\n            var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n            if (error && onError) {\n                onError(error, clientOptions);\n            }\n            if (mutationId === ref.current.mutationId &&\n                !clientOptions.ignoreResults) {\n                var result_1 = {\n                    called: true,\n                    loading: false,\n                    data: data,\n                    error: error,\n                    client: client,\n                };\n                if (ref.current.isMounted && !equal(ref.current.result, result_1)) {\n                    setResult((ref.current.result = result_1));\n                }\n            }\n            var onCompleted = executeOptions.onCompleted || ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onCompleted);\n            if (!error) {\n                onCompleted === null || onCompleted === void 0 ? void 0 : onCompleted(response.data, clientOptions);\n            }\n            return response;\n        })\n            .catch(function (error) {\n            var _a;\n            if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n                var result_2 = {\n                    loading: false,\n                    error: error,\n                    data: void 0,\n                    called: true,\n                    client: client,\n                };\n                if (!equal(ref.current.result, result_2)) {\n                    setResult((ref.current.result = result_2));\n                }\n            }\n            var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n            if (onError) {\n                onError(error, clientOptions);\n                // TODO(brian): why are we returning this here???\n                return { data: void 0, errors: error };\n            }\n            throw error;\n        });\n    }, []);\n    var reset = React.useCallback(function () {\n        if (ref.current.isMounted) {\n            var result_3 = { called: false, loading: false, client: client };\n            Object.assign(ref.current, { mutationId: 0, result: result_3 });\n            setResult(result_3);\n        }\n    }, []);\n    React.useEffect(function () {\n        ref.current.isMounted = true;\n        return function () {\n            ref.current.isMounted = false;\n        };\n    }, []);\n    return [execute, __assign({ reset: reset }, result)];\n}\n//# sourceMappingURL=useMutation.js.map",
      "start": 1716304640247,
      "end": 1716304640256,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1716304640256,
      "end": 1716304640256,
      "order": "normal"
    }
  ]
}
