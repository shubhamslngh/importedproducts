{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@nuxtjs/apollo/node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique argument definition names\n *\n * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.\n * A GraphQL Directive is only valid if all its arguments are uniquely named.\n */\nexport function UniqueArgumentDefinitionNamesRule(context) {\n  return {\n    DirectiveDefinition(directiveNode) {\n      var _directiveNode$argume;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argumentNodes =\n        (_directiveNode$argume = directiveNode.arguments) !== null &&\n        _directiveNode$argume !== void 0\n          ? _directiveNode$argume\n          : [];\n      return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);\n    },\n\n    InterfaceTypeDefinition: checkArgUniquenessPerField,\n    InterfaceTypeExtension: checkArgUniquenessPerField,\n    ObjectTypeDefinition: checkArgUniquenessPerField,\n    ObjectTypeExtension: checkArgUniquenessPerField,\n  };\n\n  function checkArgUniquenessPerField(typeNode) {\n    var _typeNode$fields;\n\n    const typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_typeNode$fields = typeNode.fields) !== null &&\n      _typeNode$fields !== void 0\n        ? _typeNode$fields\n        : [];\n\n    for (const fieldDef of fieldNodes) {\n      var _fieldDef$arguments;\n\n      const fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n      const argumentNodes =\n        (_fieldDef$arguments = fieldDef.arguments) !== null &&\n        _fieldDef$arguments !== void 0\n          ? _fieldDef$arguments\n          : [];\n      checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);\n    }\n\n    return false;\n  }\n\n  function checkArgUniqueness(parentName, argumentNodes) {\n    const seenArgs = groupBy(argumentNodes, (arg) => arg.name.value);\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new GraphQLError(\n            `Argument \"${parentName}(${argName}:)\" can only be defined once.`,\n            {\n              nodes: argNodes.map((node) => node.name),\n            },\n          ),\n        );\n      }\n    }\n\n    return false;\n  }\n}\n",
      "start": 1716304640018,
      "end": 1716304640032,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716304640032,
      "end": 1716304640032,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716304640032,
      "end": 1716304640033,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1716304640033,
      "end": 1716304640033,
      "order": "normal"
    }
  ]
}
