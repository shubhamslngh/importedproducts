{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@nuxtjs/apollo/node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport {\n  getNamedType,\n  getNullableType,\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isRequiredInputField,\n} from '../../type/definition.mjs';\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n *\n * See https://spec.graphql.org/draft/#sec-Values-of-Correct-Type\n */\nexport function ValuesOfCorrectTypeRule(context) {\n  return {\n    ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      const type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n\n    ObjectValue(node) {\n      const type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n      const fieldNodeMap = keyMap(node.fields, (field) => field.name.value);\n\n      for (const fieldDef of Object.values(type.getFields())) {\n        const fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          const typeStr = inspect(fieldDef.type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${type.name}.${fieldDef.name}\" of required type \"${typeStr}\" was not provided.`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    ObjectField(node) {\n      const parentType = getNamedType(context.getParentInputType());\n      const fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        const suggestions = suggestionList(\n          node.name.value,\n          Object.keys(parentType.getFields()),\n        );\n        context.reportError(\n          new GraphQLError(\n            `Field \"${node.name.value}\" is not defined by type \"${parentType.name}\".` +\n              didYouMean(suggestions),\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    NullValue(node) {\n      const type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(\n          new GraphQLError(\n            `Expected value of type \"${inspect(type)}\", found ${print(node)}.`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    EnumValue: (node) => isValidValueNode(context, node),\n    IntValue: (node) => isValidValueNode(context, node),\n    FloatValue: (node) => isValidValueNode(context, node),\n    StringValue: (node) => isValidValueNode(context, node),\n    BooleanValue: (node) => isValidValueNode(context, node),\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  const locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  const type = getNamedType(locationType);\n\n  if (!isLeafType(type)) {\n    const typeStr = inspect(locationType);\n    context.reportError(\n      new GraphQLError(\n        `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n        {\n          nodes: node,\n        },\n      ),\n    );\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n  try {\n    const parseResult = type.parseLiteral(\n      node,\n      undefined,\n      /* variables */\n    );\n\n    if (parseResult === undefined) {\n      const typeStr = inspect(locationType);\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n          {\n            nodes: node,\n          },\n        ),\n      );\n    }\n  } catch (error) {\n    const typeStr = inspect(locationType);\n\n    if (error instanceof GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}; ` +\n            error.message,\n          {\n            nodes: node,\n            originalError: error,\n          },\n        ),\n      );\n    }\n  }\n}\n",
      "start": 1710864567393,
      "end": 1710864567406,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710864567406,
      "end": 1710864567406,
      "order": "normal"
    }
  ]
}
