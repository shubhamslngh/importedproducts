{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isCompositeType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\nimport { doTypesOverlap } from \"../../utilities/typeComparators.mjs\";\n\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\nexport function PossibleFragmentSpreadsRule(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var fragType = context.getType();\n      var parentType = context.getParentType();\n\n      if (isCompositeType(fragType) && isCompositeType(parentType) && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        var parentTypeStr = inspect(parentType);\n        var fragTypeStr = inspect(fragType);\n        context.reportError(new GraphQLError(\"Fragment cannot be spread here as objects of type \\\"\".concat(parentTypeStr, \"\\\" can never be of type \\\"\").concat(fragTypeStr, \"\\\".\"), node));\n      }\n    },\n    FragmentSpread: function FragmentSpread(node) {\n      var fragName = node.name.value;\n      var fragType = getFragmentType(context, fragName);\n      var parentType = context.getParentType();\n\n      if (fragType && parentType && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        var parentTypeStr = inspect(parentType);\n        var fragTypeStr = inspect(fragType);\n        context.reportError(new GraphQLError(\"Fragment \\\"\".concat(fragName, \"\\\" cannot be spread here as objects of type \\\"\").concat(parentTypeStr, \"\\\" can never be of type \\\"\").concat(fragTypeStr, \"\\\".\"), node));\n      }\n    }\n  };\n}\n\nfunction getFragmentType(context, name) {\n  var frag = context.getFragment(name);\n\n  if (frag) {\n    var type = typeFromAST(context.getSchema(), frag.typeCondition);\n\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}\n",
      "start": 1713269986257,
      "end": 1713269986272,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1713269986272,
      "end": 1713269986272,
      "order": "normal"
    }
  ]
}
