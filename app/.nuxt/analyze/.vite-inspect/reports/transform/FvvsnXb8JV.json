{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@apollo/client/core/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/* Core */\nexport { ApolloClient, mergeOptions } from \"./ApolloClient.js\";\nexport { ObservableQuery } from \"./ObservableQuery.js\";\nexport { NetworkStatus, isNetworkRequestSettled } from \"./networkStatus.js\";\nexport * from \"./types.js\";\nexport { isApolloError, ApolloError } from \"../errors/index.js\";\nexport { Cache, ApolloCache, InMemoryCache, MissingFieldError, defaultDataIdFromObject, makeVar, } from \"../cache/index.js\";\nexport * from \"../cache/inmemory/types.js\";\n/* Link */\nexport * from \"../link/core/index.js\";\nexport * from \"../link/http/index.js\";\nexport { fromError, toPromise, fromPromise, throwServerError, } from \"../link/utils/index.js\";\nexport { DocumentTransform, Observable, isReference, makeReference, } from \"../utilities/index.js\";\n/* Supporting */\n// The verbosity of invariant.{log,warn,error} can be controlled globally\n// (for anyone using the same ts-invariant package) by passing \"log\",\n// \"warn\", \"error\", or \"silent\" to setVerbosity (\"log\" is the default).\n// Note that all invariant.* logging is hidden in production.\nimport { setVerbosity } from \"ts-invariant\";\nexport { setVerbosity as setLogVerbosity };\nsetVerbosity(globalThis.__DEV__ !== false ? \"log\" : \"silent\");\n// Note that importing `gql` by itself, then destructuring\n// additional properties separately before exporting, is intentional.\n// Due to the way the `graphql-tag` library is setup, certain bundlers\n// can't find the properties added to the exported `gql` function without\n// additional guidance (e.g. Rollup - see\n// https://rollupjs.org/guide/en/#error-name-is-not-exported-by-module).\n// Instead of having people that are using bundlers with `@apollo/client` add\n// extra bundler config to help `graphql-tag` exports be found (which would be\n// awkward since they aren't importing `graphql-tag` themselves), this\n// workaround of pulling the extra properties off the `gql` function,\n// then re-exporting them separately, helps keeps bundlers happy without any\n// additional config changes.\nexport { gql, resetCaches, disableFragmentWarnings, enableExperimentalFragmentVariables, disableExperimentalFragmentVariables, } from \"graphql-tag\";\n//# sourceMappingURL=index.js.map",
      "start": 1710864566522,
      "end": 1710864566549,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710864566549,
      "end": 1710864566549,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710864566549,
      "end": 1710864566549,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1710864566549,
      "end": 1710864566549,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710864566549,
      "end": 1710864566549,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710864566549,
      "end": 1710864566549,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710864566549,
      "end": 1710864566549,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710864566549,
      "end": 1710864566549,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710864566549,
      "end": 1710864566549,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710864566549,
      "end": 1710864566549,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710864566549,
      "end": 1710864566549,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710864566549,
      "end": 1710864566549,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710864566549,
      "end": 1710864566549,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710864566549,
      "end": 1710864566549,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1710864566549,
      "end": 1710864566549,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710864566549,
      "end": 1710864566549,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710864566549,
      "end": 1710864566549,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710864566549,
      "end": 1710864566549,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "export { ApolloClient, mergeOptions } from \"./ApolloClient.js\";\nexport { ObservableQuery } from \"./ObservableQuery.js\";\nexport { NetworkStatus, isNetworkRequestSettled } from \"./networkStatus.js\";\nexport * from \"./types.js\";\nexport { isApolloError, ApolloError } from \"../errors/index.js\";\nexport { Cache, ApolloCache, InMemoryCache, MissingFieldError, defaultDataIdFromObject, makeVar } from \"../cache/index.js\";\nexport * from \"../cache/inmemory/types.js\";\nexport * from \"../link/core/index.js\";\nexport * from \"../link/http/index.js\";\nexport { fromError, toPromise, fromPromise, throwServerError } from \"../link/utils/index.js\";\nexport { DocumentTransform, Observable, isReference, makeReference } from \"../utilities/index.js\";\nimport { setVerbosity } from \"ts-invariant\";\nexport { setVerbosity as setLogVerbosity };\nsetVerbosity(globalThis.__DEV__ !== false ? \"log\" : \"silent\");\nexport { gql, resetCaches, disableFragmentWarnings, enableExperimentalFragmentVariables, disableExperimentalFragmentVariables } from \"graphql-tag\";\n",
      "start": 1710864566549,
      "end": 1710864566711,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1710864566711,
      "end": 1710864566711,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710864566711,
      "end": 1710864566711,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710864566711,
      "end": 1710864566711,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710864566711,
      "end": 1710864566711,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710864566711,
      "end": 1710864566711,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710864566711,
      "end": 1710864566711,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710864566711,
      "end": 1710864566711,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710864566711,
      "end": 1710864566711,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710864566711,
      "end": 1710864566711,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710864566711,
      "end": 1710864566711,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710864566711,
      "end": 1710864566711,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710864566711,
      "end": 1710864566711,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710864566711,
      "end": 1710864566711,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710864566711,
      "end": 1710864566711,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710864566711,
      "end": 1710864566711,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710864566711,
      "end": 1710864566711,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710864566711,
      "end": 1710864566711,
      "order": "normal"
    }
  ]
}
