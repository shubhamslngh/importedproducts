{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/graphql/type/scalars.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import isFinite from \"../polyfills/isFinite.mjs\";\nimport isInteger from \"../polyfills/isInteger.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { print } from \"../language/printer.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { GraphQLScalarType } from \"./definition.mjs\"; // As per the GraphQL Spec, Integers are only treated as valid when a valid\n// 32-bit signed integer, providing the broadest support across platforms.\n//\n// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because\n// they are internally represented as IEEE 754 doubles.\n\nvar MAX_INT = 2147483647;\nvar MIN_INT = -2147483648;\n\nfunction serializeInt(outputValue) {\n  var coercedValue = serializeObject(outputValue);\n\n  if (typeof coercedValue === 'boolean') {\n    return coercedValue ? 1 : 0;\n  }\n\n  var num = coercedValue;\n\n  if (typeof coercedValue === 'string' && coercedValue !== '') {\n    num = Number(coercedValue);\n  }\n\n  if (!isInteger(num)) {\n    throw new GraphQLError(\"Int cannot represent non-integer value: \".concat(inspect(coercedValue)));\n  }\n\n  if (num > MAX_INT || num < MIN_INT) {\n    throw new GraphQLError('Int cannot represent non 32-bit signed integer value: ' + inspect(coercedValue));\n  }\n\n  return num;\n}\n\nfunction coerceInt(inputValue) {\n  if (!isInteger(inputValue)) {\n    throw new GraphQLError(\"Int cannot represent non-integer value: \".concat(inspect(inputValue)));\n  }\n\n  if (inputValue > MAX_INT || inputValue < MIN_INT) {\n    throw new GraphQLError(\"Int cannot represent non 32-bit signed integer value: \".concat(inputValue));\n  }\n\n  return inputValue;\n}\n\nexport var GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description: 'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n  serialize: serializeInt,\n  parseValue: coerceInt,\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\"Int cannot represent non-integer value: \".concat(print(valueNode)), valueNode);\n    }\n\n    var num = parseInt(valueNode.value, 10);\n\n    if (num > MAX_INT || num < MIN_INT) {\n      throw new GraphQLError(\"Int cannot represent non 32-bit signed integer value: \".concat(valueNode.value), valueNode);\n    }\n\n    return num;\n  }\n});\n\nfunction serializeFloat(outputValue) {\n  var coercedValue = serializeObject(outputValue);\n\n  if (typeof coercedValue === 'boolean') {\n    return coercedValue ? 1 : 0;\n  }\n\n  var num = coercedValue;\n\n  if (typeof coercedValue === 'string' && coercedValue !== '') {\n    num = Number(coercedValue);\n  }\n\n  if (!isFinite(num)) {\n    throw new GraphQLError(\"Float cannot represent non numeric value: \".concat(inspect(coercedValue)));\n  }\n\n  return num;\n}\n\nfunction coerceFloat(inputValue) {\n  if (!isFinite(inputValue)) {\n    throw new GraphQLError(\"Float cannot represent non numeric value: \".concat(inspect(inputValue)));\n  }\n\n  return inputValue;\n}\n\nexport var GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description: 'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n  serialize: serializeFloat,\n  parseValue: coerceFloat,\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.FLOAT && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\"Float cannot represent non numeric value: \".concat(print(valueNode)), valueNode);\n    }\n\n    return parseFloat(valueNode.value);\n  }\n}); // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\nfunction serializeObject(outputValue) {\n  if (isObjectLike(outputValue)) {\n    if (typeof outputValue.valueOf === 'function') {\n      var valueOfResult = outputValue.valueOf();\n\n      if (!isObjectLike(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof outputValue.toJSON === 'function') {\n      // $FlowFixMe[incompatible-use]\n      return outputValue.toJSON();\n    }\n  }\n\n  return outputValue;\n}\n\nfunction serializeString(outputValue) {\n  var coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not\n  // attempt to coerce object, function, symbol, or other types as strings.\n\n  if (typeof coercedValue === 'string') {\n    return coercedValue;\n  }\n\n  if (typeof coercedValue === 'boolean') {\n    return coercedValue ? 'true' : 'false';\n  }\n\n  if (isFinite(coercedValue)) {\n    return coercedValue.toString();\n  }\n\n  throw new GraphQLError(\"String cannot represent value: \".concat(inspect(outputValue)));\n}\n\nfunction coerceString(inputValue) {\n  if (typeof inputValue !== 'string') {\n    throw new GraphQLError(\"String cannot represent a non string value: \".concat(inspect(inputValue)));\n  }\n\n  return inputValue;\n}\n\nexport var GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description: 'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n  serialize: serializeString,\n  parseValue: coerceString,\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING) {\n      throw new GraphQLError(\"String cannot represent a non string value: \".concat(print(valueNode)), valueNode);\n    }\n\n    return valueNode.value;\n  }\n});\n\nfunction serializeBoolean(outputValue) {\n  var coercedValue = serializeObject(outputValue);\n\n  if (typeof coercedValue === 'boolean') {\n    return coercedValue;\n  }\n\n  if (isFinite(coercedValue)) {\n    return coercedValue !== 0;\n  }\n\n  throw new GraphQLError(\"Boolean cannot represent a non boolean value: \".concat(inspect(coercedValue)));\n}\n\nfunction coerceBoolean(inputValue) {\n  if (typeof inputValue !== 'boolean') {\n    throw new GraphQLError(\"Boolean cannot represent a non boolean value: \".concat(inspect(inputValue)));\n  }\n\n  return inputValue;\n}\n\nexport var GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n  serialize: serializeBoolean,\n  parseValue: coerceBoolean,\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.BOOLEAN) {\n      throw new GraphQLError(\"Boolean cannot represent a non boolean value: \".concat(print(valueNode)), valueNode);\n    }\n\n    return valueNode.value;\n  }\n});\n\nfunction serializeID(outputValue) {\n  var coercedValue = serializeObject(outputValue);\n\n  if (typeof coercedValue === 'string') {\n    return coercedValue;\n  }\n\n  if (isInteger(coercedValue)) {\n    return String(coercedValue);\n  }\n\n  throw new GraphQLError(\"ID cannot represent value: \".concat(inspect(outputValue)));\n}\n\nfunction coerceID(inputValue) {\n  if (typeof inputValue === 'string') {\n    return inputValue;\n  }\n\n  if (isInteger(inputValue)) {\n    return inputValue.toString();\n  }\n\n  throw new GraphQLError(\"ID cannot represent value: \".concat(inspect(inputValue)));\n}\n\nexport var GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n  serialize: serializeID,\n  parseValue: coerceID,\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError('ID cannot represent a non-string and non-integer value: ' + print(valueNode), valueNode);\n    }\n\n    return valueNode.value;\n  }\n});\nexport var specifiedScalarTypes = Object.freeze([GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID]);\nexport function isSpecifiedScalarType(type) {\n  return specifiedScalarTypes.some(function (_ref) {\n    var name = _ref.name;\n    return type.name === name;\n  });\n}\n",
      "start": 1716330189347,
      "end": 1716330189372,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    }
  ]
}
