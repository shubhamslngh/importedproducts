{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@nuxtjs/apollo/node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { naturalCompare } from '../../jsutils/naturalCompare.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isAbstractType,\n  isInterfaceType,\n  isObjectType,\n} from '../../type/definition.mjs';\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selections\n */\nexport function FieldsOnCorrectTypeRule(context) {\n  return {\n    Field(node) {\n      const type = context.getParentType();\n\n      if (type) {\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          const schema = context.getSchema();\n          const fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          let suggestion = didYouMean(\n            'to use an inline fragment on',\n            getSuggestedTypeNames(schema, type, fieldName),\n          ); // If there are no suggested types, then perhaps this was a typo?\n\n          if (suggestion === '') {\n            suggestion = didYouMean(getSuggestedFieldNames(type, fieldName));\n          } // Report an error, including helpful suggestions.\n\n          context.reportError(\n            new GraphQLError(\n              `Cannot query field \"${fieldName}\" on type \"${type.name}\".` +\n                suggestion,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest them,\n * sorted by how often the type is referenced.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (!isAbstractType(type)) {\n    // Must be an Object type, which does not have possible fields.\n    return [];\n  }\n\n  const suggestedTypes = new Set();\n  const usageCount = Object.create(null);\n\n  for (const possibleType of schema.getPossibleTypes(type)) {\n    if (!possibleType.getFields()[fieldName]) {\n      continue;\n    } // This object type defines this field.\n\n    suggestedTypes.add(possibleType);\n    usageCount[possibleType.name] = 1;\n\n    for (const possibleInterface of possibleType.getInterfaces()) {\n      var _usageCount$possibleI;\n\n      if (!possibleInterface.getFields()[fieldName]) {\n        continue;\n      } // This interface type defines this field.\n\n      suggestedTypes.add(possibleInterface);\n      usageCount[possibleInterface.name] =\n        ((_usageCount$possibleI = usageCount[possibleInterface.name]) !==\n          null && _usageCount$possibleI !== void 0\n          ? _usageCount$possibleI\n          : 0) + 1;\n    }\n  }\n\n  return [...suggestedTypes]\n    .sort((typeA, typeB) => {\n      // Suggest both interface and object types based on how common they are.\n      const usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];\n\n      if (usageCountDiff !== 0) {\n        return usageCountDiff;\n      } // Suggest super types first followed by subtypes\n\n      if (isInterfaceType(typeA) && schema.isSubType(typeA, typeB)) {\n        return -1;\n      }\n\n      if (isInterfaceType(typeB) && schema.isSubType(typeB, typeA)) {\n        return 1;\n      }\n\n      return naturalCompare(typeA.name, typeB.name);\n    })\n    .map((x) => x.name);\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\nfunction getSuggestedFieldNames(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type)) {\n    const possibleFieldNames = Object.keys(type.getFields());\n    return suggestionList(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n  return [];\n}\n",
      "start": 1746507067702,
      "end": 1746507067736,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746507067736,
      "end": 1746507067736,
      "order": "normal"
    }
  ]
}
