{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/graphql/type/directives.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport objectEntries from \"../polyfills/objectEntries.mjs\";\nimport { SYMBOL_TO_STRING_TAG } from \"../polyfills/symbols.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport toObjMap from \"../jsutils/toObjMap.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport instanceOf from \"../jsutils/instanceOf.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport defineInspect from \"../jsutils/defineInspect.mjs\";\nimport { DirectiveLocation } from \"../language/directiveLocation.mjs\";\nimport { GraphQLString, GraphQLBoolean } from \"./scalars.mjs\";\nimport { argsToArgsConfig, GraphQLNonNull } from \"./definition.mjs\";\n/**\n * Test if the given value is a GraphQL directive.\n */\n\n// eslint-disable-next-line no-redeclare\nexport function isDirective(directive) {\n  return instanceOf(directive, GraphQLDirective);\n}\nexport function assertDirective(directive) {\n  if (!isDirective(directive)) {\n    throw new Error(\"Expected \".concat(inspect(directive), \" to be a GraphQL directive.\"));\n  }\n\n  return directive;\n}\n/**\n * Directives are used by the GraphQL runtime as a way of modifying execution\n * behavior. Type system creators will usually not create these directly.\n */\n\nexport var GraphQLDirective = /*#__PURE__*/function () {\n  function GraphQLDirective(config) {\n    var _config$isRepeatable, _config$args;\n\n    this.name = config.name;\n    this.description = config.description;\n    this.locations = config.locations;\n    this.isRepeatable = (_config$isRepeatable = config.isRepeatable) !== null && _config$isRepeatable !== void 0 ? _config$isRepeatable : false;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    config.name || devAssert(0, 'Directive must be named.');\n    Array.isArray(config.locations) || devAssert(0, \"@\".concat(config.name, \" locations must be an Array.\"));\n    var args = (_config$args = config.args) !== null && _config$args !== void 0 ? _config$args : {};\n    isObjectLike(args) && !Array.isArray(args) || devAssert(0, \"@\".concat(config.name, \" args must be an object with argument names as keys.\"));\n    this.args = objectEntries(args).map(function (_ref) {\n      var argName = _ref[0],\n          argConfig = _ref[1];\n      return {\n        name: argName,\n        description: argConfig.description,\n        type: argConfig.type,\n        defaultValue: argConfig.defaultValue,\n        deprecationReason: argConfig.deprecationReason,\n        extensions: argConfig.extensions && toObjMap(argConfig.extensions),\n        astNode: argConfig.astNode\n      };\n    });\n  }\n\n  var _proto = GraphQLDirective.prototype;\n\n  _proto.toConfig = function toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      locations: this.locations,\n      args: argsToArgsConfig(this.args),\n      isRepeatable: this.isRepeatable,\n      extensions: this.extensions,\n      astNode: this.astNode\n    };\n  };\n\n  _proto.toString = function toString() {\n    return '@' + this.name;\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet\n  ;\n\n  _createClass(GraphQLDirective, [{\n    key: SYMBOL_TO_STRING_TAG,\n    get: function get() {\n      return 'GraphQLDirective';\n    }\n  }]);\n\n  return GraphQLDirective;\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\n\ndefineInspect(GraphQLDirective);\n\n/**\n * Used to conditionally include fields or fragments.\n */\nexport var GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description: 'Directs the executor to include this field or fragment only when the `if` argument is true.',\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Included when true.'\n    }\n  }\n});\n/**\n * Used to conditionally skip (exclude) fields or fragments.\n */\n\nexport var GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description: 'Directs the executor to skip this field or fragment when the `if` argument is true.',\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Skipped when true.'\n    }\n  }\n});\n/**\n * Constant string used for default reason for a deprecation.\n */\n\nexport var DEFAULT_DEPRECATION_REASON = 'No longer supported';\n/**\n * Used to declare element of a GraphQL schema as deprecated.\n */\n\nexport var GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [DirectiveLocation.FIELD_DEFINITION, DirectiveLocation.ARGUMENT_DEFINITION, DirectiveLocation.INPUT_FIELD_DEFINITION, DirectiveLocation.ENUM_VALUE],\n  args: {\n    reason: {\n      type: GraphQLString,\n      description: 'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON\n    }\n  }\n});\n/**\n * Used to provide a URL for specifying the behaviour of custom scalar definitions.\n */\n\nexport var GraphQLSpecifiedByDirective = new GraphQLDirective({\n  name: 'specifiedBy',\n  description: 'Exposes a URL that specifies the behaviour of this scalar.',\n  locations: [DirectiveLocation.SCALAR],\n  args: {\n    url: {\n      type: new GraphQLNonNull(GraphQLString),\n      description: 'The URL that specifies the behaviour of this scalar.'\n    }\n  }\n});\n/**\n * The full list of specified directives.\n */\n\nexport var specifiedDirectives = Object.freeze([GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLSpecifiedByDirective]);\nexport function isSpecifiedDirective(directive) {\n  return specifiedDirectives.some(function (_ref2) {\n    var name = _ref2.name;\n    return name === directive.name;\n  });\n}\n",
      "start": 1716330189346,
      "end": 1716330189372,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1716330189372,
      "end": 1716330189372,
      "order": "normal"
    }
  ]
}
