{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@apollo/client/utilities/graphql/directives.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { invariant } from \"../globals/index.js\";\nimport { visit, BREAK } from \"graphql\";\nexport function shouldInclude(_a, variables) {\n    var directives = _a.directives;\n    if (!directives || !directives.length) {\n        return true;\n    }\n    return getInclusionDirectives(directives).every(function (_a) {\n        var directive = _a.directive, ifArgument = _a.ifArgument;\n        var evaledValue = false;\n        if (ifArgument.value.kind === \"Variable\") {\n            evaledValue =\n                variables && variables[ifArgument.value.name.value];\n            invariant(evaledValue !== void 0, 67, directive.name.value);\n        }\n        else {\n            evaledValue = ifArgument.value.value;\n        }\n        return directive.name.value === \"skip\" ? !evaledValue : evaledValue;\n    });\n}\nexport function getDirectiveNames(root) {\n    var names = [];\n    visit(root, {\n        Directive: function (node) {\n            names.push(node.name.value);\n        },\n    });\n    return names;\n}\nexport var hasAnyDirectives = function (names, root) {\n    return hasDirectives(names, root, false);\n};\nexport var hasAllDirectives = function (names, root) {\n    return hasDirectives(names, root, true);\n};\nexport function hasDirectives(names, root, all) {\n    var nameSet = new Set(names);\n    var uniqueCount = nameSet.size;\n    visit(root, {\n        Directive: function (node) {\n            if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {\n                return BREAK;\n            }\n        },\n    });\n    // If we found all the names, nameSet will be empty. If we only care about\n    // finding some of them, the < condition is sufficient.\n    return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\nexport function hasClientExports(document) {\n    return document && hasDirectives([\"client\", \"export\"], document, true);\n}\nfunction isInclusionDirective(_a) {\n    var value = _a.name.value;\n    return value === \"skip\" || value === \"include\";\n}\nexport function getInclusionDirectives(directives) {\n    var result = [];\n    if (directives && directives.length) {\n        directives.forEach(function (directive) {\n            if (!isInclusionDirective(directive))\n                return;\n            var directiveArguments = directive.arguments;\n            var directiveName = directive.name.value;\n            invariant(directiveArguments && directiveArguments.length === 1, 68, directiveName);\n            var ifArgument = directiveArguments[0];\n            invariant(ifArgument.name && ifArgument.name.value === \"if\", 69, directiveName);\n            var ifValue = ifArgument.value;\n            // means it has to be a variable value if this is a valid @skip or @include directive\n            invariant(ifValue &&\n                (ifValue.kind === \"Variable\" || ifValue.kind === \"BooleanValue\"), 70, directiveName);\n            result.push({ directive: directive, ifArgument: ifArgument });\n        });\n    }\n    return result;\n}\n//# sourceMappingURL=directives.js.map",
      "start": 1716304639369,
      "end": 1716304639385,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1716304639385,
      "end": 1716304639385,
      "order": "normal"
    }
  ]
}
