{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@nuxtjs/apollo/node_modules/graphql/utilities/coerceInputValue.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { didYouMean } from '../jsutils/didYouMean.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport {\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\n\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\nexport function coerceInputValue(inputValue, type, onError = defaultOnError) {\n  return coerceInputValueImpl(inputValue, type, onError, undefined);\n}\n\nfunction defaultOnError(path, invalidValue, error) {\n  let errorPrefix = 'Invalid value ' + inspect(invalidValue);\n\n  if (path.length > 0) {\n    errorPrefix += ` at \"value${printPathArray(path)}\"`;\n  }\n\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\n\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if (isNonNullType(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n\n    onError(\n      pathToArray(path),\n      inputValue,\n      new GraphQLError(\n        `Expected non-nullable type \"${inspect(type)}\" not to be null.`,\n      ),\n    );\n    return;\n  }\n\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (isIterableObject(inputValue)) {\n      return Array.from(inputValue, (itemValue, index) => {\n        const itemPath = addPath(path, index, undefined);\n        return coerceInputValueImpl(itemValue, itemType, onError, itemPath);\n      });\n    } // Lists accept a non-list value as a list of one.\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(inputValue)) {\n      onError(\n        pathToArray(path),\n        inputValue,\n        new GraphQLError(`Expected type \"${type.name}\" to be an object.`),\n      );\n      return;\n    }\n\n    const coercedValue = {};\n    const fieldDefs = type.getFields();\n\n    for (const field of Object.values(fieldDefs)) {\n      const fieldValue = inputValue[field.name];\n\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          coercedValue[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          const typeStr = inspect(field.type);\n          onError(\n            pathToArray(path),\n            inputValue,\n            new GraphQLError(\n              `Field \"${field.name}\" of required type \"${typeStr}\" was not provided.`,\n            ),\n          );\n        }\n\n        continue;\n      }\n\n      coercedValue[field.name] = coerceInputValueImpl(\n        fieldValue,\n        field.type,\n        onError,\n        addPath(path, field.name, type.name),\n      );\n    } // Ensure every provided field is defined.\n\n    for (const fieldName of Object.keys(inputValue)) {\n      if (!fieldDefs[fieldName]) {\n        const suggestions = suggestionList(\n          fieldName,\n          Object.keys(type.getFields()),\n        );\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(\n            `Field \"${fieldName}\" is not defined by type \"${type.name}\".` +\n              didYouMean(suggestions),\n          ),\n        );\n      }\n    }\n\n    return coercedValue;\n  }\n\n  if (isLeafType(type)) {\n    let parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),\n    // which can throw to indicate failure. If it throws, maintain a reference\n    // to the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      if (error instanceof GraphQLError) {\n        onError(pathToArray(path), inputValue, error);\n      } else {\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(`Expected type \"${type.name}\". ` + error.message, {\n            originalError: error,\n          }),\n        );\n      }\n\n      return;\n    }\n\n    if (parseResult === undefined) {\n      onError(\n        pathToArray(path),\n        inputValue,\n        new GraphQLError(`Expected type \"${type.name}\".`),\n      );\n    }\n\n    return parseResult;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n",
      "start": 1710863481316,
      "end": 1710863481344,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710863481344,
      "end": 1710863481344,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710863481344,
      "end": 1710863481344,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1710863481344,
      "end": 1710863481344,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710863481344,
      "end": 1710863481344,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710863481344,
      "end": 1710863481344,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710863481344,
      "end": 1710863481344,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710863481344,
      "end": 1710863481344,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710863481344,
      "end": 1710863481344,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710863481344,
      "end": 1710863481344,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710863481344,
      "end": 1710863481344,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710863481344,
      "end": 1710863481344,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710863481344,
      "end": 1710863481344,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710863481344,
      "end": 1710863481344,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1710863481344,
      "end": 1710863481344,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710863481344,
      "end": 1710863481345,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710863481345,
      "end": 1710863481345,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710863481345,
      "end": 1710863481345,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1710863481345,
      "end": 1710863481345,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1710863481345,
      "end": 1710863481345,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710863481345,
      "end": 1710863481345,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710863481345,
      "end": 1710863481345,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710863481345,
      "end": 1710863481345,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710863481345,
      "end": 1710863481345,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710863481345,
      "end": 1710863481345,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710863481345,
      "end": 1710863481345,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710863481345,
      "end": 1710863481345,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710863481345,
      "end": 1710863481345,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710863481345,
      "end": 1710863481345,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710863481345,
      "end": 1710863481345,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710863481345,
      "end": 1710863481345,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710863481345,
      "end": 1710863481345,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710863481345,
      "end": 1710863481345,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710863481345,
      "end": 1710863481345,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710863481345,
      "end": 1710863481345,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710863481345,
      "end": 1710863481345,
      "order": "normal"
    }
  ]
}
