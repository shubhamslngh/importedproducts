{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/pinia-plugin-persistedstate/dist/index.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "// src/normalize.ts\nfunction isObject(v) {\n  return typeof v === \"object\" && v !== null;\n}\nfunction normalizeOptions(options, factoryOptions) {\n  options = isObject(options) ? options : /* @__PURE__ */ Object.create(null);\n  return new Proxy(options, {\n    get(target, key, receiver) {\n      if (key === \"key\")\n        return Reflect.get(target, key, receiver);\n      return Reflect.get(target, key, receiver) || Reflect.get(factoryOptions, key, receiver);\n    }\n  });\n}\n\n// src/pick.ts\nfunction get(state, path) {\n  return path.reduce((obj, p) => {\n    return obj == null ? void 0 : obj[p];\n  }, state);\n}\nfunction set(state, path, val) {\n  return path.slice(0, -1).reduce((obj, p) => {\n    if (/^(__proto__)$/.test(p))\n      return {};\n    else\n      return obj[p] = obj[p] || {};\n  }, state)[path[path.length - 1]] = val, state;\n}\nfunction pick(baseState, paths) {\n  return paths.reduce((substate, path) => {\n    const pathArray = path.split(\".\");\n    return set(substate, pathArray, get(baseState, pathArray));\n  }, {});\n}\n\n// src/plugin.ts\nfunction parsePersistence(factoryOptions, store) {\n  return (o) => {\n    var _a;\n    try {\n      const {\n        storage = localStorage,\n        beforeRestore = void 0,\n        afterRestore = void 0,\n        serializer = {\n          serialize: JSON.stringify,\n          deserialize: JSON.parse\n        },\n        key = store.$id,\n        paths = null,\n        debug = false\n      } = o;\n      return {\n        storage,\n        beforeRestore,\n        afterRestore,\n        serializer,\n        key: ((_a = factoryOptions.key) != null ? _a : (k) => k)(typeof key == \"string\" ? key : key(store.$id)),\n        paths,\n        debug\n      };\n    } catch (e) {\n      if (o.debug)\n        console.error(\"[pinia-plugin-persistedstate]\", e);\n      return null;\n    }\n  };\n}\nfunction hydrateStore(store, { storage, serializer, key, debug }) {\n  try {\n    const fromStorage = storage == null ? void 0 : storage.getItem(key);\n    if (fromStorage)\n      store.$patch(serializer == null ? void 0 : serializer.deserialize(fromStorage));\n  } catch (e) {\n    if (debug)\n      console.error(\"[pinia-plugin-persistedstate]\", e);\n  }\n}\nfunction persistState(state, { storage, serializer, key, paths, debug }) {\n  try {\n    const toStore = Array.isArray(paths) ? pick(state, paths) : state;\n    storage.setItem(key, serializer.serialize(toStore));\n  } catch (e) {\n    if (debug)\n      console.error(\"[pinia-plugin-persistedstate]\", e);\n  }\n}\nfunction createPersistedState(factoryOptions = {}) {\n  return (context) => {\n    const { auto = false } = factoryOptions;\n    const {\n      options: { persist = auto },\n      store,\n      pinia\n    } = context;\n    if (!persist)\n      return;\n    if (!(store.$id in pinia.state.value)) {\n      const original_store = pinia._s.get(store.$id.replace(\"__hot:\", \"\"));\n      if (original_store)\n        Promise.resolve().then(() => original_store.$persist());\n      return;\n    }\n    const persistences = (Array.isArray(persist) ? persist.map((p) => normalizeOptions(p, factoryOptions)) : [normalizeOptions(persist, factoryOptions)]).map(parsePersistence(factoryOptions, store)).filter(Boolean);\n    store.$persist = () => {\n      persistences.forEach((persistence) => {\n        persistState(store.$state, persistence);\n      });\n    };\n    store.$hydrate = ({ runHooks = true } = {}) => {\n      persistences.forEach((persistence) => {\n        const { beforeRestore, afterRestore } = persistence;\n        if (runHooks)\n          beforeRestore == null ? void 0 : beforeRestore(context);\n        hydrateStore(store, persistence);\n        if (runHooks)\n          afterRestore == null ? void 0 : afterRestore(context);\n      });\n    };\n    persistences.forEach((persistence) => {\n      const { beforeRestore, afterRestore } = persistence;\n      beforeRestore == null ? void 0 : beforeRestore(context);\n      hydrateStore(store, persistence);\n      afterRestore == null ? void 0 : afterRestore(context);\n      store.$subscribe(\n        (_mutation, state) => {\n          persistState(state, persistence);\n        },\n        {\n          detached: true\n        }\n      );\n    });\n  };\n}\n\n// src/index.ts\nvar src_default = createPersistedState();\nexport {\n  createPersistedState,\n  src_default as default\n};\n",
      "start": 1710863480585,
      "end": 1710863480608,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710863480608,
      "end": 1710863480608,
      "order": "normal"
    }
  ]
}
