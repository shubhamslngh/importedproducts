{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@apollo/client/react/hooks/useLazyQuery.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { __assign } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { useInternalState } from \"./useQuery.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nvar EAGER_METHODS = [\n    \"refetch\",\n    \"reobserve\",\n    \"fetchMore\",\n    \"updateQuery\",\n    \"startPolling\",\n    \"subscribeToMore\",\n];\n/**\n * A hook for imperatively executing queries in an Apollo application, e.g. in response to user interaction.\n *\n * > Refer to the [Queries - Manual execution with useLazyQuery](https://www.apollographql.com/docs/react/data/queries#manual-execution-with-uselazyquery) section for a more in-depth overview of `useLazyQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useLazyQuery } from \"@apollo/client\";\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const [loadGreeting, { called, loading, data }] = useLazyQuery(\n *     GET_GREETING,\n *     { variables: { language: \"english\" } }\n *   );\n *   if (called && loading) return <p>Loading ...</p>\n *   if (!called) {\n *     return <button onClick={() => loadGreeting()}>Load greeting</button>\n *   }\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n *\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Default options to control how the query is executed.\n * @returns A tuple in the form of `[execute, result]`\n */\nexport function useLazyQuery(query, options) {\n    var _a;\n    var execOptionsRef = React.useRef();\n    var optionsRef = React.useRef();\n    var queryRef = React.useRef();\n    var merged = mergeOptions(options, execOptionsRef.current || {});\n    var document = (_a = merged === null || merged === void 0 ? void 0 : merged.query) !== null && _a !== void 0 ? _a : query;\n    // Use refs to track options and the used query to ensure the `execute`\n    // function remains referentially stable between renders.\n    optionsRef.current = options;\n    queryRef.current = document;\n    var internalState = useInternalState(useApolloClient(options && options.client), document);\n    var useQueryResult = internalState.useQuery(__assign(__assign({}, merged), { skip: !execOptionsRef.current }));\n    var initialFetchPolicy = useQueryResult.observable.options.initialFetchPolicy ||\n        internalState.getDefaultFetchPolicy();\n    var result = Object.assign(useQueryResult, {\n        called: !!execOptionsRef.current,\n    });\n    // We use useMemo here to make sure the eager methods have a stable identity.\n    var eagerMethods = React.useMemo(function () {\n        var eagerMethods = {};\n        var _loop_1 = function (key) {\n            var method = result[key];\n            eagerMethods[key] = function () {\n                if (!execOptionsRef.current) {\n                    execOptionsRef.current = Object.create(null);\n                    // Only the first time populating execOptionsRef.current matters here.\n                    internalState.forceUpdateState();\n                }\n                // @ts-expect-error this is just too generic to type\n                return method.apply(this, arguments);\n            };\n        };\n        for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n            var key = EAGER_METHODS_1[_i];\n            _loop_1(key);\n        }\n        return eagerMethods;\n    }, []);\n    Object.assign(result, eagerMethods);\n    var execute = React.useCallback(function (executeOptions) {\n        execOptionsRef.current =\n            executeOptions ? __assign(__assign({}, executeOptions), { fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy }) : {\n                fetchPolicy: initialFetchPolicy,\n            };\n        var options = mergeOptions(optionsRef.current, __assign({ query: queryRef.current }, execOptionsRef.current));\n        var promise = internalState\n            .executeQuery(__assign(__assign({}, options), { skip: false }))\n            .then(function (queryResult) { return Object.assign(queryResult, eagerMethods); });\n        // Because the return value of `useLazyQuery` is usually floated, we need\n        // to catch the promise to prevent unhandled rejections.\n        promise.catch(function () { });\n        return promise;\n    }, []);\n    return [execute, result];\n}\n//# sourceMappingURL=useLazyQuery.js.map",
      "start": 1716304642815,
      "end": 1716304642827,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716304642827,
      "end": 1716304642827,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716304642827,
      "end": 1716304642827,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716304642827,
      "end": 1716304642827,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716304642827,
      "end": 1716304642827,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1716304642827,
      "end": 1716304642827,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1716304642827,
      "end": 1716304642827,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1716304642827,
      "end": 1716304642827,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1716304642827,
      "end": 1716304642827,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1716304642827,
      "end": 1716304642827,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1716304642827,
      "end": 1716304642827,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1716304642827,
      "end": 1716304642827,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1716304642827,
      "end": 1716304642827,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1716304642827,
      "end": 1716304642827,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716304642827,
      "end": 1716304642827,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716304642827,
      "end": 1716304642827,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716304642827,
      "end": 1716304642827,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716304642827,
      "end": 1716304642827,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1716304642838,
      "end": 1716304642838,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1716304642838,
      "end": 1716304642838,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716304642838,
      "end": 1716304642838,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1716304642838,
      "end": 1716304642839,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { __assign } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { useInternalState } from \"./useQuery.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nvar EAGER_METHODS = [\n  \"refetch\",\n  \"reobserve\",\n  \"fetchMore\",\n  \"updateQuery\",\n  \"startPolling\",\n  \"subscribeToMore\"\n];\nexport function useLazyQuery(query, options) {\n  var _a;\n  var execOptionsRef = React.useRef();\n  var optionsRef = React.useRef();\n  var queryRef = React.useRef();\n  var merged = mergeOptions(options, execOptionsRef.current || {});\n  var document = (_a = merged === null || merged === void 0 ? void 0 : merged.query) !== null && _a !== void 0 ? _a : query;\n  optionsRef.current = options;\n  queryRef.current = document;\n  var internalState = useInternalState(useApolloClient(options && options.client), document);\n  var useQueryResult = internalState.useQuery(__assign(__assign({}, merged), { skip: !execOptionsRef.current }));\n  var initialFetchPolicy = useQueryResult.observable.options.initialFetchPolicy || internalState.getDefaultFetchPolicy();\n  var result = Object.assign(useQueryResult, {\n    called: !!execOptionsRef.current\n  });\n  var eagerMethods = React.useMemo(function() {\n    var eagerMethods2 = {};\n    var _loop_1 = function(key2) {\n      var method = result[key2];\n      eagerMethods2[key2] = function() {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = /* @__PURE__ */ Object.create(null);\n          internalState.forceUpdateState();\n        }\n        return method.apply(this, arguments);\n      };\n    };\n    for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n      var key = EAGER_METHODS_1[_i];\n      _loop_1(key);\n    }\n    return eagerMethods2;\n  }, []);\n  Object.assign(result, eagerMethods);\n  var execute = React.useCallback(function(executeOptions) {\n    execOptionsRef.current = executeOptions ? __assign(__assign({}, executeOptions), { fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy }) : {\n      fetchPolicy: initialFetchPolicy\n    };\n    var options2 = mergeOptions(optionsRef.current, __assign({ query: queryRef.current }, execOptionsRef.current));\n    var promise = internalState.executeQuery(__assign(__assign({}, options2), { skip: false })).then(function(queryResult) {\n      return Object.assign(queryResult, eagerMethods);\n    });\n    promise.catch(function() {\n    });\n    return promise;\n  }, []);\n  return [execute, result];\n}\n",
      "start": 1716304642839,
      "end": 1716304643222,
      "order": "normal",
      "sourcemaps": "{\n  \"version\": 3,\n  \"sources\": [\"/Users/shubhamsingh/namma/importedProds/node_modules/@apollo/client/react/hooks/useLazyQuery.js\"],\n  \"sourcesContent\": [\"import { __assign } from \\\"tslib\\\";\\nimport * as React from \\\"rehackt\\\";\\nimport { mergeOptions } from \\\"../../utilities/index.js\\\";\\nimport { useInternalState } from \\\"./useQuery.js\\\";\\nimport { useApolloClient } from \\\"./useApolloClient.js\\\";\\n// The following methods, when called will execute the query, regardless of\\n// whether the useLazyQuery execute function was called before.\\nvar EAGER_METHODS = [\\n    \\\"refetch\\\",\\n    \\\"reobserve\\\",\\n    \\\"fetchMore\\\",\\n    \\\"updateQuery\\\",\\n    \\\"startPolling\\\",\\n    \\\"subscribeToMore\\\",\\n];\\n/**\\n * A hook for imperatively executing queries in an Apollo application, e.g. in response to user interaction.\\n *\\n * > Refer to the [Queries - Manual execution with useLazyQuery](https://www.apollographql.com/docs/react/data/queries#manual-execution-with-uselazyquery) section for a more in-depth overview of `useLazyQuery`.\\n *\\n * @example\\n * ```jsx\\n * import { gql, useLazyQuery } from \\\"@apollo/client\\\";\\n *\\n * const GET_GREETING = gql`\\n *   query GetGreeting($language: String!) {\\n *     greeting(language: $language) {\\n *       message\\n *     }\\n *   }\\n * `;\\n *\\n * function Hello() {\\n *   const [loadGreeting, { called, loading, data }] = useLazyQuery(\\n *     GET_GREETING,\\n *     { variables: { language: \\\"english\\\" } }\\n *   );\\n *   if (called && loading) return <p>Loading ...</p>\\n *   if (!called) {\\n *     return <button onClick={() => loadGreeting()}>Load greeting</button>\\n *   }\\n *   return <h1>Hello {data.greeting.message}!</h1>;\\n * }\\n * ```\\n * @since 3.0.0\\n *\\n * @param query - A GraphQL query document parsed into an AST by `gql`.\\n * @param options - Default options to control how the query is executed.\\n * @returns A tuple in the form of `[execute, result]`\\n */\\nexport function useLazyQuery(query, options) {\\n    var _a;\\n    var execOptionsRef = React.useRef();\\n    var optionsRef = React.useRef();\\n    var queryRef = React.useRef();\\n    var merged = mergeOptions(options, execOptionsRef.current || {});\\n    var document = (_a = merged === null || merged === void 0 ? void 0 : merged.query) !== null && _a !== void 0 ? _a : query;\\n    // Use refs to track options and the used query to ensure the `execute`\\n    // function remains referentially stable between renders.\\n    optionsRef.current = options;\\n    queryRef.current = document;\\n    var internalState = useInternalState(useApolloClient(options && options.client), document);\\n    var useQueryResult = internalState.useQuery(__assign(__assign({}, merged), { skip: !execOptionsRef.current }));\\n    var initialFetchPolicy = useQueryResult.observable.options.initialFetchPolicy ||\\n        internalState.getDefaultFetchPolicy();\\n    var result = Object.assign(useQueryResult, {\\n        called: !!execOptionsRef.current,\\n    });\\n    // We use useMemo here to make sure the eager methods have a stable identity.\\n    var eagerMethods = React.useMemo(function () {\\n        var eagerMethods = {};\\n        var _loop_1 = function (key) {\\n            var method = result[key];\\n            eagerMethods[key] = function () {\\n                if (!execOptionsRef.current) {\\n                    execOptionsRef.current = Object.create(null);\\n                    // Only the first time populating execOptionsRef.current matters here.\\n                    internalState.forceUpdateState();\\n                }\\n                // @ts-expect-error this is just too generic to type\\n                return method.apply(this, arguments);\\n            };\\n        };\\n        for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\\n            var key = EAGER_METHODS_1[_i];\\n            _loop_1(key);\\n        }\\n        return eagerMethods;\\n    }, []);\\n    Object.assign(result, eagerMethods);\\n    var execute = React.useCallback(function (executeOptions) {\\n        execOptionsRef.current =\\n            executeOptions ? __assign(__assign({}, executeOptions), { fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy }) : {\\n                fetchPolicy: initialFetchPolicy,\\n            };\\n        var options = mergeOptions(optionsRef.current, __assign({ query: queryRef.current }, execOptionsRef.current));\\n        var promise = internalState\\n            .executeQuery(__assign(__assign({}, options), { skip: false }))\\n            .then(function (queryResult) { return Object.assign(queryResult, eagerMethods); });\\n        // Because the return value of `useLazyQuery` is usually floated, we need\\n        // to catch the promise to prevent unhandled rejections.\\n        promise.catch(function () { });\\n        return promise;\\n    }, []);\\n    return [execute, result];\\n}\\n//# sourceMappingURL=useLazyQuery.js.map\"],\n  \"mappings\": \"AAAA,SAAS,gBAAgB;AACzB,YAAY,WAAW;AACvB,SAAS,oBAAoB;AAC7B,SAAS,wBAAwB;AACjC,SAAS,uBAAuB;AAGhC,IAAI,gBAAgB;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AAoCO,gBAAS,aAAa,OAAO,SAAS;AACzC,MAAI;AACJ,MAAI,iBAAiB,MAAM,OAAO;AAClC,MAAI,aAAa,MAAM,OAAO;AAC9B,MAAI,WAAW,MAAM,OAAO;AAC5B,MAAI,SAAS,aAAa,SAAS,eAAe,WAAW,CAAC,CAAC;AAC/D,MAAI,YAAY,KAAK,WAAW,QAAQ,WAAW,SAAS,SAAS,OAAO,WAAW,QAAQ,OAAO,SAAS,KAAK;AAGpH,aAAW,UAAU;AACrB,WAAS,UAAU;AACnB,MAAI,gBAAgB,iBAAiB,gBAAgB,WAAW,QAAQ,MAAM,GAAG,QAAQ;AACzF,MAAI,iBAAiB,cAAc,SAAS,SAAS,SAAS,CAAC,GAAG,MAAM,GAAG,EAAE,MAAM,CAAC,eAAe,QAAQ,CAAC,CAAC;AAC7G,MAAI,qBAAqB,eAAe,WAAW,QAAQ,sBACvD,cAAc,sBAAsB;AACxC,MAAI,SAAS,OAAO,OAAO,gBAAgB;AAAA,IACvC,QAAQ,CAAC,CAAC,eAAe;AAAA,EAC7B,CAAC;AAED,MAAI,eAAe,MAAM,QAAQ,WAAY;AACzC,QAAIA,gBAAe,CAAC;AACpB,QAAI,UAAU,SAAUC,MAAK;AACzB,UAAI,SAAS,OAAOA,IAAG;AACvB,MAAAD,cAAaC,IAAG,IAAI,WAAY;AAC5B,YAAI,CAAC,eAAe,SAAS;AACzB,yBAAe,UAAU,uBAAO,OAAO,IAAI;AAE3C,wBAAc,iBAAiB;AAAA,QACnC;AAEA,eAAO,OAAO,MAAM,MAAM,SAAS;AAAA,MACvC;AAAA,IACJ;AACA,aAAS,KAAK,GAAG,kBAAkB,eAAe,KAAK,gBAAgB,QAAQ,MAAM;AACjF,UAAI,MAAM,gBAAgB,EAAE;AAC5B,cAAQ,GAAG;AAAA,IACf;AACA,WAAOD;AAAA,EACX,GAAG,CAAC,CAAC;AACL,SAAO,OAAO,QAAQ,YAAY;AAClC,MAAI,UAAU,MAAM,YAAY,SAAU,gBAAgB;AACtD,mBAAe,UACX,iBAAiB,SAAS,SAAS,CAAC,GAAG,cAAc,GAAG,EAAE,aAAa,eAAe,eAAe,mBAAmB,CAAC,IAAI;AAAA,MACzH,aAAa;AAAA,IACjB;AACJ,QAAIE,WAAU,aAAa,WAAW,SAAS,SAAS,EAAE,OAAO,SAAS,QAAQ,GAAG,eAAe,OAAO,CAAC;AAC5G,QAAI,UAAU,cACT,aAAa,SAAS,SAAS,CAAC,GAAGA,QAAO,GAAG,EAAE,MAAM,MAAM,CAAC,CAAC,EAC7D,KAAK,SAAU,aAAa;AAAE,aAAO,OAAO,OAAO,aAAa,YAAY;AAAA,IAAG,CAAC;AAGrF,YAAQ,MAAM,WAAY;AAAA,IAAE,CAAC;AAC7B,WAAO;AAAA,EACX,GAAG,CAAC,CAAC;AACL,SAAO,CAAC,SAAS,MAAM;AAC3B;\",\n  \"names\": [\"eagerMethods\", \"key\", \"options\"]\n}\n"
    },
    {
      "name": "vite:css-post",
      "start": 1716304643222,
      "end": 1716304643222,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1716304643222,
      "end": 1716304643222,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1716304643222,
      "end": 1716304643222,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1716304643222,
      "end": 1716304643222,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1716304643222,
      "end": 1716304643222,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1716304643222,
      "end": 1716304643222,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1716304643222,
      "end": 1716304643222,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716304643222,
      "end": 1716304643222,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716304643222,
      "end": 1716304643222,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716304643222,
      "end": 1716304643222,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716304643222,
      "end": 1716304643222,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716304643222,
      "end": 1716304643222,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716304643222,
      "end": 1716304643222,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716304643222,
      "end": 1716304643222,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716304643222,
      "end": 1716304643222,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1716304643222,
      "end": 1716304643222,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1716304643222,
      "end": 1716304643222,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1716304643222,
      "end": 1716304643222,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1716304643222,
      "end": 1716304643222,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1716304643222,
      "end": 1716304643222,
      "order": "normal"
    }
  ]
}
