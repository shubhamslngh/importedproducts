{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@apollo/client/utilities/graphql/fragments.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { __assign, __spreadArray } from \"tslib\";\nimport { invariant, newInvariantError } from \"../globals/index.js\";\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */\nexport function getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    // Build an array of all our fragment definitions that will be used for\n    // validations. We also do some validations on the other definitions in the\n    // document while building this list.\n    var fragments = [];\n    document.definitions.forEach(function (definition) {\n        // Throw an error if we encounter an operation definition because we will\n        // define our own operation definition later on.\n        if (definition.kind === \"OperationDefinition\") {\n            throw newInvariantError(\n                71,\n                definition.operation,\n                definition.name ? \" named '\".concat(definition.name.value, \"'\") : \"\"\n            );\n        }\n        // Add our definition to the fragments array if it is a fragment\n        // definition.\n        if (definition.kind === \"FragmentDefinition\") {\n            fragments.push(definition);\n        }\n    });\n    // If the user did not give us a fragment name then let us try to get a\n    // name from a single fragment in the definition.\n    if (typeof actualFragmentName === \"undefined\") {\n        invariant(fragments.length === 1, 72, fragments.length);\n        actualFragmentName = fragments[0].name.value;\n    }\n    // Generate a query document with an operation that simply spreads the\n    // fragment inside of it.\n    var query = __assign(__assign({}, document), { definitions: __spreadArray([\n            {\n                kind: \"OperationDefinition\",\n                // OperationTypeNode is an enum\n                operation: \"query\",\n                selectionSet: {\n                    kind: \"SelectionSet\",\n                    selections: [\n                        {\n                            kind: \"FragmentSpread\",\n                            name: {\n                                kind: \"Name\",\n                                value: actualFragmentName,\n                            },\n                        },\n                    ],\n                },\n            }\n        ], document.definitions, true) });\n    return query;\n}\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nexport function createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nexport function getFragmentFromSelection(selection, fragmentMap) {\n    switch (selection.kind) {\n        case \"InlineFragment\":\n            return selection;\n        case \"FragmentSpread\": {\n            var fragmentName = selection.name.value;\n            if (typeof fragmentMap === \"function\") {\n                return fragmentMap(fragmentName);\n            }\n            var fragment = fragmentMap && fragmentMap[fragmentName];\n            invariant(fragment, 73, fragmentName);\n            return fragment || null;\n        }\n        default:\n            return null;\n    }\n}\n//# sourceMappingURL=fragments.js.map",
      "start": 1710863483391,
      "end": 1710863483405,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710863483405,
      "end": 1710863483405,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710863483405,
      "end": 1710863483405,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710863483405,
      "end": 1710863483405,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710863483405,
      "end": 1710863483405,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1710863483405,
      "end": 1710863483405,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1710863483405,
      "end": 1710863483405,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710863483405,
      "end": 1710863483405,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710863483405,
      "end": 1710863483405,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710863483405,
      "end": 1710863483405,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710863483405,
      "end": 1710863483405,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710863483405,
      "end": 1710863483405,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710863483405,
      "end": 1710863483405,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710863483405,
      "end": 1710863483405,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710863483405,
      "end": 1710863483405,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710863483405,
      "end": 1710863483405,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710863483405,
      "end": 1710863483405,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710863483405,
      "end": 1710863483405,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1710863483405,
      "end": 1710863483405,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710863483405,
      "end": 1710863483405,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710863483405,
      "end": 1710863483405,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710863483405,
      "end": 1710863483406,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { __assign, __spreadArray } from \"tslib\";\nimport { invariant, newInvariantError } from \"../globals/index.js\";\nexport function getFragmentQueryDocument(document, fragmentName) {\n  var actualFragmentName = fragmentName;\n  var fragments = [];\n  document.definitions.forEach(function(definition) {\n    if (definition.kind === \"OperationDefinition\") {\n      throw newInvariantError(\n        71,\n        definition.operation,\n        definition.name ? \" named '\".concat(definition.name.value, \"'\") : \"\"\n      );\n    }\n    if (definition.kind === \"FragmentDefinition\") {\n      fragments.push(definition);\n    }\n  });\n  if (typeof actualFragmentName === \"undefined\") {\n    invariant(fragments.length === 1, 72, fragments.length);\n    actualFragmentName = fragments[0].name.value;\n  }\n  var query = __assign(__assign({}, document), { definitions: __spreadArray([\n    {\n      kind: \"OperationDefinition\",\n      // OperationTypeNode is an enum\n      operation: \"query\",\n      selectionSet: {\n        kind: \"SelectionSet\",\n        selections: [\n          {\n            kind: \"FragmentSpread\",\n            name: {\n              kind: \"Name\",\n              value: actualFragmentName\n            }\n          }\n        ]\n      }\n    }\n  ], document.definitions, true) });\n  return query;\n}\nexport function createFragmentMap(fragments) {\n  if (fragments === void 0) {\n    fragments = [];\n  }\n  var symTable = {};\n  fragments.forEach(function(fragment) {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\nexport function getFragmentFromSelection(selection, fragmentMap) {\n  switch (selection.kind) {\n    case \"InlineFragment\":\n      return selection;\n    case \"FragmentSpread\": {\n      var fragmentName = selection.name.value;\n      if (typeof fragmentMap === \"function\") {\n        return fragmentMap(fragmentName);\n      }\n      var fragment = fragmentMap && fragmentMap[fragmentName];\n      invariant(fragment, 73, fragmentName);\n      return fragment || null;\n    }\n    default:\n      return null;\n  }\n}\n",
      "start": 1710863483406,
      "end": 1710863483878,
      "order": "normal",
      "sourcemaps": "{\n  \"version\": 3,\n  \"sources\": [\"/Users/shubhamsingh/namma/importedProds/node_modules/@apollo/client/utilities/graphql/fragments.js\"],\n  \"sourcesContent\": [\"import { __assign, __spreadArray } from \\\"tslib\\\";\\nimport { invariant, newInvariantError } from \\\"../globals/index.js\\\";\\n/**\\n * Returns a query document which adds a single query operation that only\\n * spreads the target fragment inside of it.\\n *\\n * So for example a document of:\\n *\\n * ```graphql\\n * fragment foo on Foo { a b c }\\n * ```\\n *\\n * Turns into:\\n *\\n * ```graphql\\n * { ...foo }\\n *\\n * fragment foo on Foo { a b c }\\n * ```\\n *\\n * The target fragment will either be the only fragment in the document, or a\\n * fragment specified by the provided `fragmentName`. If there is more than one\\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\\n */\\nexport function getFragmentQueryDocument(document, fragmentName) {\\n    var actualFragmentName = fragmentName;\\n    // Build an array of all our fragment definitions that will be used for\\n    // validations. We also do some validations on the other definitions in the\\n    // document while building this list.\\n    var fragments = [];\\n    document.definitions.forEach(function (definition) {\\n        // Throw an error if we encounter an operation definition because we will\\n        // define our own operation definition later on.\\n        if (definition.kind === \\\"OperationDefinition\\\") {\\n            throw newInvariantError(\\n                71,\\n                definition.operation,\\n                definition.name ? \\\" named '\\\".concat(definition.name.value, \\\"'\\\") : \\\"\\\"\\n            );\\n        }\\n        // Add our definition to the fragments array if it is a fragment\\n        // definition.\\n        if (definition.kind === \\\"FragmentDefinition\\\") {\\n            fragments.push(definition);\\n        }\\n    });\\n    // If the user did not give us a fragment name then let us try to get a\\n    // name from a single fragment in the definition.\\n    if (typeof actualFragmentName === \\\"undefined\\\") {\\n        invariant(fragments.length === 1, 72, fragments.length);\\n        actualFragmentName = fragments[0].name.value;\\n    }\\n    // Generate a query document with an operation that simply spreads the\\n    // fragment inside of it.\\n    var query = __assign(__assign({}, document), { definitions: __spreadArray([\\n            {\\n                kind: \\\"OperationDefinition\\\",\\n                // OperationTypeNode is an enum\\n                operation: \\\"query\\\",\\n                selectionSet: {\\n                    kind: \\\"SelectionSet\\\",\\n                    selections: [\\n                        {\\n                            kind: \\\"FragmentSpread\\\",\\n                            name: {\\n                                kind: \\\"Name\\\",\\n                                value: actualFragmentName,\\n                            },\\n                        },\\n                    ],\\n                },\\n            }\\n        ], document.definitions, true) });\\n    return query;\\n}\\n// Utility function that takes a list of fragment definitions and makes a hash out of them\\n// that maps the name of the fragment to the fragment definition.\\nexport function createFragmentMap(fragments) {\\n    if (fragments === void 0) { fragments = []; }\\n    var symTable = {};\\n    fragments.forEach(function (fragment) {\\n        symTable[fragment.name.value] = fragment;\\n    });\\n    return symTable;\\n}\\nexport function getFragmentFromSelection(selection, fragmentMap) {\\n    switch (selection.kind) {\\n        case \\\"InlineFragment\\\":\\n            return selection;\\n        case \\\"FragmentSpread\\\": {\\n            var fragmentName = selection.name.value;\\n            if (typeof fragmentMap === \\\"function\\\") {\\n                return fragmentMap(fragmentName);\\n            }\\n            var fragment = fragmentMap && fragmentMap[fragmentName];\\n            invariant(fragment, 73, fragmentName);\\n            return fragment || null;\\n        }\\n        default:\\n            return null;\\n    }\\n}\\n//# sourceMappingURL=fragments.js.map\"],\n  \"mappings\": \"AAAA,SAAS,UAAU,qBAAqB;AACxC,SAAS,WAAW,yBAAyB;AAuBtC,gBAAS,yBAAyB,UAAU,cAAc;AAC7D,MAAI,qBAAqB;AAIzB,MAAI,YAAY,CAAC;AACjB,WAAS,YAAY,QAAQ,SAAU,YAAY;AAG/C,QAAI,WAAW,SAAS,uBAAuB;AAC3C,YAAM;AAAA,QACF;AAAA,QACA,WAAW;AAAA,QACX,WAAW,OAAO,WAAW,OAAO,WAAW,KAAK,OAAO,GAAG,IAAI;AAAA,MACtE;AAAA,IACJ;AAGA,QAAI,WAAW,SAAS,sBAAsB;AAC1C,gBAAU,KAAK,UAAU;AAAA,IAC7B;AAAA,EACJ,CAAC;AAGD,MAAI,OAAO,uBAAuB,aAAa;AAC3C,cAAU,UAAU,WAAW,GAAG,IAAI,UAAU,MAAM;AACtD,yBAAqB,UAAU,CAAC,EAAE,KAAK;AAAA,EAC3C;AAGA,MAAI,QAAQ,SAAS,SAAS,CAAC,GAAG,QAAQ,GAAG,EAAE,aAAa,cAAc;AAAA,IAClE;AAAA,MACI,MAAM;AAAA;AAAA,MAEN,WAAW;AAAA,MACX,cAAc;AAAA,QACV,MAAM;AAAA,QACN,YAAY;AAAA,UACR;AAAA,YACI,MAAM;AAAA,YACN,MAAM;AAAA,cACF,MAAM;AAAA,cACN,OAAO;AAAA,YACX;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ,GAAG,SAAS,aAAa,IAAI,EAAE,CAAC;AACpC,SAAO;AACX;AAGO,gBAAS,kBAAkB,WAAW;AACzC,MAAI,cAAc,QAAQ;AAAE,gBAAY,CAAC;AAAA,EAAG;AAC5C,MAAI,WAAW,CAAC;AAChB,YAAU,QAAQ,SAAU,UAAU;AAClC,aAAS,SAAS,KAAK,KAAK,IAAI;AAAA,EACpC,CAAC;AACD,SAAO;AACX;AACO,gBAAS,yBAAyB,WAAW,aAAa;AAC7D,UAAQ,UAAU,MAAM;AAAA,IACpB,KAAK;AACD,aAAO;AAAA,IACX,KAAK,kBAAkB;AACnB,UAAI,eAAe,UAAU,KAAK;AAClC,UAAI,OAAO,gBAAgB,YAAY;AACnC,eAAO,YAAY,YAAY;AAAA,MACnC;AACA,UAAI,WAAW,eAAe,YAAY,YAAY;AACtD,gBAAU,UAAU,IAAI,YAAY;AACpC,aAAO,YAAY;AAAA,IACvB;AAAA,IACA;AACI,aAAO;AAAA,EACf;AACJ;\",\n  \"names\": []\n}\n"
    },
    {
      "name": "vite:css-post",
      "start": 1710863483878,
      "end": 1710863483878,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710863483878,
      "end": 1710863483878,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710863483878,
      "end": 1710863483878,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710863483878,
      "end": 1710863483878,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710863483878,
      "end": 1710863483878,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710863483878,
      "end": 1710863483878,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710863483878,
      "end": 1710863483878,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710863483878,
      "end": 1710863483878,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710863483878,
      "end": 1710863483878,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710863483878,
      "end": 1710863483878,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710863483878,
      "end": 1710863483878,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710863483878,
      "end": 1710863483878,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710863483878,
      "end": 1710863483878,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710863483878,
      "end": 1710863483878,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710863483878,
      "end": 1710863483878,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1710863483878,
      "end": 1710863483878,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710863483878,
      "end": 1710863483878,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710863483878,
      "end": 1710863483878,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710863483878,
      "end": 1710863483878,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710863483878,
      "end": 1710863483878,
      "order": "normal"
    }
  ]
}
