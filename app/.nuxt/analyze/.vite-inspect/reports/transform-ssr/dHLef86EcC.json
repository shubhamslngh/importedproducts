{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@apollo/client/cache/inmemory/fragmentRegistry.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { __assign, __spreadArray } from \"tslib\";\nimport { visit } from \"graphql\";\nimport { wrap } from \"optimism\";\nimport { cacheSizes, getFragmentDefinitions, } from \"../../utilities/index.js\";\nimport { WeakCache } from \"@wry/caches\";\n// As long as createFragmentRegistry is not imported or used, the\n// FragmentRegistry example implementation provided below should not be bundled\n// (by tree-shaking bundlers like Rollup), because the implementation of\n// InMemoryCache refers only to the TypeScript interface FragmentRegistryAPI,\n// never the concrete implementation FragmentRegistry (which is deliberately not\n// exported from this module).\nexport function createFragmentRegistry() {\n    var fragments = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fragments[_i] = arguments[_i];\n    }\n    return new (FragmentRegistry.bind.apply(FragmentRegistry, __spreadArray([void 0], fragments, false)))();\n}\nvar FragmentRegistry = /** @class */ (function () {\n    // Call `createFragmentRegistry` instead of invoking the\n    // FragmentRegistry constructor directly. This reserves the constructor for\n    // future configuration of the FragmentRegistry.\n    function FragmentRegistry() {\n        var fragments = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            fragments[_i] = arguments[_i];\n        }\n        this.registry = Object.create(null);\n        this.resetCaches();\n        if (fragments.length) {\n            this.register.apply(this, fragments);\n        }\n    }\n    FragmentRegistry.prototype.register = function () {\n        var _this = this;\n        var fragments = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            fragments[_i] = arguments[_i];\n        }\n        var definitions = new Map();\n        fragments.forEach(function (doc) {\n            getFragmentDefinitions(doc).forEach(function (node) {\n                definitions.set(node.name.value, node);\n            });\n        });\n        definitions.forEach(function (node, name) {\n            if (node !== _this.registry[name]) {\n                _this.registry[name] = node;\n                _this.invalidate(name);\n            }\n        });\n        return this;\n    };\n    // Overridden in the resetCaches method below.\n    FragmentRegistry.prototype.invalidate = function (name) { };\n    FragmentRegistry.prototype.resetCaches = function () {\n        var proto = FragmentRegistry.prototype;\n        this.invalidate = (this.lookup = wrap(proto.lookup.bind(this), {\n            makeCacheKey: function (arg) { return arg; },\n            max: cacheSizes[\"fragmentRegistry.lookup\"] ||\n                1000 /* defaultCacheSizes[\"fragmentRegistry.lookup\"] */,\n        })).dirty; // This dirty function is bound to the wrapped lookup method.\n        this.transform = wrap(proto.transform.bind(this), {\n            cache: WeakCache,\n            max: cacheSizes[\"fragmentRegistry.transform\"] ||\n                2000 /* defaultCacheSizes[\"fragmentRegistry.transform\"] */,\n        });\n        this.findFragmentSpreads = wrap(proto.findFragmentSpreads.bind(this), {\n            cache: WeakCache,\n            max: cacheSizes[\"fragmentRegistry.findFragmentSpreads\"] ||\n                4000 /* defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"] */,\n        });\n    };\n    /*\n     * Note:\n     * This method is only memoized so it can serve as a dependency to `tranform`,\n     * so calling `invalidate` will invalidate cache entries for `transform`.\n     */\n    FragmentRegistry.prototype.lookup = function (fragmentName) {\n        return this.registry[fragmentName] || null;\n    };\n    FragmentRegistry.prototype.transform = function (document) {\n        var _this = this;\n        var defined = new Map();\n        getFragmentDefinitions(document).forEach(function (def) {\n            defined.set(def.name.value, def);\n        });\n        var unbound = new Set();\n        var enqueue = function (spreadName) {\n            if (!defined.has(spreadName)) {\n                unbound.add(spreadName);\n            }\n        };\n        var enqueueChildSpreads = function (node) {\n            return Object.keys(_this.findFragmentSpreads(node)).forEach(enqueue);\n        };\n        enqueueChildSpreads(document);\n        var missing = [];\n        var map = Object.create(null);\n        // This Set forEach loop can be extended during iteration by adding\n        // additional strings to the unbound set.\n        unbound.forEach(function (fragmentName) {\n            var knownFragmentDef = defined.get(fragmentName);\n            if (knownFragmentDef) {\n                enqueueChildSpreads((map[fragmentName] = knownFragmentDef));\n            }\n            else {\n                missing.push(fragmentName);\n                var def = _this.lookup(fragmentName);\n                if (def) {\n                    enqueueChildSpreads((map[fragmentName] = def));\n                }\n            }\n        });\n        if (missing.length) {\n            var defsToAppend_1 = [];\n            missing.forEach(function (name) {\n                var def = map[name];\n                if (def) {\n                    defsToAppend_1.push(def);\n                }\n            });\n            if (defsToAppend_1.length) {\n                document = __assign(__assign({}, document), { definitions: document.definitions.concat(defsToAppend_1) });\n            }\n        }\n        return document;\n    };\n    FragmentRegistry.prototype.findFragmentSpreads = function (root) {\n        var spreads = Object.create(null);\n        visit(root, {\n            FragmentSpread: function (node) {\n                spreads[node.name.value] = node;\n            },\n        });\n        return spreads;\n    };\n    return FragmentRegistry;\n}());\n//# sourceMappingURL=fragmentRegistry.js.map",
      "start": 1712968597722,
      "end": 1712968597729,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712968597729,
      "end": 1712968597729,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712968597729,
      "end": 1712968597729,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712968597729,
      "end": 1712968597729,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712968597729,
      "end": 1712968597729,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712968597729,
      "end": 1712968597729,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712968597729,
      "end": 1712968597729,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712968597729,
      "end": 1712968597729,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712968597729,
      "end": 1712968597729,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712968597729,
      "end": 1712968597729,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712968597729,
      "end": 1712968597729,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712968597729,
      "end": 1712968597729,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712968597729,
      "end": 1712968597729,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712968597729,
      "end": 1712968597729,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712968597729,
      "end": 1712968597729,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712968597729,
      "end": 1712968597729,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712968597729,
      "end": 1712968597729,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712968597729,
      "end": 1712968597729,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1712968597729,
      "end": 1712968597729,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712968597729,
      "end": 1712968597729,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712968597729,
      "end": 1712968597729,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712968597729,
      "end": 1712968597729,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { __assign, __spreadArray } from \"tslib\";\nimport { visit } from \"graphql\";\nimport { wrap } from \"optimism\";\nimport { cacheSizes, getFragmentDefinitions } from \"../../utilities/index.js\";\nimport { WeakCache } from \"@wry/caches\";\nexport function createFragmentRegistry() {\n  var fragments = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    fragments[_i] = arguments[_i];\n  }\n  return new (FragmentRegistry.bind.apply(FragmentRegistry, __spreadArray([void 0], fragments, false)))();\n}\nvar FragmentRegistry = (\n  /** @class */\n  function() {\n    function FragmentRegistry2() {\n      var fragments = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        fragments[_i] = arguments[_i];\n      }\n      this.registry = /* @__PURE__ */ Object.create(null);\n      this.resetCaches();\n      if (fragments.length) {\n        this.register.apply(this, fragments);\n      }\n    }\n    FragmentRegistry2.prototype.register = function() {\n      var _this = this;\n      var fragments = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        fragments[_i] = arguments[_i];\n      }\n      var definitions = /* @__PURE__ */ new Map();\n      fragments.forEach(function(doc) {\n        getFragmentDefinitions(doc).forEach(function(node) {\n          definitions.set(node.name.value, node);\n        });\n      });\n      definitions.forEach(function(node, name) {\n        if (node !== _this.registry[name]) {\n          _this.registry[name] = node;\n          _this.invalidate(name);\n        }\n      });\n      return this;\n    };\n    FragmentRegistry2.prototype.invalidate = function(name) {\n    };\n    FragmentRegistry2.prototype.resetCaches = function() {\n      var proto = FragmentRegistry2.prototype;\n      this.invalidate = (this.lookup = wrap(proto.lookup.bind(this), {\n        makeCacheKey: function(arg) {\n          return arg;\n        },\n        max: cacheSizes[\"fragmentRegistry.lookup\"] || 1e3\n      })).dirty;\n      this.transform = wrap(proto.transform.bind(this), {\n        cache: WeakCache,\n        max: cacheSizes[\"fragmentRegistry.transform\"] || 2e3\n      });\n      this.findFragmentSpreads = wrap(proto.findFragmentSpreads.bind(this), {\n        cache: WeakCache,\n        max: cacheSizes[\"fragmentRegistry.findFragmentSpreads\"] || 4e3\n      });\n    };\n    FragmentRegistry2.prototype.lookup = function(fragmentName) {\n      return this.registry[fragmentName] || null;\n    };\n    FragmentRegistry2.prototype.transform = function(document) {\n      var _this = this;\n      var defined = /* @__PURE__ */ new Map();\n      getFragmentDefinitions(document).forEach(function(def) {\n        defined.set(def.name.value, def);\n      });\n      var unbound = /* @__PURE__ */ new Set();\n      var enqueue = function(spreadName) {\n        if (!defined.has(spreadName)) {\n          unbound.add(spreadName);\n        }\n      };\n      var enqueueChildSpreads = function(node) {\n        return Object.keys(_this.findFragmentSpreads(node)).forEach(enqueue);\n      };\n      enqueueChildSpreads(document);\n      var missing = [];\n      var map = /* @__PURE__ */ Object.create(null);\n      unbound.forEach(function(fragmentName) {\n        var knownFragmentDef = defined.get(fragmentName);\n        if (knownFragmentDef) {\n          enqueueChildSpreads(map[fragmentName] = knownFragmentDef);\n        } else {\n          missing.push(fragmentName);\n          var def = _this.lookup(fragmentName);\n          if (def) {\n            enqueueChildSpreads(map[fragmentName] = def);\n          }\n        }\n      });\n      if (missing.length) {\n        var defsToAppend_1 = [];\n        missing.forEach(function(name) {\n          var def = map[name];\n          if (def) {\n            defsToAppend_1.push(def);\n          }\n        });\n        if (defsToAppend_1.length) {\n          document = __assign(__assign({}, document), { definitions: document.definitions.concat(defsToAppend_1) });\n        }\n      }\n      return document;\n    };\n    FragmentRegistry2.prototype.findFragmentSpreads = function(root) {\n      var spreads = /* @__PURE__ */ Object.create(null);\n      visit(root, {\n        FragmentSpread: function(node) {\n          spreads[node.name.value] = node;\n        }\n      });\n      return spreads;\n    };\n    return FragmentRegistry2;\n  }()\n);\n",
      "start": 1712968597729,
      "end": 1712968598044,
      "order": "normal",
      "sourcemaps": "{\n  \"version\": 3,\n  \"sources\": [\"/Users/shubhamsingh/namma/importedProds/node_modules/@apollo/client/cache/inmemory/fragmentRegistry.js\"],\n  \"sourcesContent\": [\"import { __assign, __spreadArray } from \\\"tslib\\\";\\nimport { visit } from \\\"graphql\\\";\\nimport { wrap } from \\\"optimism\\\";\\nimport { cacheSizes, getFragmentDefinitions, } from \\\"../../utilities/index.js\\\";\\nimport { WeakCache } from \\\"@wry/caches\\\";\\n// As long as createFragmentRegistry is not imported or used, the\\n// FragmentRegistry example implementation provided below should not be bundled\\n// (by tree-shaking bundlers like Rollup), because the implementation of\\n// InMemoryCache refers only to the TypeScript interface FragmentRegistryAPI,\\n// never the concrete implementation FragmentRegistry (which is deliberately not\\n// exported from this module).\\nexport function createFragmentRegistry() {\\n    var fragments = [];\\n    for (var _i = 0; _i < arguments.length; _i++) {\\n        fragments[_i] = arguments[_i];\\n    }\\n    return new (FragmentRegistry.bind.apply(FragmentRegistry, __spreadArray([void 0], fragments, false)))();\\n}\\nvar FragmentRegistry = /** @class */ (function () {\\n    // Call `createFragmentRegistry` instead of invoking the\\n    // FragmentRegistry constructor directly. This reserves the constructor for\\n    // future configuration of the FragmentRegistry.\\n    function FragmentRegistry() {\\n        var fragments = [];\\n        for (var _i = 0; _i < arguments.length; _i++) {\\n            fragments[_i] = arguments[_i];\\n        }\\n        this.registry = Object.create(null);\\n        this.resetCaches();\\n        if (fragments.length) {\\n            this.register.apply(this, fragments);\\n        }\\n    }\\n    FragmentRegistry.prototype.register = function () {\\n        var _this = this;\\n        var fragments = [];\\n        for (var _i = 0; _i < arguments.length; _i++) {\\n            fragments[_i] = arguments[_i];\\n        }\\n        var definitions = new Map();\\n        fragments.forEach(function (doc) {\\n            getFragmentDefinitions(doc).forEach(function (node) {\\n                definitions.set(node.name.value, node);\\n            });\\n        });\\n        definitions.forEach(function (node, name) {\\n            if (node !== _this.registry[name]) {\\n                _this.registry[name] = node;\\n                _this.invalidate(name);\\n            }\\n        });\\n        return this;\\n    };\\n    // Overridden in the resetCaches method below.\\n    FragmentRegistry.prototype.invalidate = function (name) { };\\n    FragmentRegistry.prototype.resetCaches = function () {\\n        var proto = FragmentRegistry.prototype;\\n        this.invalidate = (this.lookup = wrap(proto.lookup.bind(this), {\\n            makeCacheKey: function (arg) { return arg; },\\n            max: cacheSizes[\\\"fragmentRegistry.lookup\\\"] ||\\n                1000 /* defaultCacheSizes[\\\"fragmentRegistry.lookup\\\"] */,\\n        })).dirty; // This dirty function is bound to the wrapped lookup method.\\n        this.transform = wrap(proto.transform.bind(this), {\\n            cache: WeakCache,\\n            max: cacheSizes[\\\"fragmentRegistry.transform\\\"] ||\\n                2000 /* defaultCacheSizes[\\\"fragmentRegistry.transform\\\"] */,\\n        });\\n        this.findFragmentSpreads = wrap(proto.findFragmentSpreads.bind(this), {\\n            cache: WeakCache,\\n            max: cacheSizes[\\\"fragmentRegistry.findFragmentSpreads\\\"] ||\\n                4000 /* defaultCacheSizes[\\\"fragmentRegistry.findFragmentSpreads\\\"] */,\\n        });\\n    };\\n    /*\\n     * Note:\\n     * This method is only memoized so it can serve as a dependency to `tranform`,\\n     * so calling `invalidate` will invalidate cache entries for `transform`.\\n     */\\n    FragmentRegistry.prototype.lookup = function (fragmentName) {\\n        return this.registry[fragmentName] || null;\\n    };\\n    FragmentRegistry.prototype.transform = function (document) {\\n        var _this = this;\\n        var defined = new Map();\\n        getFragmentDefinitions(document).forEach(function (def) {\\n            defined.set(def.name.value, def);\\n        });\\n        var unbound = new Set();\\n        var enqueue = function (spreadName) {\\n            if (!defined.has(spreadName)) {\\n                unbound.add(spreadName);\\n            }\\n        };\\n        var enqueueChildSpreads = function (node) {\\n            return Object.keys(_this.findFragmentSpreads(node)).forEach(enqueue);\\n        };\\n        enqueueChildSpreads(document);\\n        var missing = [];\\n        var map = Object.create(null);\\n        // This Set forEach loop can be extended during iteration by adding\\n        // additional strings to the unbound set.\\n        unbound.forEach(function (fragmentName) {\\n            var knownFragmentDef = defined.get(fragmentName);\\n            if (knownFragmentDef) {\\n                enqueueChildSpreads((map[fragmentName] = knownFragmentDef));\\n            }\\n            else {\\n                missing.push(fragmentName);\\n                var def = _this.lookup(fragmentName);\\n                if (def) {\\n                    enqueueChildSpreads((map[fragmentName] = def));\\n                }\\n            }\\n        });\\n        if (missing.length) {\\n            var defsToAppend_1 = [];\\n            missing.forEach(function (name) {\\n                var def = map[name];\\n                if (def) {\\n                    defsToAppend_1.push(def);\\n                }\\n            });\\n            if (defsToAppend_1.length) {\\n                document = __assign(__assign({}, document), { definitions: document.definitions.concat(defsToAppend_1) });\\n            }\\n        }\\n        return document;\\n    };\\n    FragmentRegistry.prototype.findFragmentSpreads = function (root) {\\n        var spreads = Object.create(null);\\n        visit(root, {\\n            FragmentSpread: function (node) {\\n                spreads[node.name.value] = node;\\n            },\\n        });\\n        return spreads;\\n    };\\n    return FragmentRegistry;\\n}());\\n//# sourceMappingURL=fragmentRegistry.js.map\"],\n  \"mappings\": \"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\",\n  \"names\": [\"FragmentRegistry\"]\n}\n"
    },
    {
      "name": "vite:css-post",
      "start": 1712968598044,
      "end": 1712968598044,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712968598044,
      "end": 1712968598044,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712968598044,
      "end": 1712968598044,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712968598044,
      "end": 1712968598044,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712968598044,
      "end": 1712968598044,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712968598044,
      "end": 1712968598044,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712968598044,
      "end": 1712968598044,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712968598044,
      "end": 1712968598044,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712968598044,
      "end": 1712968598044,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712968598044,
      "end": 1712968598044,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712968598044,
      "end": 1712968598044,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712968598044,
      "end": 1712968598044,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712968598044,
      "end": 1712968598044,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712968598044,
      "end": 1712968598044,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712968598044,
      "end": 1712968598044,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1712968598044,
      "end": 1712968598044,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712968598044,
      "end": 1712968598044,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712968598044,
      "end": 1712968598044,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712968598044,
      "end": 1712968598044,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712968598044,
      "end": 1712968598044,
      "order": "normal"
    }
  ]
}
