{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@apollo/client/cache/inmemory/object-canon.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { __assign } from \"tslib\";\nimport { Trie } from \"@wry/trie\";\nimport { canUseWeakMap, canUseWeakSet, isNonNullObject as isObjectOrArray, } from \"../../utilities/index.js\";\nimport { isArray } from \"./helpers.js\";\nfunction shallowCopy(value) {\n    if (isObjectOrArray(value)) {\n        return isArray(value) ?\n            value.slice(0)\n            : __assign({ __proto__: Object.getPrototypeOf(value) }, value);\n    }\n    return value;\n}\n// When programmers talk about the \"canonical form\" of an object, they\n// usually have the following meaning in mind, which I've copied from\n// https://en.wiktionary.org/wiki/canonical_form:\n//\n// 1. A standard or normal presentation of a mathematical entity [or\n//    object]. A canonical form is an element of a set of representatives\n//    of equivalence classes of forms such that there is a function or\n//    procedure which projects every element of each equivalence class\n//    onto that one element, the canonical form of that equivalence\n//    class. The canonical form is expected to be simpler than the rest of\n//    the forms in some way.\n//\n// That's a long-winded way of saying any two objects that have the same\n// canonical form may be considered equivalent, even if they are !==,\n// which usually means the objects are structurally equivalent (deeply\n// equal), but don't necessarily use the same memory.\n//\n// Like a literary or musical canon, this ObjectCanon class represents a\n// collection of unique canonical items (JavaScript objects), with the\n// important property that canon.admit(a) === canon.admit(b) if a and b\n// are deeply equal to each other. In terms of the definition above, the\n// canon.admit method is the \"function or procedure which projects every\"\n// object \"onto that one element, the canonical form.\"\n//\n// In the worst case, the canonicalization process may involve looking at\n// every property in the provided object tree, so it takes the same order\n// of time as deep equality checking. Fortunately, already-canonicalized\n// objects are returned immediately from canon.admit, so the presence of\n// canonical subtrees tends to speed up canonicalization.\n//\n// Since consumers of canonical objects can check for deep equality in\n// constant time, canonicalizing cache results can massively improve the\n// performance of application code that skips re-rendering unchanged\n// results, such as \"pure\" UI components in a framework like React.\n//\n// Of course, since canonical objects may be shared widely between\n// unrelated consumers, it's important to think of them as immutable, even\n// though they are not actually frozen with Object.freeze in production,\n// due to the extra performance overhead that comes with frozen objects.\n//\n// Custom scalar objects whose internal class name is neither Array nor\n// Object can be included safely in the admitted tree, but they will not\n// be replaced with a canonical version (to put it another way, they are\n// assumed to be canonical already).\n//\n// If we ignore custom objects, no detection of cycles or repeated object\n// references is currently required by the StoreReader class, since\n// GraphQL result objects are JSON-serializable trees (and thus contain\n// neither cycles nor repeated subtrees), so we can avoid the complexity\n// of keeping track of objects we've already seen during the recursion of\n// the admit method.\n//\n// In the future, we may consider adding additional cases to the switch\n// statement to handle other common object types, such as \"[object Date]\"\n// objects, as needed.\nvar ObjectCanon = /** @class */ (function () {\n    function ObjectCanon() {\n        // Set of all canonical objects this ObjectCanon has admitted, allowing\n        // canon.admit to return previously-canonicalized objects immediately.\n        this.known = new (canUseWeakSet ? WeakSet : Set)();\n        // Efficient storage/lookup structure for canonical objects.\n        this.pool = new Trie(canUseWeakMap);\n        // Make the ObjectCanon assume this value has already been\n        // canonicalized.\n        this.passes = new WeakMap();\n        // Arrays that contain the same elements in a different order can share\n        // the same SortedKeysInfo object, to save memory.\n        this.keysByJSON = new Map();\n        // This has to come last because it depends on keysByJSON.\n        this.empty = this.admit({});\n    }\n    ObjectCanon.prototype.isKnown = function (value) {\n        return isObjectOrArray(value) && this.known.has(value);\n    };\n    ObjectCanon.prototype.pass = function (value) {\n        if (isObjectOrArray(value)) {\n            var copy = shallowCopy(value);\n            this.passes.set(copy, value);\n            return copy;\n        }\n        return value;\n    };\n    ObjectCanon.prototype.admit = function (value) {\n        var _this = this;\n        if (isObjectOrArray(value)) {\n            var original = this.passes.get(value);\n            if (original)\n                return original;\n            var proto = Object.getPrototypeOf(value);\n            switch (proto) {\n                case Array.prototype: {\n                    if (this.known.has(value))\n                        return value;\n                    var array = value.map(this.admit, this);\n                    // Arrays are looked up in the Trie using their recursively\n                    // canonicalized elements, and the known version of the array is\n                    // preserved as node.array.\n                    var node = this.pool.lookupArray(array);\n                    if (!node.array) {\n                        this.known.add((node.array = array));\n                        // Since canonical arrays may be shared widely between\n                        // unrelated consumers, it's important to regard them as\n                        // immutable, even if they are not frozen in production.\n                        if (globalThis.__DEV__ !== false) {\n                            Object.freeze(array);\n                        }\n                    }\n                    return node.array;\n                }\n                case null:\n                case Object.prototype: {\n                    if (this.known.has(value))\n                        return value;\n                    var proto_1 = Object.getPrototypeOf(value);\n                    var array_1 = [proto_1];\n                    var keys = this.sortedKeys(value);\n                    array_1.push(keys.json);\n                    var firstValueIndex_1 = array_1.length;\n                    keys.sorted.forEach(function (key) {\n                        array_1.push(_this.admit(value[key]));\n                    });\n                    // Objects are looked up in the Trie by their prototype (which\n                    // is *not* recursively canonicalized), followed by a JSON\n                    // representation of their (sorted) keys, followed by the\n                    // sequence of recursively canonicalized values corresponding to\n                    // those keys. To keep the final results unambiguous with other\n                    // sequences (such as arrays that just happen to contain [proto,\n                    // keys.json, value1, value2, ...]), the known version of the\n                    // object is stored as node.object.\n                    var node = this.pool.lookupArray(array_1);\n                    if (!node.object) {\n                        var obj_1 = (node.object = Object.create(proto_1));\n                        this.known.add(obj_1);\n                        keys.sorted.forEach(function (key, i) {\n                            obj_1[key] = array_1[firstValueIndex_1 + i];\n                        });\n                        // Since canonical objects may be shared widely between\n                        // unrelated consumers, it's important to regard them as\n                        // immutable, even if they are not frozen in production.\n                        if (globalThis.__DEV__ !== false) {\n                            Object.freeze(obj_1);\n                        }\n                    }\n                    return node.object;\n                }\n            }\n        }\n        return value;\n    };\n    // It's worthwhile to cache the sorting of arrays of strings, since the\n    // same initial unsorted arrays tend to be encountered many times.\n    // Fortunately, we can reuse the Trie machinery to look up the sorted\n    // arrays in linear time (which is faster than sorting large arrays).\n    ObjectCanon.prototype.sortedKeys = function (obj) {\n        var keys = Object.keys(obj);\n        var node = this.pool.lookupArray(keys);\n        if (!node.keys) {\n            keys.sort();\n            var json = JSON.stringify(keys);\n            if (!(node.keys = this.keysByJSON.get(json))) {\n                this.keysByJSON.set(json, (node.keys = { sorted: keys, json: json }));\n            }\n        }\n        return node.keys;\n    };\n    return ObjectCanon;\n}());\nexport { ObjectCanon };\n//# sourceMappingURL=object-canon.js.map",
      "start": 1713269989586,
      "end": 1713269989587,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1713269989587,
      "end": 1713269989587,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1713269989587,
      "end": 1713269989587,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1713269989587,
      "end": 1713269989587,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1713269989587,
      "end": 1713269989587,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1713269989587,
      "end": 1713269989587,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1713269989587,
      "end": 1713269989587,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1713269989587,
      "end": 1713269989587,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1713269989587,
      "end": 1713269989587,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1713269989587,
      "end": 1713269989587,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1713269989587,
      "end": 1713269989587,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1713269989587,
      "end": 1713269989587,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1713269989587,
      "end": 1713269989587,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1713269989587,
      "end": 1713269989587,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1713269989587,
      "end": 1713269989587,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1713269989587,
      "end": 1713269989587,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1713269989587,
      "end": 1713269989587,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1713269989587,
      "end": 1713269989587,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1713269989587,
      "end": 1713269989587,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1713269989587,
      "end": 1713269989587,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1713269989587,
      "end": 1713269989587,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1713269989587,
      "end": 1713269989587,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { __assign } from \"tslib\";\nimport { Trie } from \"@wry/trie\";\nimport { canUseWeakMap, canUseWeakSet, isNonNullObject as isObjectOrArray } from \"../../utilities/index.js\";\nimport { isArray } from \"./helpers.js\";\nfunction shallowCopy(value) {\n  if (isObjectOrArray(value)) {\n    return isArray(value) ? value.slice(0) : __assign({ __proto__: Object.getPrototypeOf(value) }, value);\n  }\n  return value;\n}\nvar ObjectCanon = (\n  /** @class */\n  function() {\n    function ObjectCanon2() {\n      this.known = new (canUseWeakSet ? WeakSet : Set)();\n      this.pool = new Trie(canUseWeakMap);\n      this.passes = /* @__PURE__ */ new WeakMap();\n      this.keysByJSON = /* @__PURE__ */ new Map();\n      this.empty = this.admit({});\n    }\n    ObjectCanon2.prototype.isKnown = function(value) {\n      return isObjectOrArray(value) && this.known.has(value);\n    };\n    ObjectCanon2.prototype.pass = function(value) {\n      if (isObjectOrArray(value)) {\n        var copy = shallowCopy(value);\n        this.passes.set(copy, value);\n        return copy;\n      }\n      return value;\n    };\n    ObjectCanon2.prototype.admit = function(value) {\n      var _this = this;\n      if (isObjectOrArray(value)) {\n        var original = this.passes.get(value);\n        if (original)\n          return original;\n        var proto = Object.getPrototypeOf(value);\n        switch (proto) {\n          case Array.prototype: {\n            if (this.known.has(value))\n              return value;\n            var array = value.map(this.admit, this);\n            var node = this.pool.lookupArray(array);\n            if (!node.array) {\n              this.known.add(node.array = array);\n              if (globalThis.__DEV__ !== false) {\n                Object.freeze(array);\n              }\n            }\n            return node.array;\n          }\n          case null:\n          case Object.prototype: {\n            if (this.known.has(value))\n              return value;\n            var proto_1 = Object.getPrototypeOf(value);\n            var array_1 = [proto_1];\n            var keys = this.sortedKeys(value);\n            array_1.push(keys.json);\n            var firstValueIndex_1 = array_1.length;\n            keys.sorted.forEach(function(key) {\n              array_1.push(_this.admit(value[key]));\n            });\n            var node = this.pool.lookupArray(array_1);\n            if (!node.object) {\n              var obj_1 = node.object = Object.create(proto_1);\n              this.known.add(obj_1);\n              keys.sorted.forEach(function(key, i) {\n                obj_1[key] = array_1[firstValueIndex_1 + i];\n              });\n              if (globalThis.__DEV__ !== false) {\n                Object.freeze(obj_1);\n              }\n            }\n            return node.object;\n          }\n        }\n      }\n      return value;\n    };\n    ObjectCanon2.prototype.sortedKeys = function(obj) {\n      var keys = Object.keys(obj);\n      var node = this.pool.lookupArray(keys);\n      if (!node.keys) {\n        keys.sort();\n        var json = JSON.stringify(keys);\n        if (!(node.keys = this.keysByJSON.get(json))) {\n          this.keysByJSON.set(json, node.keys = { sorted: keys, json });\n        }\n      }\n      return node.keys;\n    };\n    return ObjectCanon2;\n  }()\n);\nexport { ObjectCanon };\n",
      "start": 1713269989587,
      "end": 1713269989604,
      "order": "normal",
      "sourcemaps": "{\n  \"version\": 3,\n  \"sources\": [\"/Users/shubhamsingh/namma/importedProds/node_modules/@apollo/client/cache/inmemory/object-canon.js\"],\n  \"sourcesContent\": [\"import { __assign } from \\\"tslib\\\";\\nimport { Trie } from \\\"@wry/trie\\\";\\nimport { canUseWeakMap, canUseWeakSet, isNonNullObject as isObjectOrArray, } from \\\"../../utilities/index.js\\\";\\nimport { isArray } from \\\"./helpers.js\\\";\\nfunction shallowCopy(value) {\\n    if (isObjectOrArray(value)) {\\n        return isArray(value) ?\\n            value.slice(0)\\n            : __assign({ __proto__: Object.getPrototypeOf(value) }, value);\\n    }\\n    return value;\\n}\\n// When programmers talk about the \\\"canonical form\\\" of an object, they\\n// usually have the following meaning in mind, which I've copied from\\n// https://en.wiktionary.org/wiki/canonical_form:\\n//\\n// 1. A standard or normal presentation of a mathematical entity [or\\n//    object]. A canonical form is an element of a set of representatives\\n//    of equivalence classes of forms such that there is a function or\\n//    procedure which projects every element of each equivalence class\\n//    onto that one element, the canonical form of that equivalence\\n//    class. The canonical form is expected to be simpler than the rest of\\n//    the forms in some way.\\n//\\n// That's a long-winded way of saying any two objects that have the same\\n// canonical form may be considered equivalent, even if they are !==,\\n// which usually means the objects are structurally equivalent (deeply\\n// equal), but don't necessarily use the same memory.\\n//\\n// Like a literary or musical canon, this ObjectCanon class represents a\\n// collection of unique canonical items (JavaScript objects), with the\\n// important property that canon.admit(a) === canon.admit(b) if a and b\\n// are deeply equal to each other. In terms of the definition above, the\\n// canon.admit method is the \\\"function or procedure which projects every\\\"\\n// object \\\"onto that one element, the canonical form.\\\"\\n//\\n// In the worst case, the canonicalization process may involve looking at\\n// every property in the provided object tree, so it takes the same order\\n// of time as deep equality checking. Fortunately, already-canonicalized\\n// objects are returned immediately from canon.admit, so the presence of\\n// canonical subtrees tends to speed up canonicalization.\\n//\\n// Since consumers of canonical objects can check for deep equality in\\n// constant time, canonicalizing cache results can massively improve the\\n// performance of application code that skips re-rendering unchanged\\n// results, such as \\\"pure\\\" UI components in a framework like React.\\n//\\n// Of course, since canonical objects may be shared widely between\\n// unrelated consumers, it's important to think of them as immutable, even\\n// though they are not actually frozen with Object.freeze in production,\\n// due to the extra performance overhead that comes with frozen objects.\\n//\\n// Custom scalar objects whose internal class name is neither Array nor\\n// Object can be included safely in the admitted tree, but they will not\\n// be replaced with a canonical version (to put it another way, they are\\n// assumed to be canonical already).\\n//\\n// If we ignore custom objects, no detection of cycles or repeated object\\n// references is currently required by the StoreReader class, since\\n// GraphQL result objects are JSON-serializable trees (and thus contain\\n// neither cycles nor repeated subtrees), so we can avoid the complexity\\n// of keeping track of objects we've already seen during the recursion of\\n// the admit method.\\n//\\n// In the future, we may consider adding additional cases to the switch\\n// statement to handle other common object types, such as \\\"[object Date]\\\"\\n// objects, as needed.\\nvar ObjectCanon = /** @class */ (function () {\\n    function ObjectCanon() {\\n        // Set of all canonical objects this ObjectCanon has admitted, allowing\\n        // canon.admit to return previously-canonicalized objects immediately.\\n        this.known = new (canUseWeakSet ? WeakSet : Set)();\\n        // Efficient storage/lookup structure for canonical objects.\\n        this.pool = new Trie(canUseWeakMap);\\n        // Make the ObjectCanon assume this value has already been\\n        // canonicalized.\\n        this.passes = new WeakMap();\\n        // Arrays that contain the same elements in a different order can share\\n        // the same SortedKeysInfo object, to save memory.\\n        this.keysByJSON = new Map();\\n        // This has to come last because it depends on keysByJSON.\\n        this.empty = this.admit({});\\n    }\\n    ObjectCanon.prototype.isKnown = function (value) {\\n        return isObjectOrArray(value) && this.known.has(value);\\n    };\\n    ObjectCanon.prototype.pass = function (value) {\\n        if (isObjectOrArray(value)) {\\n            var copy = shallowCopy(value);\\n            this.passes.set(copy, value);\\n            return copy;\\n        }\\n        return value;\\n    };\\n    ObjectCanon.prototype.admit = function (value) {\\n        var _this = this;\\n        if (isObjectOrArray(value)) {\\n            var original = this.passes.get(value);\\n            if (original)\\n                return original;\\n            var proto = Object.getPrototypeOf(value);\\n            switch (proto) {\\n                case Array.prototype: {\\n                    if (this.known.has(value))\\n                        return value;\\n                    var array = value.map(this.admit, this);\\n                    // Arrays are looked up in the Trie using their recursively\\n                    // canonicalized elements, and the known version of the array is\\n                    // preserved as node.array.\\n                    var node = this.pool.lookupArray(array);\\n                    if (!node.array) {\\n                        this.known.add((node.array = array));\\n                        // Since canonical arrays may be shared widely between\\n                        // unrelated consumers, it's important to regard them as\\n                        // immutable, even if they are not frozen in production.\\n                        if (globalThis.__DEV__ !== false) {\\n                            Object.freeze(array);\\n                        }\\n                    }\\n                    return node.array;\\n                }\\n                case null:\\n                case Object.prototype: {\\n                    if (this.known.has(value))\\n                        return value;\\n                    var proto_1 = Object.getPrototypeOf(value);\\n                    var array_1 = [proto_1];\\n                    var keys = this.sortedKeys(value);\\n                    array_1.push(keys.json);\\n                    var firstValueIndex_1 = array_1.length;\\n                    keys.sorted.forEach(function (key) {\\n                        array_1.push(_this.admit(value[key]));\\n                    });\\n                    // Objects are looked up in the Trie by their prototype (which\\n                    // is *not* recursively canonicalized), followed by a JSON\\n                    // representation of their (sorted) keys, followed by the\\n                    // sequence of recursively canonicalized values corresponding to\\n                    // those keys. To keep the final results unambiguous with other\\n                    // sequences (such as arrays that just happen to contain [proto,\\n                    // keys.json, value1, value2, ...]), the known version of the\\n                    // object is stored as node.object.\\n                    var node = this.pool.lookupArray(array_1);\\n                    if (!node.object) {\\n                        var obj_1 = (node.object = Object.create(proto_1));\\n                        this.known.add(obj_1);\\n                        keys.sorted.forEach(function (key, i) {\\n                            obj_1[key] = array_1[firstValueIndex_1 + i];\\n                        });\\n                        // Since canonical objects may be shared widely between\\n                        // unrelated consumers, it's important to regard them as\\n                        // immutable, even if they are not frozen in production.\\n                        if (globalThis.__DEV__ !== false) {\\n                            Object.freeze(obj_1);\\n                        }\\n                    }\\n                    return node.object;\\n                }\\n            }\\n        }\\n        return value;\\n    };\\n    // It's worthwhile to cache the sorting of arrays of strings, since the\\n    // same initial unsorted arrays tend to be encountered many times.\\n    // Fortunately, we can reuse the Trie machinery to look up the sorted\\n    // arrays in linear time (which is faster than sorting large arrays).\\n    ObjectCanon.prototype.sortedKeys = function (obj) {\\n        var keys = Object.keys(obj);\\n        var node = this.pool.lookupArray(keys);\\n        if (!node.keys) {\\n            keys.sort();\\n            var json = JSON.stringify(keys);\\n            if (!(node.keys = this.keysByJSON.get(json))) {\\n                this.keysByJSON.set(json, (node.keys = { sorted: keys, json: json }));\\n            }\\n        }\\n        return node.keys;\\n    };\\n    return ObjectCanon;\\n}());\\nexport { ObjectCanon };\\n//# sourceMappingURL=object-canon.js.map\"],\n  \"mappings\": \"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\",\n  \"names\": [\"ObjectCanon\"]\n}\n"
    },
    {
      "name": "vite:css-post",
      "start": 1713269989604,
      "end": 1713269989604,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1713269989604,
      "end": 1713269989604,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1713269989604,
      "end": 1713269989604,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1713269989604,
      "end": 1713269989604,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1713269989604,
      "end": 1713269989605,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1713269989605,
      "end": 1713269989605,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1713269989605,
      "end": 1713269989605,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1713269989605,
      "end": 1713269989605,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1713269989605,
      "end": 1713269989605,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1713269989605,
      "end": 1713269989605,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1713269989605,
      "end": 1713269989605,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1713269989605,
      "end": 1713269989605,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1713269989605,
      "end": 1713269989605,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1713269989605,
      "end": 1713269989605,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1713269989605,
      "end": 1713269989605,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1713269989605,
      "end": 1713269989605,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1713269989605,
      "end": 1713269989605,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1713269989605,
      "end": 1713269989605,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1713269989605,
      "end": 1713269989605,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1713269989605,
      "end": 1713269989605,
      "order": "normal"
    }
  ]
}
