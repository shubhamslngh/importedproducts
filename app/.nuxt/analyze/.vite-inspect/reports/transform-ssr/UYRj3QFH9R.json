{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@apollo/client/utilities/graphql/DocumentTransform.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Trie } from \"@wry/trie\";\nimport { canUseWeakMap, canUseWeakSet } from \"../common/canUse.js\";\nimport { checkDocument } from \"./getFromAST.js\";\nimport { invariant } from \"../globals/index.js\";\nimport { WeakCache } from \"@wry/caches\";\nimport { wrap } from \"optimism\";\nimport { cacheSizes } from \"../caching/index.js\";\nfunction identity(document) {\n    return document;\n}\nvar DocumentTransform = /** @class */ (function () {\n    function DocumentTransform(transform, options) {\n        if (options === void 0) { options = Object.create(null); }\n        this.resultCache = canUseWeakSet ? new WeakSet() : new Set();\n        this.transform = transform;\n        if (options.getCacheKey) {\n            // Override default `getCacheKey` function, which returns [document].\n            this.getCacheKey = options.getCacheKey;\n        }\n        this.cached = options.cache !== false;\n        this.resetCache();\n    }\n    // This default implementation of getCacheKey can be overridden by providing\n    // options.getCacheKey to the DocumentTransform constructor. In general, a\n    // getCacheKey function may either return an array of keys (often including\n    // the document) to be used as a cache key, or undefined to indicate the\n    // transform for this document should not be cached.\n    DocumentTransform.prototype.getCacheKey = function (document) {\n        return [document];\n    };\n    DocumentTransform.identity = function () {\n        // No need to cache this transform since it just returns the document\n        // unchanged. This should save a bit of memory that would otherwise be\n        // needed to populate the `documentCache` of this transform.\n        return new DocumentTransform(identity, { cache: false });\n    };\n    DocumentTransform.split = function (predicate, left, right) {\n        if (right === void 0) { right = DocumentTransform.identity(); }\n        return Object.assign(new DocumentTransform(function (document) {\n            var documentTransform = predicate(document) ? left : right;\n            return documentTransform.transformDocument(document);\n        }, \n        // Reasonably assume both `left` and `right` transforms handle their own caching\n        { cache: false }), { left: left, right: right });\n    };\n    /**\n     * Resets the internal cache of this transform, if it has one.\n     */\n    DocumentTransform.prototype.resetCache = function () {\n        var _this = this;\n        if (this.cached) {\n            var stableCacheKeys_1 = new Trie(canUseWeakMap);\n            this.performWork = wrap(DocumentTransform.prototype.performWork.bind(this), {\n                makeCacheKey: function (document) {\n                    var cacheKeys = _this.getCacheKey(document);\n                    if (cacheKeys) {\n                        invariant(Array.isArray(cacheKeys), 66);\n                        return stableCacheKeys_1.lookupArray(cacheKeys);\n                    }\n                },\n                max: cacheSizes[\"documentTransform.cache\"],\n                cache: (WeakCache),\n            });\n        }\n    };\n    DocumentTransform.prototype.performWork = function (document) {\n        checkDocument(document);\n        return this.transform(document);\n    };\n    DocumentTransform.prototype.transformDocument = function (document) {\n        // If a user passes an already transformed result back to this function,\n        // immediately return it.\n        if (this.resultCache.has(document)) {\n            return document;\n        }\n        var transformedDocument = this.performWork(document);\n        this.resultCache.add(transformedDocument);\n        return transformedDocument;\n    };\n    DocumentTransform.prototype.concat = function (otherTransform) {\n        var _this = this;\n        return Object.assign(new DocumentTransform(function (document) {\n            return otherTransform.transformDocument(_this.transformDocument(document));\n        }, \n        // Reasonably assume both transforms handle their own caching\n        { cache: false }), {\n            left: this,\n            right: otherTransform,\n        });\n    };\n    return DocumentTransform;\n}());\nexport { DocumentTransform };\n//# sourceMappingURL=DocumentTransform.js.map",
      "start": 1712968597337,
      "end": 1712968597398,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712968597398,
      "end": 1712968597398,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712968597398,
      "end": 1712968597398,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712968597398,
      "end": 1712968597398,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712968597398,
      "end": 1712968597398,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712968597398,
      "end": 1712968597398,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712968597398,
      "end": 1712968597398,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712968597398,
      "end": 1712968597398,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712968597398,
      "end": 1712968597398,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712968597398,
      "end": 1712968597398,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712968597398,
      "end": 1712968597398,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712968597398,
      "end": 1712968597398,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712968597398,
      "end": 1712968597398,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712968597398,
      "end": 1712968597398,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712968597398,
      "end": 1712968597398,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712968597398,
      "end": 1712968597398,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712968597398,
      "end": 1712968597398,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712968597398,
      "end": 1712968597398,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1712968597398,
      "end": 1712968597398,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712968597398,
      "end": 1712968597398,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712968597398,
      "end": 1712968597398,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712968597398,
      "end": 1712968597398,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { Trie } from \"@wry/trie\";\nimport { canUseWeakMap, canUseWeakSet } from \"../common/canUse.js\";\nimport { checkDocument } from \"./getFromAST.js\";\nimport { invariant } from \"../globals/index.js\";\nimport { WeakCache } from \"@wry/caches\";\nimport { wrap } from \"optimism\";\nimport { cacheSizes } from \"../caching/index.js\";\nfunction identity(document) {\n  return document;\n}\nvar DocumentTransform = (\n  /** @class */\n  function() {\n    function DocumentTransform2(transform, options) {\n      if (options === void 0) {\n        options = /* @__PURE__ */ Object.create(null);\n      }\n      this.resultCache = canUseWeakSet ? /* @__PURE__ */ new WeakSet() : /* @__PURE__ */ new Set();\n      this.transform = transform;\n      if (options.getCacheKey) {\n        this.getCacheKey = options.getCacheKey;\n      }\n      this.cached = options.cache !== false;\n      this.resetCache();\n    }\n    DocumentTransform2.prototype.getCacheKey = function(document) {\n      return [document];\n    };\n    DocumentTransform2.identity = function() {\n      return new DocumentTransform2(identity, { cache: false });\n    };\n    DocumentTransform2.split = function(predicate, left, right) {\n      if (right === void 0) {\n        right = DocumentTransform2.identity();\n      }\n      return Object.assign(new DocumentTransform2(\n        function(document) {\n          var documentTransform = predicate(document) ? left : right;\n          return documentTransform.transformDocument(document);\n        },\n        // Reasonably assume both `left` and `right` transforms handle their own caching\n        { cache: false }\n      ), { left, right });\n    };\n    DocumentTransform2.prototype.resetCache = function() {\n      var _this = this;\n      if (this.cached) {\n        var stableCacheKeys_1 = new Trie(canUseWeakMap);\n        this.performWork = wrap(DocumentTransform2.prototype.performWork.bind(this), {\n          makeCacheKey: function(document) {\n            var cacheKeys = _this.getCacheKey(document);\n            if (cacheKeys) {\n              invariant(Array.isArray(cacheKeys), 66);\n              return stableCacheKeys_1.lookupArray(cacheKeys);\n            }\n          },\n          max: cacheSizes[\"documentTransform.cache\"],\n          cache: WeakCache\n        });\n      }\n    };\n    DocumentTransform2.prototype.performWork = function(document) {\n      checkDocument(document);\n      return this.transform(document);\n    };\n    DocumentTransform2.prototype.transformDocument = function(document) {\n      if (this.resultCache.has(document)) {\n        return document;\n      }\n      var transformedDocument = this.performWork(document);\n      this.resultCache.add(transformedDocument);\n      return transformedDocument;\n    };\n    DocumentTransform2.prototype.concat = function(otherTransform) {\n      var _this = this;\n      return Object.assign(new DocumentTransform2(\n        function(document) {\n          return otherTransform.transformDocument(_this.transformDocument(document));\n        },\n        // Reasonably assume both transforms handle their own caching\n        { cache: false }\n      ), {\n        left: this,\n        right: otherTransform\n      });\n    };\n    return DocumentTransform2;\n  }()\n);\nexport { DocumentTransform };\n",
      "start": 1712968597398,
      "end": 1712968597958,
      "order": "normal",
      "sourcemaps": "{\n  \"version\": 3,\n  \"sources\": [\"/Users/shubhamsingh/namma/importedProds/node_modules/@apollo/client/utilities/graphql/DocumentTransform.js\"],\n  \"sourcesContent\": [\"import { Trie } from \\\"@wry/trie\\\";\\nimport { canUseWeakMap, canUseWeakSet } from \\\"../common/canUse.js\\\";\\nimport { checkDocument } from \\\"./getFromAST.js\\\";\\nimport { invariant } from \\\"../globals/index.js\\\";\\nimport { WeakCache } from \\\"@wry/caches\\\";\\nimport { wrap } from \\\"optimism\\\";\\nimport { cacheSizes } from \\\"../caching/index.js\\\";\\nfunction identity(document) {\\n    return document;\\n}\\nvar DocumentTransform = /** @class */ (function () {\\n    function DocumentTransform(transform, options) {\\n        if (options === void 0) { options = Object.create(null); }\\n        this.resultCache = canUseWeakSet ? new WeakSet() : new Set();\\n        this.transform = transform;\\n        if (options.getCacheKey) {\\n            // Override default `getCacheKey` function, which returns [document].\\n            this.getCacheKey = options.getCacheKey;\\n        }\\n        this.cached = options.cache !== false;\\n        this.resetCache();\\n    }\\n    // This default implementation of getCacheKey can be overridden by providing\\n    // options.getCacheKey to the DocumentTransform constructor. In general, a\\n    // getCacheKey function may either return an array of keys (often including\\n    // the document) to be used as a cache key, or undefined to indicate the\\n    // transform for this document should not be cached.\\n    DocumentTransform.prototype.getCacheKey = function (document) {\\n        return [document];\\n    };\\n    DocumentTransform.identity = function () {\\n        // No need to cache this transform since it just returns the document\\n        // unchanged. This should save a bit of memory that would otherwise be\\n        // needed to populate the `documentCache` of this transform.\\n        return new DocumentTransform(identity, { cache: false });\\n    };\\n    DocumentTransform.split = function (predicate, left, right) {\\n        if (right === void 0) { right = DocumentTransform.identity(); }\\n        return Object.assign(new DocumentTransform(function (document) {\\n            var documentTransform = predicate(document) ? left : right;\\n            return documentTransform.transformDocument(document);\\n        }, \\n        // Reasonably assume both `left` and `right` transforms handle their own caching\\n        { cache: false }), { left: left, right: right });\\n    };\\n    /**\\n     * Resets the internal cache of this transform, if it has one.\\n     */\\n    DocumentTransform.prototype.resetCache = function () {\\n        var _this = this;\\n        if (this.cached) {\\n            var stableCacheKeys_1 = new Trie(canUseWeakMap);\\n            this.performWork = wrap(DocumentTransform.prototype.performWork.bind(this), {\\n                makeCacheKey: function (document) {\\n                    var cacheKeys = _this.getCacheKey(document);\\n                    if (cacheKeys) {\\n                        invariant(Array.isArray(cacheKeys), 66);\\n                        return stableCacheKeys_1.lookupArray(cacheKeys);\\n                    }\\n                },\\n                max: cacheSizes[\\\"documentTransform.cache\\\"],\\n                cache: (WeakCache),\\n            });\\n        }\\n    };\\n    DocumentTransform.prototype.performWork = function (document) {\\n        checkDocument(document);\\n        return this.transform(document);\\n    };\\n    DocumentTransform.prototype.transformDocument = function (document) {\\n        // If a user passes an already transformed result back to this function,\\n        // immediately return it.\\n        if (this.resultCache.has(document)) {\\n            return document;\\n        }\\n        var transformedDocument = this.performWork(document);\\n        this.resultCache.add(transformedDocument);\\n        return transformedDocument;\\n    };\\n    DocumentTransform.prototype.concat = function (otherTransform) {\\n        var _this = this;\\n        return Object.assign(new DocumentTransform(function (document) {\\n            return otherTransform.transformDocument(_this.transformDocument(document));\\n        }, \\n        // Reasonably assume both transforms handle their own caching\\n        { cache: false }), {\\n            left: this,\\n            right: otherTransform,\\n        });\\n    };\\n    return DocumentTransform;\\n}());\\nexport { DocumentTransform };\\n//# sourceMappingURL=DocumentTransform.js.map\"],\n  \"mappings\": \"AAAA,SAAS,YAAY;AACrB,SAAS,eAAe,qBAAqB;AAC7C,SAAS,qBAAqB;AAC9B,SAAS,iBAAiB;AAC1B,SAAS,iBAAiB;AAC1B,SAAS,YAAY;AACrB,SAAS,kBAAkB;AAC3B,SAAS,SAAS,UAAU;AACxB,SAAO;AACX;AACA,IAAI;AAAA;AAAA,EAAmC,WAAY;AAC/C,aAASA,mBAAkB,WAAW,SAAS;AAC3C,UAAI,YAAY,QAAQ;AAAE,kBAAU,uBAAO,OAAO,IAAI;AAAA,MAAG;AACzD,WAAK,cAAc,gBAAgB,oBAAI,QAAQ,IAAI,oBAAI,IAAI;AAC3D,WAAK,YAAY;AACjB,UAAI,QAAQ,aAAa;AAErB,aAAK,cAAc,QAAQ;AAAA,MAC/B;AACA,WAAK,SAAS,QAAQ,UAAU;AAChC,WAAK,WAAW;AAAA,IACpB;AAMA,IAAAA,mBAAkB,UAAU,cAAc,SAAU,UAAU;AAC1D,aAAO,CAAC,QAAQ;AAAA,IACpB;AACA,IAAAA,mBAAkB,WAAW,WAAY;AAIrC,aAAO,IAAIA,mBAAkB,UAAU,EAAE,OAAO,MAAM,CAAC;AAAA,IAC3D;AACA,IAAAA,mBAAkB,QAAQ,SAAU,WAAW,MAAM,OAAO;AACxD,UAAI,UAAU,QAAQ;AAAE,gBAAQA,mBAAkB,SAAS;AAAA,MAAG;AAC9D,aAAO,OAAO,OAAO,IAAIA;AAAA,QAAkB,SAAU,UAAU;AAC3D,cAAI,oBAAoB,UAAU,QAAQ,IAAI,OAAO;AACrD,iBAAO,kBAAkB,kBAAkB,QAAQ;AAAA,QACvD;AAAA;AAAA,QAEA,EAAE,OAAO,MAAM;AAAA,MAAC,GAAG,EAAE,MAAY,MAAa,CAAC;AAAA,IACnD;AAIA,IAAAA,mBAAkB,UAAU,aAAa,WAAY;AACjD,UAAI,QAAQ;AACZ,UAAI,KAAK,QAAQ;AACb,YAAI,oBAAoB,IAAI,KAAK,aAAa;AAC9C,aAAK,cAAc,KAAKA,mBAAkB,UAAU,YAAY,KAAK,IAAI,GAAG;AAAA,UACxE,cAAc,SAAU,UAAU;AAC9B,gBAAI,YAAY,MAAM,YAAY,QAAQ;AAC1C,gBAAI,WAAW;AACX,wBAAU,MAAM,QAAQ,SAAS,GAAG,EAAE;AACtC,qBAAO,kBAAkB,YAAY,SAAS;AAAA,YAClD;AAAA,UACJ;AAAA,UACA,KAAK,WAAW,yBAAyB;AAAA,UACzC,OAAQ;AAAA,QACZ,CAAC;AAAA,MACL;AAAA,IACJ;AACA,IAAAA,mBAAkB,UAAU,cAAc,SAAU,UAAU;AAC1D,oBAAc,QAAQ;AACtB,aAAO,KAAK,UAAU,QAAQ;AAAA,IAClC;AACA,IAAAA,mBAAkB,UAAU,oBAAoB,SAAU,UAAU;AAGhE,UAAI,KAAK,YAAY,IAAI,QAAQ,GAAG;AAChC,eAAO;AAAA,MACX;AACA,UAAI,sBAAsB,KAAK,YAAY,QAAQ;AACnD,WAAK,YAAY,IAAI,mBAAmB;AACxC,aAAO;AAAA,IACX;AACA,IAAAA,mBAAkB,UAAU,SAAS,SAAU,gBAAgB;AAC3D,UAAI,QAAQ;AACZ,aAAO,OAAO,OAAO,IAAIA;AAAA,QAAkB,SAAU,UAAU;AAC3D,iBAAO,eAAe,kBAAkB,MAAM,kBAAkB,QAAQ,CAAC;AAAA,QAC7E;AAAA;AAAA,QAEA,EAAE,OAAO,MAAM;AAAA,MAAC,GAAG;AAAA,QACf,MAAM;AAAA,QACN,OAAO;AAAA,MACX,CAAC;AAAA,IACL;AACA,WAAOA;AAAA,EACX,EAAE;AAAA;AACF,SAAS;\",\n  \"names\": [\"DocumentTransform\"]\n}\n"
    },
    {
      "name": "vite:css-post",
      "start": 1712968597958,
      "end": 1712968597958,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712968597958,
      "end": 1712968597958,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712968597958,
      "end": 1712968597958,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712968597958,
      "end": 1712968597958,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712968597958,
      "end": 1712968597958,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712968597958,
      "end": 1712968597958,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712968597958,
      "end": 1712968597958,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712968597958,
      "end": 1712968597958,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712968597958,
      "end": 1712968597958,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712968597958,
      "end": 1712968597958,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712968597958,
      "end": 1712968597958,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712968597958,
      "end": 1712968597958,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712968597958,
      "end": 1712968597958,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712968597958,
      "end": 1712968597958,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712968597958,
      "end": 1712968597958,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1712968597958,
      "end": 1712968597958,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712968597958,
      "end": 1712968597958,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712968597958,
      "end": 1712968597958,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712968597958,
      "end": 1712968597958,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712968597958,
      "end": 1712968597958,
      "order": "normal"
    }
  ]
}
