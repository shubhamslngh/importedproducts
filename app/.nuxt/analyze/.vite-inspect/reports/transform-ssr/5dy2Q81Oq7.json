{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@apollo/client/cache/core/cache.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { __assign, __rest } from \"tslib\";\nimport { wrap } from \"optimism\";\nimport { cacheSizes, getFragmentQueryDocument, } from \"../../utilities/index.js\";\nimport { WeakCache } from \"@wry/caches\";\nimport { getApolloCacheMemoryInternals } from \"../../utilities/caching/getMemoryInternals.js\";\nvar ApolloCache = /** @class */ (function () {\n    function ApolloCache() {\n        this.assumeImmutableResults = false;\n        // Make sure we compute the same (===) fragment query document every\n        // time we receive the same fragment in readFragment.\n        this.getFragmentDoc = wrap(getFragmentQueryDocument, {\n            max: cacheSizes[\"cache.fragmentQueryDocuments\"] ||\n                1000 /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */,\n            cache: WeakCache,\n        });\n    }\n    // Transactional API\n    // The batch method is intended to replace/subsume both performTransaction\n    // and recordOptimisticTransaction, but performTransaction came first, so we\n    // provide a default batch implementation that's just another way of calling\n    // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can\n    // override the batch method to do more interesting things with its options.\n    ApolloCache.prototype.batch = function (options) {\n        var _this = this;\n        var optimisticId = typeof options.optimistic === \"string\" ? options.optimistic\n            : options.optimistic === false ? null\n                : void 0;\n        var updateResult;\n        this.performTransaction(function () { return (updateResult = options.update(_this)); }, optimisticId);\n        return updateResult;\n    };\n    ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {\n        this.performTransaction(transaction, optimisticId);\n    };\n    // Optional API\n    // Called once per input document, allowing the cache to make static changes\n    // to the query, such as adding __typename fields.\n    ApolloCache.prototype.transformDocument = function (document) {\n        return document;\n    };\n    // Called before each ApolloLink request, allowing the cache to make dynamic\n    // changes to the query, such as filling in missing fragment definitions.\n    ApolloCache.prototype.transformForLink = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.identify = function (object) {\n        return;\n    };\n    ApolloCache.prototype.gc = function () {\n        return [];\n    };\n    ApolloCache.prototype.modify = function (options) {\n        return false;\n    };\n    // DataProxy API\n    ApolloCache.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = !!options.optimistic; }\n        return this.read(__assign(__assign({}, options), { rootId: options.id || \"ROOT_QUERY\", optimistic: optimistic }));\n    };\n    ApolloCache.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = !!options.optimistic; }\n        return this.read(__assign(__assign({}, options), { query: this.getFragmentDoc(options.fragment, options.fragmentName), rootId: options.id, optimistic: optimistic }));\n    };\n    ApolloCache.prototype.writeQuery = function (_a) {\n        var id = _a.id, data = _a.data, options = __rest(_a, [\"id\", \"data\"]);\n        return this.write(Object.assign(options, {\n            dataId: id || \"ROOT_QUERY\",\n            result: data,\n        }));\n    };\n    ApolloCache.prototype.writeFragment = function (_a) {\n        var id = _a.id, data = _a.data, fragment = _a.fragment, fragmentName = _a.fragmentName, options = __rest(_a, [\"id\", \"data\", \"fragment\", \"fragmentName\"]);\n        return this.write(Object.assign(options, {\n            query: this.getFragmentDoc(fragment, fragmentName),\n            dataId: id,\n            result: data,\n        }));\n    };\n    ApolloCache.prototype.updateQuery = function (options, update) {\n        return this.batch({\n            update: function (cache) {\n                var value = cache.readQuery(options);\n                var data = update(value);\n                if (data === void 0 || data === null)\n                    return value;\n                cache.writeQuery(__assign(__assign({}, options), { data: data }));\n                return data;\n            },\n        });\n    };\n    ApolloCache.prototype.updateFragment = function (options, update) {\n        return this.batch({\n            update: function (cache) {\n                var value = cache.readFragment(options);\n                var data = update(value);\n                if (data === void 0 || data === null)\n                    return value;\n                cache.writeFragment(__assign(__assign({}, options), { data: data }));\n                return data;\n            },\n        });\n    };\n    return ApolloCache;\n}());\nexport { ApolloCache };\nif (globalThis.__DEV__ !== false) {\n    ApolloCache.prototype.getMemoryInternals = getApolloCacheMemoryInternals;\n}\n//# sourceMappingURL=cache.js.map",
      "start": 1710863483662,
      "end": 1710863483670,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710863483670,
      "end": 1710863483670,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710863483670,
      "end": 1710863483670,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710863483670,
      "end": 1710863483670,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710863483670,
      "end": 1710863483670,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1710863483670,
      "end": 1710863483670,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1710863483670,
      "end": 1710863483670,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710863483670,
      "end": 1710863483670,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710863483670,
      "end": 1710863483670,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710863483670,
      "end": 1710863483670,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710863483670,
      "end": 1710863483670,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710863483670,
      "end": 1710863483670,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710863483670,
      "end": 1710863483670,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710863483670,
      "end": 1710863483670,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710863483670,
      "end": 1710863483670,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710863483670,
      "end": 1710863483670,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710863483670,
      "end": 1710863483670,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710863483670,
      "end": 1710863483670,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1710863483670,
      "end": 1710863483670,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710863483670,
      "end": 1710863483670,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710863483670,
      "end": 1710863483670,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710863483670,
      "end": 1710863483670,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { __assign, __rest } from \"tslib\";\nimport { wrap } from \"optimism\";\nimport { cacheSizes, getFragmentQueryDocument } from \"../../utilities/index.js\";\nimport { WeakCache } from \"@wry/caches\";\nimport { getApolloCacheMemoryInternals } from \"../../utilities/caching/getMemoryInternals.js\";\nvar ApolloCache = (\n  /** @class */\n  function() {\n    function ApolloCache2() {\n      this.assumeImmutableResults = false;\n      this.getFragmentDoc = wrap(getFragmentQueryDocument, {\n        max: cacheSizes[\"cache.fragmentQueryDocuments\"] || 1e3,\n        cache: WeakCache\n      });\n    }\n    ApolloCache2.prototype.batch = function(options) {\n      var _this = this;\n      var optimisticId = typeof options.optimistic === \"string\" ? options.optimistic : options.optimistic === false ? null : void 0;\n      var updateResult;\n      this.performTransaction(function() {\n        return updateResult = options.update(_this);\n      }, optimisticId);\n      return updateResult;\n    };\n    ApolloCache2.prototype.recordOptimisticTransaction = function(transaction, optimisticId) {\n      this.performTransaction(transaction, optimisticId);\n    };\n    ApolloCache2.prototype.transformDocument = function(document) {\n      return document;\n    };\n    ApolloCache2.prototype.transformForLink = function(document) {\n      return document;\n    };\n    ApolloCache2.prototype.identify = function(object) {\n      return;\n    };\n    ApolloCache2.prototype.gc = function() {\n      return [];\n    };\n    ApolloCache2.prototype.modify = function(options) {\n      return false;\n    };\n    ApolloCache2.prototype.readQuery = function(options, optimistic) {\n      if (optimistic === void 0) {\n        optimistic = !!options.optimistic;\n      }\n      return this.read(__assign(__assign({}, options), { rootId: options.id || \"ROOT_QUERY\", optimistic }));\n    };\n    ApolloCache2.prototype.readFragment = function(options, optimistic) {\n      if (optimistic === void 0) {\n        optimistic = !!options.optimistic;\n      }\n      return this.read(__assign(__assign({}, options), { query: this.getFragmentDoc(options.fragment, options.fragmentName), rootId: options.id, optimistic }));\n    };\n    ApolloCache2.prototype.writeQuery = function(_a) {\n      var id = _a.id, data = _a.data, options = __rest(_a, [\"id\", \"data\"]);\n      return this.write(Object.assign(options, {\n        dataId: id || \"ROOT_QUERY\",\n        result: data\n      }));\n    };\n    ApolloCache2.prototype.writeFragment = function(_a) {\n      var id = _a.id, data = _a.data, fragment = _a.fragment, fragmentName = _a.fragmentName, options = __rest(_a, [\"id\", \"data\", \"fragment\", \"fragmentName\"]);\n      return this.write(Object.assign(options, {\n        query: this.getFragmentDoc(fragment, fragmentName),\n        dataId: id,\n        result: data\n      }));\n    };\n    ApolloCache2.prototype.updateQuery = function(options, update) {\n      return this.batch({\n        update: function(cache) {\n          var value = cache.readQuery(options);\n          var data = update(value);\n          if (data === void 0 || data === null)\n            return value;\n          cache.writeQuery(__assign(__assign({}, options), { data }));\n          return data;\n        }\n      });\n    };\n    ApolloCache2.prototype.updateFragment = function(options, update) {\n      return this.batch({\n        update: function(cache) {\n          var value = cache.readFragment(options);\n          var data = update(value);\n          if (data === void 0 || data === null)\n            return value;\n          cache.writeFragment(__assign(__assign({}, options), { data }));\n          return data;\n        }\n      });\n    };\n    return ApolloCache2;\n  }()\n);\nexport { ApolloCache };\nif (globalThis.__DEV__ !== false) {\n  ApolloCache.prototype.getMemoryInternals = getApolloCacheMemoryInternals;\n}\n",
      "start": 1710863483670,
      "end": 1710863483992,
      "order": "normal",
      "sourcemaps": "{\n  \"version\": 3,\n  \"sources\": [\"/Users/shubhamsingh/namma/importedProds/node_modules/@apollo/client/cache/core/cache.js\"],\n  \"sourcesContent\": [\"import { __assign, __rest } from \\\"tslib\\\";\\nimport { wrap } from \\\"optimism\\\";\\nimport { cacheSizes, getFragmentQueryDocument, } from \\\"../../utilities/index.js\\\";\\nimport { WeakCache } from \\\"@wry/caches\\\";\\nimport { getApolloCacheMemoryInternals } from \\\"../../utilities/caching/getMemoryInternals.js\\\";\\nvar ApolloCache = /** @class */ (function () {\\n    function ApolloCache() {\\n        this.assumeImmutableResults = false;\\n        // Make sure we compute the same (===) fragment query document every\\n        // time we receive the same fragment in readFragment.\\n        this.getFragmentDoc = wrap(getFragmentQueryDocument, {\\n            max: cacheSizes[\\\"cache.fragmentQueryDocuments\\\"] ||\\n                1000 /* defaultCacheSizes[\\\"cache.fragmentQueryDocuments\\\"] */,\\n            cache: WeakCache,\\n        });\\n    }\\n    // Transactional API\\n    // The batch method is intended to replace/subsume both performTransaction\\n    // and recordOptimisticTransaction, but performTransaction came first, so we\\n    // provide a default batch implementation that's just another way of calling\\n    // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can\\n    // override the batch method to do more interesting things with its options.\\n    ApolloCache.prototype.batch = function (options) {\\n        var _this = this;\\n        var optimisticId = typeof options.optimistic === \\\"string\\\" ? options.optimistic\\n            : options.optimistic === false ? null\\n                : void 0;\\n        var updateResult;\\n        this.performTransaction(function () { return (updateResult = options.update(_this)); }, optimisticId);\\n        return updateResult;\\n    };\\n    ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {\\n        this.performTransaction(transaction, optimisticId);\\n    };\\n    // Optional API\\n    // Called once per input document, allowing the cache to make static changes\\n    // to the query, such as adding __typename fields.\\n    ApolloCache.prototype.transformDocument = function (document) {\\n        return document;\\n    };\\n    // Called before each ApolloLink request, allowing the cache to make dynamic\\n    // changes to the query, such as filling in missing fragment definitions.\\n    ApolloCache.prototype.transformForLink = function (document) {\\n        return document;\\n    };\\n    ApolloCache.prototype.identify = function (object) {\\n        return;\\n    };\\n    ApolloCache.prototype.gc = function () {\\n        return [];\\n    };\\n    ApolloCache.prototype.modify = function (options) {\\n        return false;\\n    };\\n    // DataProxy API\\n    ApolloCache.prototype.readQuery = function (options, optimistic) {\\n        if (optimistic === void 0) { optimistic = !!options.optimistic; }\\n        return this.read(__assign(__assign({}, options), { rootId: options.id || \\\"ROOT_QUERY\\\", optimistic: optimistic }));\\n    };\\n    ApolloCache.prototype.readFragment = function (options, optimistic) {\\n        if (optimistic === void 0) { optimistic = !!options.optimistic; }\\n        return this.read(__assign(__assign({}, options), { query: this.getFragmentDoc(options.fragment, options.fragmentName), rootId: options.id, optimistic: optimistic }));\\n    };\\n    ApolloCache.prototype.writeQuery = function (_a) {\\n        var id = _a.id, data = _a.data, options = __rest(_a, [\\\"id\\\", \\\"data\\\"]);\\n        return this.write(Object.assign(options, {\\n            dataId: id || \\\"ROOT_QUERY\\\",\\n            result: data,\\n        }));\\n    };\\n    ApolloCache.prototype.writeFragment = function (_a) {\\n        var id = _a.id, data = _a.data, fragment = _a.fragment, fragmentName = _a.fragmentName, options = __rest(_a, [\\\"id\\\", \\\"data\\\", \\\"fragment\\\", \\\"fragmentName\\\"]);\\n        return this.write(Object.assign(options, {\\n            query: this.getFragmentDoc(fragment, fragmentName),\\n            dataId: id,\\n            result: data,\\n        }));\\n    };\\n    ApolloCache.prototype.updateQuery = function (options, update) {\\n        return this.batch({\\n            update: function (cache) {\\n                var value = cache.readQuery(options);\\n                var data = update(value);\\n                if (data === void 0 || data === null)\\n                    return value;\\n                cache.writeQuery(__assign(__assign({}, options), { data: data }));\\n                return data;\\n            },\\n        });\\n    };\\n    ApolloCache.prototype.updateFragment = function (options, update) {\\n        return this.batch({\\n            update: function (cache) {\\n                var value = cache.readFragment(options);\\n                var data = update(value);\\n                if (data === void 0 || data === null)\\n                    return value;\\n                cache.writeFragment(__assign(__assign({}, options), { data: data }));\\n                return data;\\n            },\\n        });\\n    };\\n    return ApolloCache;\\n}());\\nexport { ApolloCache };\\nif (globalThis.__DEV__ !== false) {\\n    ApolloCache.prototype.getMemoryInternals = getApolloCacheMemoryInternals;\\n}\\n//# sourceMappingURL=cache.js.map\"],\n  \"mappings\": \"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\",\n  \"names\": [\"ApolloCache\"]\n}\n"
    },
    {
      "name": "vite:css-post",
      "start": 1710863483992,
      "end": 1710863483992,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710863483992,
      "end": 1710863483992,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710863483992,
      "end": 1710863483992,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710863483992,
      "end": 1710863483992,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710863483992,
      "end": 1710863483992,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710863483992,
      "end": 1710863483992,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710863483992,
      "end": 1710863483992,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710863483992,
      "end": 1710863483992,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710863483992,
      "end": 1710863483992,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710863483992,
      "end": 1710863483992,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710863483992,
      "end": 1710863483992,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710863483992,
      "end": 1710863483992,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710863483992,
      "end": 1710863483992,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710863483992,
      "end": 1710863483992,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710863483992,
      "end": 1710863483992,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1710863483992,
      "end": 1710863483992,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710863483992,
      "end": 1710863483992,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710863483992,
      "end": 1710863483992,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710863483992,
      "end": 1710863483992,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710863483992,
      "end": 1710863483992,
      "order": "normal"
    }
  ]
}
