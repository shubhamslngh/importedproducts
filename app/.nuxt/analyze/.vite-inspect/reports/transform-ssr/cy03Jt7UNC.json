{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@apollo/client/link/core/ApolloLink.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { newInvariantError, invariant } from \"../../utilities/globals/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { validateOperation, createOperation, transformOperation, } from \"../utils/index.js\";\nfunction passthrough(op, forward) {\n    return (forward ? forward(op) : Observable.of());\n}\nfunction toLink(handler) {\n    return typeof handler === \"function\" ? new ApolloLink(handler) : handler;\n}\nfunction isTerminating(link) {\n    return link.request.length <= 1;\n}\nvar ApolloLink = /** @class */ (function () {\n    function ApolloLink(request) {\n        if (request)\n            this.request = request;\n    }\n    ApolloLink.empty = function () {\n        return new ApolloLink(function () { return Observable.of(); });\n    };\n    ApolloLink.from = function (links) {\n        if (links.length === 0)\n            return ApolloLink.empty();\n        return links.map(toLink).reduce(function (x, y) { return x.concat(y); });\n    };\n    ApolloLink.split = function (test, left, right) {\n        var leftLink = toLink(left);\n        var rightLink = toLink(right || new ApolloLink(passthrough));\n        var ret;\n        if (isTerminating(leftLink) && isTerminating(rightLink)) {\n            ret = new ApolloLink(function (operation) {\n                return test(operation) ?\n                    leftLink.request(operation) || Observable.of()\n                    : rightLink.request(operation) || Observable.of();\n            });\n        }\n        else {\n            ret = new ApolloLink(function (operation, forward) {\n                return test(operation) ?\n                    leftLink.request(operation, forward) || Observable.of()\n                    : rightLink.request(operation, forward) || Observable.of();\n            });\n        }\n        return Object.assign(ret, { left: leftLink, right: rightLink });\n    };\n    ApolloLink.execute = function (link, operation) {\n        return (link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of());\n    };\n    ApolloLink.concat = function (first, second) {\n        var firstLink = toLink(first);\n        if (isTerminating(firstLink)) {\n            globalThis.__DEV__ !== false && invariant.warn(35, firstLink);\n            return firstLink;\n        }\n        var nextLink = toLink(second);\n        var ret;\n        if (isTerminating(nextLink)) {\n            ret = new ApolloLink(function (operation) {\n                return firstLink.request(operation, function (op) { return nextLink.request(op) || Observable.of(); }) || Observable.of();\n            });\n        }\n        else {\n            ret = new ApolloLink(function (operation, forward) {\n                return (firstLink.request(operation, function (op) {\n                    return nextLink.request(op, forward) || Observable.of();\n                }) || Observable.of());\n            });\n        }\n        return Object.assign(ret, { left: firstLink, right: nextLink });\n    };\n    ApolloLink.prototype.split = function (test, left, right) {\n        return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));\n    };\n    ApolloLink.prototype.concat = function (next) {\n        return ApolloLink.concat(this, next);\n    };\n    ApolloLink.prototype.request = function (operation, forward) {\n        throw newInvariantError(36);\n    };\n    ApolloLink.prototype.onError = function (error, observer) {\n        if (observer && observer.error) {\n            observer.error(error);\n            // Returning false indicates that observer.error does not need to be\n            // called again, since it was already called (on the previous line).\n            // Calling observer.error again would not cause any real problems,\n            // since only the first call matters, but custom onError functions\n            // might have other reasons for wanting to prevent the default\n            // behavior by returning false.\n            return false;\n        }\n        // Throw errors will be passed to observer.error.\n        throw error;\n    };\n    ApolloLink.prototype.setOnError = function (fn) {\n        this.onError = fn;\n        return this;\n    };\n    return ApolloLink;\n}());\nexport { ApolloLink };\n//# sourceMappingURL=ApolloLink.js.map",
      "start": 1716330193119,
      "end": 1716330193141,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716330193141,
      "end": 1716330193141,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716330193141,
      "end": 1716330193141,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716330193141,
      "end": 1716330193141,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716330193141,
      "end": 1716330193141,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1716330193141,
      "end": 1716330193141,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1716330193141,
      "end": 1716330193141,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1716330193141,
      "end": 1716330193141,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1716330193141,
      "end": 1716330193141,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1716330193141,
      "end": 1716330193141,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1716330193141,
      "end": 1716330193141,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1716330193141,
      "end": 1716330193141,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1716330193141,
      "end": 1716330193141,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1716330193141,
      "end": 1716330193141,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716330193141,
      "end": 1716330193141,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716330193141,
      "end": 1716330193141,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716330193141,
      "end": 1716330193141,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716330193141,
      "end": 1716330193141,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1716330193141,
      "end": 1716330193141,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1716330193141,
      "end": 1716330193142,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716330193142,
      "end": 1716330193142,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1716330193142,
      "end": 1716330193142,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { newInvariantError, invariant } from \"../../utilities/globals/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { validateOperation, createOperation, transformOperation } from \"../utils/index.js\";\nfunction passthrough(op, forward) {\n  return forward ? forward(op) : Observable.of();\n}\nfunction toLink(handler) {\n  return typeof handler === \"function\" ? new ApolloLink(handler) : handler;\n}\nfunction isTerminating(link) {\n  return link.request.length <= 1;\n}\nvar ApolloLink = (\n  /** @class */\n  function() {\n    function ApolloLink2(request) {\n      if (request)\n        this.request = request;\n    }\n    ApolloLink2.empty = function() {\n      return new ApolloLink2(function() {\n        return Observable.of();\n      });\n    };\n    ApolloLink2.from = function(links) {\n      if (links.length === 0)\n        return ApolloLink2.empty();\n      return links.map(toLink).reduce(function(x, y) {\n        return x.concat(y);\n      });\n    };\n    ApolloLink2.split = function(test, left, right) {\n      var leftLink = toLink(left);\n      var rightLink = toLink(right || new ApolloLink2(passthrough));\n      var ret;\n      if (isTerminating(leftLink) && isTerminating(rightLink)) {\n        ret = new ApolloLink2(function(operation) {\n          return test(operation) ? leftLink.request(operation) || Observable.of() : rightLink.request(operation) || Observable.of();\n        });\n      } else {\n        ret = new ApolloLink2(function(operation, forward) {\n          return test(operation) ? leftLink.request(operation, forward) || Observable.of() : rightLink.request(operation, forward) || Observable.of();\n        });\n      }\n      return Object.assign(ret, { left: leftLink, right: rightLink });\n    };\n    ApolloLink2.execute = function(link, operation) {\n      return link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of();\n    };\n    ApolloLink2.concat = function(first, second) {\n      var firstLink = toLink(first);\n      if (isTerminating(firstLink)) {\n        globalThis.__DEV__ !== false && invariant.warn(35, firstLink);\n        return firstLink;\n      }\n      var nextLink = toLink(second);\n      var ret;\n      if (isTerminating(nextLink)) {\n        ret = new ApolloLink2(function(operation) {\n          return firstLink.request(operation, function(op) {\n            return nextLink.request(op) || Observable.of();\n          }) || Observable.of();\n        });\n      } else {\n        ret = new ApolloLink2(function(operation, forward) {\n          return firstLink.request(operation, function(op) {\n            return nextLink.request(op, forward) || Observable.of();\n          }) || Observable.of();\n        });\n      }\n      return Object.assign(ret, { left: firstLink, right: nextLink });\n    };\n    ApolloLink2.prototype.split = function(test, left, right) {\n      return this.concat(ApolloLink2.split(test, left, right || new ApolloLink2(passthrough)));\n    };\n    ApolloLink2.prototype.concat = function(next) {\n      return ApolloLink2.concat(this, next);\n    };\n    ApolloLink2.prototype.request = function(operation, forward) {\n      throw newInvariantError(36);\n    };\n    ApolloLink2.prototype.onError = function(error, observer) {\n      if (observer && observer.error) {\n        observer.error(error);\n        return false;\n      }\n      throw error;\n    };\n    ApolloLink2.prototype.setOnError = function(fn) {\n      this.onError = fn;\n      return this;\n    };\n    return ApolloLink2;\n  }()\n);\nexport { ApolloLink };\n",
      "start": 1716330193142,
      "end": 1716330193865,
      "order": "normal",
      "sourcemaps": "{\n  \"version\": 3,\n  \"sources\": [\"/Users/shubhamsingh/namma/importedProds/node_modules/@apollo/client/link/core/ApolloLink.js\"],\n  \"sourcesContent\": [\"import { newInvariantError, invariant } from \\\"../../utilities/globals/index.js\\\";\\nimport { Observable } from \\\"../../utilities/index.js\\\";\\nimport { validateOperation, createOperation, transformOperation, } from \\\"../utils/index.js\\\";\\nfunction passthrough(op, forward) {\\n    return (forward ? forward(op) : Observable.of());\\n}\\nfunction toLink(handler) {\\n    return typeof handler === \\\"function\\\" ? new ApolloLink(handler) : handler;\\n}\\nfunction isTerminating(link) {\\n    return link.request.length <= 1;\\n}\\nvar ApolloLink = /** @class */ (function () {\\n    function ApolloLink(request) {\\n        if (request)\\n            this.request = request;\\n    }\\n    ApolloLink.empty = function () {\\n        return new ApolloLink(function () { return Observable.of(); });\\n    };\\n    ApolloLink.from = function (links) {\\n        if (links.length === 0)\\n            return ApolloLink.empty();\\n        return links.map(toLink).reduce(function (x, y) { return x.concat(y); });\\n    };\\n    ApolloLink.split = function (test, left, right) {\\n        var leftLink = toLink(left);\\n        var rightLink = toLink(right || new ApolloLink(passthrough));\\n        var ret;\\n        if (isTerminating(leftLink) && isTerminating(rightLink)) {\\n            ret = new ApolloLink(function (operation) {\\n                return test(operation) ?\\n                    leftLink.request(operation) || Observable.of()\\n                    : rightLink.request(operation) || Observable.of();\\n            });\\n        }\\n        else {\\n            ret = new ApolloLink(function (operation, forward) {\\n                return test(operation) ?\\n                    leftLink.request(operation, forward) || Observable.of()\\n                    : rightLink.request(operation, forward) || Observable.of();\\n            });\\n        }\\n        return Object.assign(ret, { left: leftLink, right: rightLink });\\n    };\\n    ApolloLink.execute = function (link, operation) {\\n        return (link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of());\\n    };\\n    ApolloLink.concat = function (first, second) {\\n        var firstLink = toLink(first);\\n        if (isTerminating(firstLink)) {\\n            globalThis.__DEV__ !== false && invariant.warn(35, firstLink);\\n            return firstLink;\\n        }\\n        var nextLink = toLink(second);\\n        var ret;\\n        if (isTerminating(nextLink)) {\\n            ret = new ApolloLink(function (operation) {\\n                return firstLink.request(operation, function (op) { return nextLink.request(op) || Observable.of(); }) || Observable.of();\\n            });\\n        }\\n        else {\\n            ret = new ApolloLink(function (operation, forward) {\\n                return (firstLink.request(operation, function (op) {\\n                    return nextLink.request(op, forward) || Observable.of();\\n                }) || Observable.of());\\n            });\\n        }\\n        return Object.assign(ret, { left: firstLink, right: nextLink });\\n    };\\n    ApolloLink.prototype.split = function (test, left, right) {\\n        return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));\\n    };\\n    ApolloLink.prototype.concat = function (next) {\\n        return ApolloLink.concat(this, next);\\n    };\\n    ApolloLink.prototype.request = function (operation, forward) {\\n        throw newInvariantError(36);\\n    };\\n    ApolloLink.prototype.onError = function (error, observer) {\\n        if (observer && observer.error) {\\n            observer.error(error);\\n            // Returning false indicates that observer.error does not need to be\\n            // called again, since it was already called (on the previous line).\\n            // Calling observer.error again would not cause any real problems,\\n            // since only the first call matters, but custom onError functions\\n            // might have other reasons for wanting to prevent the default\\n            // behavior by returning false.\\n            return false;\\n        }\\n        // Throw errors will be passed to observer.error.\\n        throw error;\\n    };\\n    ApolloLink.prototype.setOnError = function (fn) {\\n        this.onError = fn;\\n        return this;\\n    };\\n    return ApolloLink;\\n}());\\nexport { ApolloLink };\\n//# sourceMappingURL=ApolloLink.js.map\"],\n  \"mappings\": \"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\",\n  \"names\": [\"ApolloLink\"]\n}\n"
    },
    {
      "name": "vite:css-post",
      "start": 1716330193865,
      "end": 1716330193865,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1716330193865,
      "end": 1716330193865,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1716330193865,
      "end": 1716330193865,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1716330193865,
      "end": 1716330193865,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1716330193865,
      "end": 1716330193865,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1716330193865,
      "end": 1716330193865,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1716330193865,
      "end": 1716330193865,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716330193865,
      "end": 1716330193865,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716330193865,
      "end": 1716330193865,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716330193865,
      "end": 1716330193865,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716330193865,
      "end": 1716330193865,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716330193865,
      "end": 1716330193865,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716330193865,
      "end": 1716330193865,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716330193865,
      "end": 1716330193865,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716330193865,
      "end": 1716330193865,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1716330193865,
      "end": 1716330193865,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1716330193865,
      "end": 1716330193865,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1716330193865,
      "end": 1716330193865,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1716330193865,
      "end": 1716330193865,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1716330193865,
      "end": 1716330193865,
      "order": "normal"
    }
  ]
}
