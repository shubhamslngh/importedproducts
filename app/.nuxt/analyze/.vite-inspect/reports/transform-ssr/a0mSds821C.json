{
  "resolvedId": "/Users/shubhamsingh/namma/importedProds/node_modules/@apollo/client/react/hooks/useSuspenseQuery.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { __assign, __spreadArray } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { ApolloError, NetworkStatus } from \"../../core/index.js\";\nimport { isNonEmptyArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { __use, useDeepMemo, wrapHook } from \"./internal/index.js\";\nimport { getSuspenseCache } from \"../internal/index.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport { skipToken } from \"./constants.js\";\nexport function useSuspenseQuery(query, options) {\n    if (options === void 0) { options = Object.create(null); }\n    return wrapHook(\"useSuspenseQuery\", _useSuspenseQuery, useApolloClient(typeof options === \"object\" ? options.client : undefined))(query, options);\n}\nfunction _useSuspenseQuery(query, options) {\n    var client = useApolloClient(options.client);\n    var suspenseCache = getSuspenseCache(client);\n    var watchQueryOptions = useWatchQueryOptions({\n        client: client,\n        query: query,\n        options: options,\n    });\n    var fetchPolicy = watchQueryOptions.fetchPolicy, variables = watchQueryOptions.variables;\n    var _a = options.queryKey, queryKey = _a === void 0 ? [] : _a;\n    var cacheKey = __spreadArray([\n        query,\n        canonicalStringify(variables)\n    ], [].concat(queryKey), true);\n    var queryRef = suspenseCache.getQueryRef(cacheKey, function () {\n        return client.watchQuery(watchQueryOptions);\n    });\n    var _b = React.useState([queryRef.key, queryRef.promise]), current = _b[0], setPromise = _b[1];\n    // This saves us a re-execution of the render function when a variable changed.\n    if (current[0] !== queryRef.key) {\n        current[0] = queryRef.key;\n        current[1] = queryRef.promise;\n    }\n    var promise = current[1];\n    if (queryRef.didChangeOptions(watchQueryOptions)) {\n        current[1] = promise = queryRef.applyOptions(watchQueryOptions);\n    }\n    React.useEffect(function () {\n        var dispose = queryRef.retain();\n        var removeListener = queryRef.listen(function (promise) {\n            setPromise([queryRef.key, promise]);\n        });\n        return function () {\n            removeListener();\n            dispose();\n        };\n    }, [queryRef]);\n    var skipResult = React.useMemo(function () {\n        var error = toApolloError(queryRef.result);\n        return {\n            loading: false,\n            data: queryRef.result.data,\n            networkStatus: error ? NetworkStatus.error : NetworkStatus.ready,\n            error: error,\n        };\n    }, [queryRef.result]);\n    var result = fetchPolicy === \"standby\" ? skipResult : __use(promise);\n    var fetchMore = React.useCallback((function (options) {\n        var promise = queryRef.fetchMore(options);\n        setPromise([queryRef.key, queryRef.promise]);\n        return promise;\n    }), [queryRef]);\n    var refetch = React.useCallback(function (variables) {\n        var promise = queryRef.refetch(variables);\n        setPromise([queryRef.key, queryRef.promise]);\n        return promise;\n    }, [queryRef]);\n    var subscribeToMore = React.useCallback(function (options) { return queryRef.observable.subscribeToMore(options); }, [queryRef]);\n    return React.useMemo(function () {\n        return {\n            client: client,\n            data: result.data,\n            error: toApolloError(result),\n            networkStatus: result.networkStatus,\n            fetchMore: fetchMore,\n            refetch: refetch,\n            subscribeToMore: subscribeToMore,\n        };\n    }, [client, fetchMore, refetch, result, subscribeToMore]);\n}\nfunction validateOptions(options) {\n    var query = options.query, fetchPolicy = options.fetchPolicy, returnPartialData = options.returnPartialData;\n    verifyDocumentType(query, DocumentType.Query);\n    validateFetchPolicy(fetchPolicy);\n    validatePartialDataReturn(fetchPolicy, returnPartialData);\n}\nfunction validateFetchPolicy(fetchPolicy) {\n    if (fetchPolicy === void 0) { fetchPolicy = \"cache-first\"; }\n    var supportedFetchPolicies = [\n        \"cache-first\",\n        \"network-only\",\n        \"no-cache\",\n        \"cache-and-network\",\n    ];\n    invariant(supportedFetchPolicies.includes(fetchPolicy), 56, fetchPolicy);\n}\nfunction validatePartialDataReturn(fetchPolicy, returnPartialData) {\n    if (fetchPolicy === \"no-cache\" && returnPartialData) {\n        globalThis.__DEV__ !== false && invariant.warn(57);\n    }\n}\nexport function toApolloError(result) {\n    return isNonEmptyArray(result.errors) ?\n        new ApolloError({ graphQLErrors: result.errors })\n        : result.error;\n}\nexport function useWatchQueryOptions(_a) {\n    var client = _a.client, query = _a.query, options = _a.options;\n    return useDeepMemo(function () {\n        var _a;\n        if (options === skipToken) {\n            return { query: query, fetchPolicy: \"standby\" };\n        }\n        var fetchPolicy = options.fetchPolicy ||\n            ((_a = client.defaultOptions.watchQuery) === null || _a === void 0 ? void 0 : _a.fetchPolicy) ||\n            \"cache-first\";\n        var watchQueryOptions = __assign(__assign({}, options), { fetchPolicy: fetchPolicy, query: query, notifyOnNetworkStatusChange: false, nextFetchPolicy: void 0 });\n        if (globalThis.__DEV__ !== false) {\n            validateOptions(watchQueryOptions);\n        }\n        // Assign the updated fetch policy after our validation since `standby` is\n        // not a supported fetch policy on its own without the use of `skip`.\n        if (options.skip) {\n            watchQueryOptions.fetchPolicy = \"standby\";\n        }\n        return watchQueryOptions;\n    }, [client, options, query]);\n}\n//# sourceMappingURL=useSuspenseQuery.js.map",
      "start": 1716304642815,
      "end": 1716304642855,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716304642855,
      "end": 1716304642855,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716304642855,
      "end": 1716304642855,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716304642855,
      "end": 1716304642855,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716304642855,
      "end": 1716304642855,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1716304642855,
      "end": 1716304642855,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1716304642855,
      "end": 1716304642855,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1716304642855,
      "end": 1716304642855,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1716304642855,
      "end": 1716304642855,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1716304642855,
      "end": 1716304642855,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1716304642855,
      "end": 1716304642855,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1716304642855,
      "end": 1716304642855,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1716304642855,
      "end": 1716304642855,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1716304642855,
      "end": 1716304642855,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716304642855,
      "end": 1716304642855,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716304642855,
      "end": 1716304642855,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716304642855,
      "end": 1716304642855,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716304642855,
      "end": 1716304642855,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1716304642855,
      "end": 1716304642855,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1716304642855,
      "end": 1716304642855,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716304642855,
      "end": 1716304642855,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1716304642855,
      "end": 1716304642855,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { __assign, __spreadArray } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { ApolloError, NetworkStatus } from \"../../core/index.js\";\nimport { isNonEmptyArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { __use, useDeepMemo, wrapHook } from \"./internal/index.js\";\nimport { getSuspenseCache } from \"../internal/index.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport { skipToken } from \"./constants.js\";\nexport function useSuspenseQuery(query, options) {\n  if (options === void 0) {\n    options = /* @__PURE__ */ Object.create(null);\n  }\n  return wrapHook(\"useSuspenseQuery\", _useSuspenseQuery, useApolloClient(typeof options === \"object\" ? options.client : void 0))(query, options);\n}\nfunction _useSuspenseQuery(query, options) {\n  var client = useApolloClient(options.client);\n  var suspenseCache = getSuspenseCache(client);\n  var watchQueryOptions = useWatchQueryOptions({\n    client,\n    query,\n    options\n  });\n  var fetchPolicy = watchQueryOptions.fetchPolicy, variables = watchQueryOptions.variables;\n  var _a = options.queryKey, queryKey = _a === void 0 ? [] : _a;\n  var cacheKey = __spreadArray([\n    query,\n    canonicalStringify(variables)\n  ], [].concat(queryKey), true);\n  var queryRef = suspenseCache.getQueryRef(cacheKey, function() {\n    return client.watchQuery(watchQueryOptions);\n  });\n  var _b = React.useState([queryRef.key, queryRef.promise]), current = _b[0], setPromise = _b[1];\n  if (current[0] !== queryRef.key) {\n    current[0] = queryRef.key;\n    current[1] = queryRef.promise;\n  }\n  var promise = current[1];\n  if (queryRef.didChangeOptions(watchQueryOptions)) {\n    current[1] = promise = queryRef.applyOptions(watchQueryOptions);\n  }\n  React.useEffect(function() {\n    var dispose = queryRef.retain();\n    var removeListener = queryRef.listen(function(promise2) {\n      setPromise([queryRef.key, promise2]);\n    });\n    return function() {\n      removeListener();\n      dispose();\n    };\n  }, [queryRef]);\n  var skipResult = React.useMemo(function() {\n    var error = toApolloError(queryRef.result);\n    return {\n      loading: false,\n      data: queryRef.result.data,\n      networkStatus: error ? NetworkStatus.error : NetworkStatus.ready,\n      error\n    };\n  }, [queryRef.result]);\n  var result = fetchPolicy === \"standby\" ? skipResult : __use(promise);\n  var fetchMore = React.useCallback(function(options2) {\n    var promise2 = queryRef.fetchMore(options2);\n    setPromise([queryRef.key, queryRef.promise]);\n    return promise2;\n  }, [queryRef]);\n  var refetch = React.useCallback(function(variables2) {\n    var promise2 = queryRef.refetch(variables2);\n    setPromise([queryRef.key, queryRef.promise]);\n    return promise2;\n  }, [queryRef]);\n  var subscribeToMore = React.useCallback(function(options2) {\n    return queryRef.observable.subscribeToMore(options2);\n  }, [queryRef]);\n  return React.useMemo(function() {\n    return {\n      client,\n      data: result.data,\n      error: toApolloError(result),\n      networkStatus: result.networkStatus,\n      fetchMore,\n      refetch,\n      subscribeToMore\n    };\n  }, [client, fetchMore, refetch, result, subscribeToMore]);\n}\nfunction validateOptions(options) {\n  var query = options.query, fetchPolicy = options.fetchPolicy, returnPartialData = options.returnPartialData;\n  verifyDocumentType(query, DocumentType.Query);\n  validateFetchPolicy(fetchPolicy);\n  validatePartialDataReturn(fetchPolicy, returnPartialData);\n}\nfunction validateFetchPolicy(fetchPolicy) {\n  if (fetchPolicy === void 0) {\n    fetchPolicy = \"cache-first\";\n  }\n  var supportedFetchPolicies = [\n    \"cache-first\",\n    \"network-only\",\n    \"no-cache\",\n    \"cache-and-network\"\n  ];\n  invariant(supportedFetchPolicies.includes(fetchPolicy), 56, fetchPolicy);\n}\nfunction validatePartialDataReturn(fetchPolicy, returnPartialData) {\n  if (fetchPolicy === \"no-cache\" && returnPartialData) {\n    globalThis.__DEV__ !== false && invariant.warn(57);\n  }\n}\nexport function toApolloError(result) {\n  return isNonEmptyArray(result.errors) ? new ApolloError({ graphQLErrors: result.errors }) : result.error;\n}\nexport function useWatchQueryOptions(_a) {\n  var client = _a.client, query = _a.query, options = _a.options;\n  return useDeepMemo(function() {\n    var _a2;\n    if (options === skipToken) {\n      return { query, fetchPolicy: \"standby\" };\n    }\n    var fetchPolicy = options.fetchPolicy || ((_a2 = client.defaultOptions.watchQuery) === null || _a2 === void 0 ? void 0 : _a2.fetchPolicy) || \"cache-first\";\n    var watchQueryOptions = __assign(__assign({}, options), { fetchPolicy, query, notifyOnNetworkStatusChange: false, nextFetchPolicy: void 0 });\n    if (globalThis.__DEV__ !== false) {\n      validateOptions(watchQueryOptions);\n    }\n    if (options.skip) {\n      watchQueryOptions.fetchPolicy = \"standby\";\n    }\n    return watchQueryOptions;\n  }, [client, options, query]);\n}\n",
      "start": 1716304642855,
      "end": 1716304643242,
      "order": "normal",
      "sourcemaps": "{\n  \"version\": 3,\n  \"sources\": [\"/Users/shubhamsingh/namma/importedProds/node_modules/@apollo/client/react/hooks/useSuspenseQuery.js\"],\n  \"sourcesContent\": [\"import { __assign, __spreadArray } from \\\"tslib\\\";\\nimport * as React from \\\"rehackt\\\";\\nimport { invariant } from \\\"../../utilities/globals/index.js\\\";\\nimport { ApolloError, NetworkStatus } from \\\"../../core/index.js\\\";\\nimport { isNonEmptyArray } from \\\"../../utilities/index.js\\\";\\nimport { useApolloClient } from \\\"./useApolloClient.js\\\";\\nimport { DocumentType, verifyDocumentType } from \\\"../parser/index.js\\\";\\nimport { __use, useDeepMemo, wrapHook } from \\\"./internal/index.js\\\";\\nimport { getSuspenseCache } from \\\"../internal/index.js\\\";\\nimport { canonicalStringify } from \\\"../../cache/index.js\\\";\\nimport { skipToken } from \\\"./constants.js\\\";\\nexport function useSuspenseQuery(query, options) {\\n    if (options === void 0) { options = Object.create(null); }\\n    return wrapHook(\\\"useSuspenseQuery\\\", _useSuspenseQuery, useApolloClient(typeof options === \\\"object\\\" ? options.client : undefined))(query, options);\\n}\\nfunction _useSuspenseQuery(query, options) {\\n    var client = useApolloClient(options.client);\\n    var suspenseCache = getSuspenseCache(client);\\n    var watchQueryOptions = useWatchQueryOptions({\\n        client: client,\\n        query: query,\\n        options: options,\\n    });\\n    var fetchPolicy = watchQueryOptions.fetchPolicy, variables = watchQueryOptions.variables;\\n    var _a = options.queryKey, queryKey = _a === void 0 ? [] : _a;\\n    var cacheKey = __spreadArray([\\n        query,\\n        canonicalStringify(variables)\\n    ], [].concat(queryKey), true);\\n    var queryRef = suspenseCache.getQueryRef(cacheKey, function () {\\n        return client.watchQuery(watchQueryOptions);\\n    });\\n    var _b = React.useState([queryRef.key, queryRef.promise]), current = _b[0], setPromise = _b[1];\\n    // This saves us a re-execution of the render function when a variable changed.\\n    if (current[0] !== queryRef.key) {\\n        current[0] = queryRef.key;\\n        current[1] = queryRef.promise;\\n    }\\n    var promise = current[1];\\n    if (queryRef.didChangeOptions(watchQueryOptions)) {\\n        current[1] = promise = queryRef.applyOptions(watchQueryOptions);\\n    }\\n    React.useEffect(function () {\\n        var dispose = queryRef.retain();\\n        var removeListener = queryRef.listen(function (promise) {\\n            setPromise([queryRef.key, promise]);\\n        });\\n        return function () {\\n            removeListener();\\n            dispose();\\n        };\\n    }, [queryRef]);\\n    var skipResult = React.useMemo(function () {\\n        var error = toApolloError(queryRef.result);\\n        return {\\n            loading: false,\\n            data: queryRef.result.data,\\n            networkStatus: error ? NetworkStatus.error : NetworkStatus.ready,\\n            error: error,\\n        };\\n    }, [queryRef.result]);\\n    var result = fetchPolicy === \\\"standby\\\" ? skipResult : __use(promise);\\n    var fetchMore = React.useCallback((function (options) {\\n        var promise = queryRef.fetchMore(options);\\n        setPromise([queryRef.key, queryRef.promise]);\\n        return promise;\\n    }), [queryRef]);\\n    var refetch = React.useCallback(function (variables) {\\n        var promise = queryRef.refetch(variables);\\n        setPromise([queryRef.key, queryRef.promise]);\\n        return promise;\\n    }, [queryRef]);\\n    var subscribeToMore = React.useCallback(function (options) { return queryRef.observable.subscribeToMore(options); }, [queryRef]);\\n    return React.useMemo(function () {\\n        return {\\n            client: client,\\n            data: result.data,\\n            error: toApolloError(result),\\n            networkStatus: result.networkStatus,\\n            fetchMore: fetchMore,\\n            refetch: refetch,\\n            subscribeToMore: subscribeToMore,\\n        };\\n    }, [client, fetchMore, refetch, result, subscribeToMore]);\\n}\\nfunction validateOptions(options) {\\n    var query = options.query, fetchPolicy = options.fetchPolicy, returnPartialData = options.returnPartialData;\\n    verifyDocumentType(query, DocumentType.Query);\\n    validateFetchPolicy(fetchPolicy);\\n    validatePartialDataReturn(fetchPolicy, returnPartialData);\\n}\\nfunction validateFetchPolicy(fetchPolicy) {\\n    if (fetchPolicy === void 0) { fetchPolicy = \\\"cache-first\\\"; }\\n    var supportedFetchPolicies = [\\n        \\\"cache-first\\\",\\n        \\\"network-only\\\",\\n        \\\"no-cache\\\",\\n        \\\"cache-and-network\\\",\\n    ];\\n    invariant(supportedFetchPolicies.includes(fetchPolicy), 56, fetchPolicy);\\n}\\nfunction validatePartialDataReturn(fetchPolicy, returnPartialData) {\\n    if (fetchPolicy === \\\"no-cache\\\" && returnPartialData) {\\n        globalThis.__DEV__ !== false && invariant.warn(57);\\n    }\\n}\\nexport function toApolloError(result) {\\n    return isNonEmptyArray(result.errors) ?\\n        new ApolloError({ graphQLErrors: result.errors })\\n        : result.error;\\n}\\nexport function useWatchQueryOptions(_a) {\\n    var client = _a.client, query = _a.query, options = _a.options;\\n    return useDeepMemo(function () {\\n        var _a;\\n        if (options === skipToken) {\\n            return { query: query, fetchPolicy: \\\"standby\\\" };\\n        }\\n        var fetchPolicy = options.fetchPolicy ||\\n            ((_a = client.defaultOptions.watchQuery) === null || _a === void 0 ? void 0 : _a.fetchPolicy) ||\\n            \\\"cache-first\\\";\\n        var watchQueryOptions = __assign(__assign({}, options), { fetchPolicy: fetchPolicy, query: query, notifyOnNetworkStatusChange: false, nextFetchPolicy: void 0 });\\n        if (globalThis.__DEV__ !== false) {\\n            validateOptions(watchQueryOptions);\\n        }\\n        // Assign the updated fetch policy after our validation since `standby` is\\n        // not a supported fetch policy on its own without the use of `skip`.\\n        if (options.skip) {\\n            watchQueryOptions.fetchPolicy = \\\"standby\\\";\\n        }\\n        return watchQueryOptions;\\n    }, [client, options, query]);\\n}\\n//# sourceMappingURL=useSuspenseQuery.js.map\"],\n  \"mappings\": \"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\",\n  \"names\": [\"promise\", \"options\", \"variables\", \"_a\"]\n}\n"
    },
    {
      "name": "vite:css-post",
      "start": 1716304643242,
      "end": 1716304643242,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1716304643242,
      "end": 1716304643242,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1716304643242,
      "end": 1716304643242,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1716304643242,
      "end": 1716304643242,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1716304643242,
      "end": 1716304643242,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1716304643242,
      "end": 1716304643242,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1716304643242,
      "end": 1716304643242,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716304643242,
      "end": 1716304643243,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716304643242,
      "end": 1716304643243,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716304643243,
      "end": 1716304643243,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716304643243,
      "end": 1716304643243,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716304643243,
      "end": 1716304643243,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716304643243,
      "end": 1716304643243,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716304643243,
      "end": 1716304643243,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716304643243,
      "end": 1716304643243,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1716304643243,
      "end": 1716304643243,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1716304643243,
      "end": 1716304643243,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1716304643243,
      "end": 1716304643243,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1716304643243,
      "end": 1716304643243,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1716304643243,
      "end": 1716304643243,
      "order": "normal"
    }
  ]
}
