{"version":3,"file":"Login-D89_h1sz.js","sources":["../../../../../utils/graphql.js","../../../../../components/awesome/Login.vue"],"sourcesContent":["import { gql } from '@apollo/client';\n\nexport const ProductContentSlice = gql`\n  fragment ProductContentSlice on Product {\n    id\n    databaseId\n    name\n    slug\n    type\n    image {\n      id\n      sourceUrl(size: WOOCOMMERCE_THUMBNAIL)\n      altText\n    }\n    ... on SimpleProduct {\n      price\n      regularPrice\n      soldIndividually\n    }\n    ... on VariableProduct {\n      price\n      regularPrice\n      soldIndividually\n    }\n  }\n`;\n\nexport const ProductVariationContentSlice = gql`\n  fragment ProductVariationContentSlice on ProductVariation {\n    id\n    databaseId\n    name\n    slug\n    image {\n      id\n      sourceUrl(size: WOOCOMMERCE_THUMBNAIL)\n      altText\n    }\n    price\n    regularPrice\n  }\n`;\n\nexport const ProductContentFull = gql`\n  fragment ProductContentFull on Product {\n    id\n    databaseId\n    slug\n    name\n    type\n    description\n    shortDescription(format: RAW)\n    image {\n      id\n      sourceUrl\n      altText\n    }\n    galleryImages {\n      nodes {\n        id\n        sourceUrl(size: WOOCOMMERCE_THUMBNAIL)\n        altText\n      }\n    }\n    productTags(first: 20) {\n      nodes {\n        id\n        slug\n        name\n      }\n    }\n    attributes {\n      nodes {\n        id\n        attributeId\n        ... on LocalProductAttribute {\n          name\n          options\n          variation\n        }\n        ... on GlobalProductAttribute {\n          name\n          options\n          variation\n        }\n      }\n    }\n    ... on SimpleProduct {\n      onSale\n      stockStatus\n      price\n      rawPrice: price(format: RAW)\n      regularPrice\n      salePrice\n      stockStatus\n      stockQuantity\n      soldIndividually\n    }\n    ... on VariableProduct {\n      onSale\n      price\n      rawPrice: price(format: RAW)\n      regularPrice\n      salePrice\n      stockStatus\n      stockQuantity\n      soldIndividually\n      variations(first: 50) {\n        nodes {\n          id\n          databaseId\n          name\n          price\n          rawPrice: price(format: RAW)\n          regularPrice\n          salePrice\n          onSale\n          attributes {\n            nodes {\n              name\n              label\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const VariationContent = gql`\n  fragment VariationContent on ProductVariation {\n    id\n    name\n    slug\n    price\n    regularPrice\n    salePrice\n    stockStatus\n    stockQuantity\n    onSale\n    image {\n      id\n      sourceUrl\n      altText\n    }\n  }\n`;\n\nexport const CartItemContent = gql`\n  fragment CartItemContent on CartItem {\n    key\n    product {\n      node {\n        ...ProductContentSlice\n      }\n    }\n    variation {\n      node {\n        ...ProductVariationContentSlice\n      }\n    }\n    quantity\n    total\n    subtotal\n    subtotalTax\n    extraData {\n      key\n      value\n    }\n  }\n  ${ProductContentSlice}\n  ${ProductVariationContentSlice}\n`;\n\nexport const CartContent = gql`\n  fragment CartContent on Cart {\n    contents(first: 100) {\n      itemCount\n      nodes {\n        ...CartItemContent\n      }\n    }\n    appliedCoupons {\n      code\n      discountAmount\n      discountTax\n    }\n    needsShippingAddress\n    availableShippingMethods {\n      packageDetails\n      supportsShippingCalculator\n      rates {\n        id\n        instanceId\n        methodId\n        label\n        cost\n      }\n    }\n    subtotal\n    subtotalTax\n    shippingTax\n    shippingTotal\n    total\n    totalTax\n    feeTax\n    feeTotal\n    discountTax\n    discountTotal\n  }\n  ${CartItemContent}\n`;\n\nexport const AddressFields = gql`\n  fragment AddressFields on CustomerAddress {\n    firstName\n    lastName\n    company\n    address1\n    address2\n    city\n    state\n    country\n    postcode\n    phone\n  }\n`;\n\nexport const LineItemFields = gql`\n  fragment LineItemFields on LineItem {\n    databaseId\n    product {\n      node {\n        ...ProductContentSlice\n      }\n    }\n    orderId\n    quantity\n    subtotal\n    total\n    totalTax\n  }\n  ${ProductContentSlice}\n`;\n\nexport const OrderFields = gql`\n  fragment OrderFields on Order {\n    id\n    databaseId\n    orderNumber\n    orderVersion\n    status\n    needsProcessing\n    subtotal\n    paymentMethodTitle\n    total\n    totalTax\n    date\n    dateCompleted\n    datePaid\n    billing {\n      ...AddressFields\n    }\n    shipping {\n      ...AddressFields\n    }\n    lineItems(first: 100) {\n      nodes {\n          ...LineItemFields\n      }\n    }\n  }\n  ${AddressFields}\n  ${LineItemFields}\n`;\n\nexport const CustomerFields = gql`\n  fragment CustomerFields on Customer {\n    id\n    databaseId\n    firstName\n    lastName\n    displayName\n    billing {\n      ...AddressFields\n    }\n    shipping {\n      ...AddressFields\n    }\n    orders(first: 100) {\n      nodes {\n        ...OrderFields\n      } \n    }\n  }\n  ${AddressFields}\n  ${OrderFields}\n`;\n\nexport const CustomerContent = gql`\n  fragment CustomerContent on Customer {\n    id\n    sessionToken\n  }\n`;\n\n\n\nexport const GetProduct = gql`\n  query GetProduct($id: ID!, $idType: ProductIdTypeEnum) {\n    product(id: $id, idType: $idType) {\n      ...ProductContentFull\n    }\n  }\n  ${ProductContentFull}\n`;\n\nexport const GetProductVariation = gql`\n  query GetProductVariation($id: ID!) {\n    productVariation(id: $id, idType: DATABASE_ID) {\n      ...VariationContent\n    }\n  }\n  ${VariationContent}\n`;\n\nexport const GetCart = gql`\n  query GetCart($customerId: Int) {\n    cart {\n      ...CartContent\n    }\n    customer(customerId: $customerId) {\n      ...CustomerContent\n    }\n  }\n  ${CartContent}\n  ${CustomerContent}\n`;\n\nexport const AddToCart = gql`\n  mutation AddToCart($productId: Int!, $variationId: Int, $quantity: Int, $extraData: String) {\n    addToCart(\n      input: {productId: $productId, variationId: $variationId, quantity: $quantity, extraData: $extraData}\n    ) {\n      cart {\n        ...CartContent\n      }\n      cartItem {\n        ...CartItemContent\n      }\n    }\n  }\n  ${CartContent}\n  ${CartItemContent}\n`;\n\nexport const UpdateCartItemQuantities = gql`\n  mutation UpdateCartItemQuantities($items: [CartItemQuantityInput]) {\n    updateItemQuantities(input: {items: $items}) {\n      cart {\n        ...CartContent\n      }\n      items {\n        ...CartItemContent\n      }\n    }\n  }\n  ${CartContent}\n  ${CartItemContent}\n`;\n\nexport const RemoveItemsFromCart = gql`\n  mutation RemoveItemsFromCart($keys: [ID], $all: Boolean) {\n    removeItemsFromCart(input: {keys: $keys, all: $all}) {\n      cart {\n        ...CartContent\n      }\n      cartItems {\n        ...CartItemContent\n      }\n    }\n  }\n  ${CartContent}\n  ${CartItemContent}\n`;\nexport const Login = gql`\n  mutation Login($username: String!, $password: String!) {\n    login(input: { username: $username, password: $password }) {\n      authToken\n      refreshToken\n      customer {\n        ...CustomerFields\n      }\n    }\n  }\n  ${CustomerFields}\n`;\n\nexport const UpdateCustomer = gql`\n  mutation UpdateCustomer($input: UpdateCustomerInput!) {\n    updateCustomer(input: $input) {\n      customer {\n        ...CustomerFields\n      }\n    }\n  }\n  ${CustomerFields}\n`;","<template>\n  <div class=\"login-container\">\n    <form @submit.prevent=\"handleSubmit\" class=\"login-form\">\n      <div class=\"form-group\">\n        <input\n          type=\"text\"\n          v-model=\"username\"\n          placeholder=\"Username or Email\"\n          autocomplete=\"email\"\n          class=\"form-control\"\n        />\n      </div>\n      <div class=\"form-group\">\n        <input\n          type=\"password\"\n          v-model=\"password\"\n          autocomplete=\"current-password\"\n          placeholder=\"Password\"\n          class=\"form-control\"\n        />\n      </div>\n\n      <div class=\"grid gap-4\">\n        <button\n          type=\"submit\"\n          @click=\"signin\"\n          :disabled=\"isLoading\"\n          class=\"btn btn-primary\"\n        >\n          Sign in\n        </button>\n\n        <div v-if=\"errors\" class=\"error-message\">{{ errors }}</div>\n      </div>\n    </form>\n    <div class=\"grid mt-4 gap-4\">\n      <h1 class=\"text-center text-2xl\">or</h1>\n      <button @click=\"showSignUp\" class=\"btn btn-secondary\">New User</button>\n     \n    </div>\n  </div>\n  <div class=\"mx-auto mt-6\"> \n  <AwesomeSignup v-if=\"isSignUpVisible\" />\n  </div>\n</template>\n\n<script>\nimport { useAuthStore } from \"../../stores/auth\";\nimport { Login } from \"../../utils/graphql\";\nexport default {\n  data() {\n    return {\n      isSignUpVisible: false,\n      username: \"\",\n      password: \"\",\n      isLoading: false,\n      errors: null,\n    };\n  },\n  methods: {\n    async signin() {\n      this.isLoading = true;\n      try {\n        const { data } = await this.$apollo.mutate({\n          mutation: Login,\n          variables: {\n            input: {\n              provider: \"PASSWORD\",\n              credentials: {\n                username: this.username,\n                password: this.password,\n              },\n            },\n          },\n        });\n        const authStore = useAuthStore();\n        const { authToken, refreshToken, user } = data.login;\n        sessionStorage.setItem(\"authToken\", authToken);\n        sessionStorage.setItem(\"refreshToken\", refreshToken);\n        sessionStorage.setItem(\"username\", user.username);\n        authStore.setUser(user.username);\n        authStore.setToken(authToken);\n        authStore.setRToken(refreshToken);\n        await this.$router.push(\"/\");\n      } catch (error) {\n        console.error(\"Login failed:\", error.message);\n        this.errors = error.message;\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    showSignUp() {\n      this.isSignUpVisible = true;\n    },\n  },\n};\n\n</script>\n\n<style scoped>\n.login-container {\n  max-width: 400px;\n  margin: auto;\n  padding: 20px;\n  border: 1px solid rgb(0, 0, 0);\n  border-radius: 5px;\n  background-color: #000000;\n  color: #ff0000;\n}\n\n.login-form {\n  display: flex;\n  flex-direction: column;\n}\n\n.form-group {\n  margin-bottom: 20px;\n}\n\n.form-control {\n  width: 100%;\n  padding: 10px;\n  font-size: 16px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n}\n\n.btn {\n  padding: 10px 20px;\n  font-size: 16px;\n  background-color: #4285f4;\n  color: #fff;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.btn:disabled {\n  background-color: rgb(83, 9, 9);\n  cursor: not-allowed;\n}\n\n.error-message {\n  margin-top: 10px;\n  color: #d50000;\n  font-size: 14px;\n}\n</style>\n"],"names":["_ssrRenderAttr","_ssrIncludeBooleanAttr","_ssrInterpolate","_ssrRenderComponent"],"mappings":"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"}