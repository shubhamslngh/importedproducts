{"version":3,"file":"Categories-MZrsdFE2.js","sources":["../../../../../components/awesome/Categories.vue"],"sourcesContent":["<template>\n  <div class=\"p-6 bg-gray-50 dark:bg-transparent rounded-lg shadow-inner\">\n    <!-- Centered Heading -->\n    <h2 class=\"text-2xl font-bold text-gray-800 dark:text-red-100 mb-6 text-center w-full\">\n      Whatever you need, we got it!\n    </h2>\n\n    <!-- Responsive Scrollable Flex Container -->\n    <div class=\"flex overflow-x-auto gap-4 pb-2\">\n      <div\n        v-for=\"(category, index) in categories\"\n        :key=\"index\"\n        @click=\"selectCategory(category)\"\n        :class=\"[\n          'cursor-pointer transform transition-all duration-300 ease-in-out shrink-0',\n          selectedCategory?.name === category.name\n            ? 'bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg scale-105'\n            : 'bg-white dark:bg-gray-800 hover:bg-indigo-50 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200 hover:scale-105'\n        ]\"\n        class=\"flex flex-col items-center p-4 w-36 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700\"\n      >\n        <div\n          class=\"w-14 h-14 rounded-full bg-indigo-100 dark:bg-indigo-900 text-indigo-600 dark:text-indigo-300 flex items-center justify-center mb-3 text-2xl font-semibold\"\n        >\n          {{ category.name.charAt(0).toUpperCase() }}\n        </div>\n\n        <span class=\"text-center text-sm font-medium tracking-wide\">\n          {{ category.name }}\n        </span>\n      </div>\n    </div>\n  </div>\n</template>\n\n\n\n\n<script setup>\nimport { ref, onMounted } from \"vue\";\nimport gql from \"graphql-tag\";\nimport { useApolloClient } from \"@vue/apollo-composable\";\n\nconst emit = defineEmits([\"categorySelected\"]);\n\nconst categories = ref([]);\nconst selectedCategory = ref(null);\n\nconst GET_CATEGORIES = gql`\n  query GET_CATEGORIES {\n    productCategories(first: 200, where: { hideEmpty: true, parent: null }) {\n      edges {\n        node {\n          name\n          image {\n            altText\n            link\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst apolloClient = useApolloClient().client;\n\nconst fetchCategories = async () => {\n  try {\n    const { data } = await apolloClient.query({ query: GET_CATEGORIES });\n    categories.value = data.productCategories.edges.map(edge => edge.node);\n  } catch (error) {\n    console.error(\"Error fetching categories:\", error);\n  }if (categories.value.length > 0) {\n    selectedCategory.value = categories.value[0].name;\n  }\n};\n\nconst selectCategory = (category) => {\n  selectedCategory.value = category;\n  emit(\"categorySelected\", category);\n};\n\nonMounted(() => {\n  fetchCategories();\n});\n</script>\n<style scoped>\n.no-scrollbar {\n  scrollbar-width: none; /* Firefox */\n  -ms-overflow-style: none; /* IE and Edge */\n}\n.no-scrollbar::-webkit-scrollbar {\n  display: none; /* Chrome, Safari */\n}\n</style>"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA,UAAM,aAAa,IAAI,CAAA,CAAE;AACzB,UAAM,mBAAmB,IAAI,IAAI;AAEV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBF,oBAAe,EAAG;;;;;;;;;;;;;;;;;;;;;"}