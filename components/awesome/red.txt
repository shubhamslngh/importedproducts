done!!<template>
  <div v-if="products.length > 0">
    <swiper
      :effect="'cards'"
      :grabCursor="true"
      :modules="modules"
      class="mySwiper"
    >
      <!-- {{ console.log(products, "products for cards in template") }} -->
      <swiper-slide
        v-for="(product, index) in products"
        :key="index"
        :style="{ 'background-image': `url(${product.img})` }"
      >
        <div @click="handleClick(product.variationId)">
          <img
            :src="product.img ? product.img : ''"
            alt="Product Image"
            class="transition-all ease-in-out"
          />
        </div>
      </swiper-slide>
    </swiper>
    <div>
      <AwesomeAddtoCart :productId:props/>
    </div>
  </div>
  <div v-else>Loading products...</div>
</template>

<script>
import { ref, onMounted, defineProps } from "vue";
import { Swiper, SwiperSlide } from "swiper/vue";
import { getVariation } from "../../utils/cart"; // Assuming getVariation is correctly imported
import "swiper/css";
import "swiper/css/effect-cards";
import { EffectCards } from "swiper/modules";

export default {
  components: {
    Swiper,
    SwiperSlide,
  },
  props: {
    productId: {
      type: Number,
      required: true,
    },
    variationId: {
      type: Number,
      default: 0,
    },
  },
  setup(props) {
    const selectedProductId = ref(props.productId);
    const selectedVariationId = ref(props.variationId);
    const products = ref([]);
    let data = ref([]);
    const { mutate: getProducts, loading } = useMutation(getVariation);

    onMounted(async () => {
      try {
        data = await getProducts({ productId: props.productId });
        if (data) {
          console.log(data, "data inside try");
          products.value = data.data.variableProduct.variations.nodes.map(
            (nodes) => ({
              name: nodes.name,
              img: nodes.image.link,
              variationId: nodes.databaseId,
            })
          );
          console.log(products.value, "products object created");
        }
      } catch (error) {
        console.error("Error fetching product:", error);
      }
    });

    const handleClick = (variationId) => {
      selectedVariationId.value = variationId;
      selectedProductId.value = props.productId;
      console.log(selectedProductId.value, "here is Product id");
      console.log(selectedVariationId.value, "here is Variation id");
    };

    return {
      modules: [EffectCards],
      selectedProductId,
      selectedVariationId,
      products,
      handleClick,
    };
  },
};
</script>

<style scoped>
.img {
  background-color: transparent;
}

.swiper {
  width: 240px;
  height: 320px;
  background: none !important;
}
.swiper-slide-shadow {
  background: none;
}
.swiper-3d .swiper-slide-shadow {
  background: none;
}

.swiper-cards {
  border: none;
  background: none;
}
.swiper-slide-shadow .swiper-slide-shadow-cards {
  background: none;
}
.swiper-slide {
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 22px;
  font-weight: bold;
  background-color: none;
}
</style>
